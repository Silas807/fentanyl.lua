--!nocheck
-- // variables

local library = {}
local pages = {}
local sections = {}
local multisections = {}
local mssections = {}
local toggles = {}
local buttons = {}
local sliders = {}
local dropdowns = {}
local multiboxs = {}
local buttonboxs = {}
local textboxs = {}
local keybinds = {}
local colorpickers = {}
local configloaders = {}
local watermarks = {}
local loaders = {}
--
local utility = {}
--
local check_exploit = (syn and "Synapse") or (KRNL_LOADED and "Krnl") or (isourclosure and "ScriptWare") or nil
local plrs = game:GetService("Players")
local cre = plrs.LocalPlayer.PlayerGui
local rs = game:GetService("RunService")
if not (rs:IsStudio()) then
	cre = game:GetService("CoreGui")
end
local ts = game:GetService("TweenService") 
local uis = game:GetService("UserInputService") 
local hs = game:GetService("HttpService")
local ws = game:GetService("Workspace")
local plr = plrs.LocalPlayer
local cam = ws.CurrentCamera
-- // indexes
library.__index = library
pages.__index = pages
sections.__index = sections
multisections.__index = multisections
mssections.__index = mssections
toggles.__index = toggles
buttons.__index = buttons
sliders.__index = sliders
dropdowns.__index = dropdowns
multiboxs.__index = multiboxs
buttonboxs.__index = buttonboxs
textboxs.__index = textboxs
keybinds.__index = keybinds
colorpickers.__index = colorpickers
configloaders.__index = configloaders
watermarks.__index = watermarks
loaders.__index = loaders
-- // functions
utility.new = function(instance,properties) 
	-- // instance
	local ins = Instance.new(instance)
	-- // properties setting
	for property,value in pairs(properties) do
		ins[property] = value
	end
	-- // return
	return ins
end
--
utility.dragify = function(ins,touse)
	local dragging
	local dragInput
	local dragStart
	local startPos
	--
	local function update(input)
		local delta = input.Position - dragStart
		touse:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.1,true)
	end
	--
	ins.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = touse.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	--
	ins.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	--
	uis.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end
--
utility.round = function(n,d)
	return tonumber(string.format("%."..(d or 0).."f",n))
end
--
utility.zigzag = function(X)
	return math.acos(math.cos(X*math.pi))/math.pi
end
--
utility.capatalize = function(s)
	local l = ""
	for v in s:gmatch('%u') do
		l = l..v
	end
	return l
end
--
utility.splitenum = function(enum)
	local s = tostring(enum):split(".")
	return s[#s]
end
--
utility.from_hex = function(h)
	local r,g,b = string.match(h,"^#?(%w%w)(%w%w)(%w%w)$")
	return Color3.fromRGB(tonumber(r,16), tonumber(g,16), tonumber(b,16))
end
--
utility.to_hex = function(c)
	return string.format("#%02X%02X%02X",c.R *255,c.G *255,c.B *255)
end
--
utility.removespaces = function(s)
	return s:gsub(" ","")
end
-- // main
local latestScreen = nil
function library:new(props)
	-- // properties
	local textsize = props.textsize or props.TextSize or props.textSize or props.Textsize or 12
	local font = props.font or props.Font or "RobotoMono"
	local name = props.name or props.Name or props.UiName or props.Uiname or props.uiName or props.username or props.Username or props.UserName or props.userName or "new ui"
	local color = props.color or props.Color or props.mainColor or props.maincolor or props.MainColor or props.Maincolor or props.Accent or props.accent or Color3.fromRGB(225, 58, 81)
	-- // variables
	local window = {}
	-- // main
	local screen = utility.new(
		"ScreenGui",
		{
			Name = tostring(math.random(0,999999))..tostring(math.random(0,999999)),
			DisplayOrder = 9999,
			ResetOnSpawn = false,
			ZIndexBehavior = "Global",
			Parent = cre
		}
	)
	latestScreen = screen
	--
	if (check_exploit == "Synapse" and syn.request) then
		syn.protect_gui(screen)
	end
	-- 1
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = color,
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(0,600,0,790),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = screen
		}
	)
	-- 2
	local outline2 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(1,-4,1,-4),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = outline
		}
	)
	-- 3
	local indent = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = outline2
		}
	)
	-- 4
	local main = utility.new(
		"ScrollingFrame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,-10,1,-25),
			Position = UDim2.new(0.5,0,1,-5),
			CanvasSize = UDim2.new(0, 0, 100, 0),
			Parent = outline2
		}
	)
	--
	local title = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0.5,0,0,0),
			Parent = outline2
		}
	)
	-- 5
	local outline3 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = main
		}
	)
	--
	local titletext = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,1,0),
			Position = UDim2.new(0.5,0,0,0),
			Font = font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextXAlignment = "Left",
			TextSize = textsize,
			TextStrokeTransparency = 0,
			Parent = title
		}
	)
	-- 6
	local holder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-6,1,-6),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = main
		}
	)
	-- 7
	local holder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-6,1,-6),
			Position = UDim2.new(0.5,0,0.5,0),
			Parent = main
		}
	)
	-- 8
	local tabs = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,-20),
			Position = UDim2.new(0.5,0,1,0),
			Parent = holder
		}
	)
	--
	local tabsbuttons = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,21),
			Position = UDim2.new(0.5,0,0,0),
			ZIndex = 2,
			Parent = holder
		}
	)
	-- 9
	local outline4 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = tabs
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Horizontal",
			Padding = UDim.new(0,2),
			Parent = tabsbuttons
		}
	)
	--
	utility.dragify(title,outline)
	-- // window tbl
	window = {
		["screen"] = screen,
		["holder"] = holder,
		["labels"] = {},
		["tabs"] = outline4,
		["tabsbuttons"] = tabsbuttons,
		["outline"] = outline,
		["pages"] = {},
		["pointers"] = {},
		["dropdowns"] = {},
		["multiboxes"] = {},
		["buttonboxs"] = {},
		["colorpickers"] = {},
		["x"] = true,
		["y"] = true,
		["key"] = Enum.KeyCode.Insert,
		["textsize"] = textsize,
		["font"] = font,
		["theme"] = {
			["accent"] = color
		},
		["themeitems"] = {
			["accent"] = {
				["BackgroundColor3"] = {},
				["BorderColor3"] = {},
				["TextColor3"] = {}
			}
		}
	}
	--
	table.insert(window.themeitems["accent"]["BackgroundColor3"],outline)
	--
	local toggled = true
	local cooldown = false
	local saved = UDim2.new(0,0,0,0)
	--
	uis.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.Keyboard then
			if Input.KeyCode == window.key then
				if cooldown == false then
					if toggled then
						cooldown = true
						toggled = not toggled
						saved = outline.Position
						local xx,yy = 0,0
						local xxx,yyy = 0,0
						--
						if (outline.AbsolutePosition.X+(outline.AbsoluteSize.X/2)) < (cam.ViewportSize.X/2) then
							xx = -3
						else
							xx = 3
						end
						--
						if window.y then
							if (outline.AbsolutePosition.Y+(outline.AbsoluteSize.Y/2)) < (cam.ViewportSize.Y/2) then
								yy = -3
							else
								yy = 3
							end
						else
							yy = saved.Y.Scale
							yyy = saved.Y.Offset
						end
						--
						if window.x == false and window.y == false then
							screen.Enabled = false
						else
							ts:Create(outline, TweenInfo.new(0.5,Enum.EasingStyle.Quad,Enum.EasingDirection.In), {Position = UDim2.new(xx,xxx,yy,yyy)}):Play()
						end
						wait(0.5)
						cooldown = false
					else
						cooldown = true
						toggled = not toggled
						if window.x == false and window.y == false then
							screen.Enabled = true
						else
							ts:Create(outline, TweenInfo.new(0.5,Enum.EasingStyle.Quad,Enum.EasingDirection.Out), {Position = saved}):Play()
						end
						wait(0.5)
						cooldown = false
					end
				end
			end
		end
	end)
	--
	window.labels[#window.labels+1] = titletext
	-- // metatable indexing + return
	setmetatable(window, library)
	return window
end
--
function library:watermark()
	local watermark = {}
	--
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = self.theme.accent,
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(0,300,0,26),
			Position = UDim2.new(1,-10,0,10),
			ZIndex = 9900,
			Visible = false,
			Parent = self.screen
		}
	)
	--
	table.insert(self.themeitems["accent"]["BackgroundColor3"],outline)
	--
	local outline2 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(1,-4,1,-4),
			Position = UDim2.new(0.5,0,0.5,0),
			ZIndex = 9901,
			Parent = outline
		}
	)
	--
	local indent = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0.5,0,0.5,0),
			ZIndex = 9902,
			Parent = outline2
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,1,0),
			Position = UDim2.new(0.5,0,0,0),
			Font = self.font,
			Text = "",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextXAlignment = "Left",
			TextSize = self.textsize,
			TextStrokeTransparency = 0,
			ZIndex = 9903,
			Parent = indent
		}
	)
	--
	local con
	con = title:GetPropertyChangedSignal("TextBounds"):Connect(function()
		outline.Size = UDim2.new(0,title.TextBounds.X+20,0,26)
	end)
	--
	watermark = {
		["outline"] = outline,
		["outline2"] = outline2,
		["indent"] = indent,
		["title"] = title,
		["connection"] = con
	}
	--
	self.labels[#self.labels+1] = title
	--
	setmetatable(watermark,watermarks)
	return watermark
end
--
function watermarks:update(content)
	local content = content or {}
	local watermark = self
	--
	local text = ""
	--
	for i,v in pairs(content) do
		text = text..i..": "..v.."  "
	end
	--
	text = text:sub(0, -3)
	--
	watermark.title.Text = text
end
--
function watermarks:updateside(side)
	side = utility.removespaces(tostring(side):lower())
	--
	local sides = {
		topright = {
			AnchorPoint = Vector2.new(1,0),
			Position = UDim2.new(1,-10,0,10)
		},
		topleft = {
			AnchorPoint = Vector2.new(0,0),
			Position = UDim2.new(0,10,0,10)
		},
		bottomright = {
			AnchorPoint = Vector2.new(1,1),
			Position = UDim2.new(1,-10,1,-10)
		},
		bottomleft = {
			AnchorPoint = Vector2.new(0,1),
			Position = UDim2.new(0,10,1,-10)
		}
	}
	--
	if sides[side] then
		self.outline.AnchorPoint = sides[side].AnchorPoint
		self.outline.Position = sides[side].Position
	end
end
--
function library:loader(props)
	local name = props.name or props.Name or props.LoaderName or props.Loadername or props.loaderName or props.loadername or "Loader"
	local scriptname = props.scriptname or props.Scriptname or props.ScriptName or props.scriptName or "Universal"
	local closed = props.close or props.Close or props.closecallback or props.Closecallback or props.CloseCallback or props.closeCallback or function()end
	local logedin = props.login or props.Login or props.logincallback or props.Logincallback or props.LoginCallback or props.loginCallback or function()end
	local loader = {}
	--
	local screen = utility.new(
		"ScreenGui",
		{
			Name = tostring(math.random(0,999999))..tostring(math.random(0,999999)),
			DisplayOrder = 9999,
			ResetOnSpawn = false,
			ZIndexBehavior = "Global",
			Parent = cre
		}
	)
	if (check_exploit == "Synapse" and syn.request) then
		syn.protect_gui(screen)
	end
	--
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(168, 52, 235),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(0,300,0,90),
			Position = UDim2.new(0.5,0,0.5,0),
			ZIndex = 9900,
			Visible = false,
			Parent = screen
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(1,-4,1,-4),
			Position = UDim2.new(0.5,0,0.5,0),
			ZIndex = 9901,
			Parent = outline
		}
	)
	--
	local indent = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0.5,0,0.5,0),
			ZIndex = 9902,
			Parent = outline2
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,0,20),
			Position = UDim2.new(0.5,0,0,0),
			Font = "RobotoMono",
			Text = name,
			TextColor3 = Color3.fromRGB(168, 52, 235),
			TextXAlignment = "Center",
			TextSize = 12,
			TextStrokeTransparency = 0,
			ZIndex = 9903,
			Parent = indent
		}
	)
	--
	local scripttitle = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,0,20),
			Position = UDim2.new(0.5,0,0,20),
			Font = "RobotoMono",
			Text = "Script: "..scriptname,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextXAlignment = "Center",
			TextSize = 12,
			TextStrokeTransparency = 0,
			ZIndex = 9903,
			Parent = indent
		}
	)
	--
	local makebutton = function(name,parent)
		local button_holder = utility.new(
			"Frame",
			{
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				ZIndex = 9904,
				Parent = parent
			}
		)
		--
		local button_outline = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(12, 12, 12),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 9905,
				Parent = button_holder
			}
		)
		--
		local button_outline2 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(56, 56, 56),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 9906,
				Parent = button_outline
			}
		)
		--
		local button_color = utility.new(
			"Frame",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundColor3 = Color3.fromRGB(30, 30, 30),
				BorderSizePixel = 0,
				Size = UDim2.new(1,0,0,0),
				Position = UDim2.new(0,0,0,0),
				ZIndex = 9907,
				Parent = button_outline2
			}
		)
		--
		utility.new(
			"UIGradient",
			{
				Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
				Rotation = 90,
				Parent = button_color
			}
		)
		--
		local button_button = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0,0,0,0),
				Text = name,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = 12,
				TextStrokeTransparency = 0,
				Font = "RobotoMono",
				ZIndex = 9908,
				Parent = button_holder
			}
		)
		--
		return {button_holder,button_outline,button_button}
	end
	--
	local close = makebutton("close",indent)
	local login = makebutton("login",indent)
	--
	close[1].AnchorPoint = Vector2.new(0.5,0)
	close[1].Size = UDim2.new(0.5,0,0,20)
	close[1].Position = UDim2.new(0.5,0,0,40)
	--
	login[1].AnchorPoint = Vector2.new(0.5,0)
	login[1].Size = UDim2.new(0.5,0,0,20)
	login[1].Position = UDim2.new(0.5,0,0,62)
	--
	close[3].MouseButton1Down:Connect(function()
		close[2].BorderColor3 = Color3.fromRGB(168, 52, 235)
		outline:TweenPosition(UDim2.new(-1.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.75,true)
		closed()
		wait(0.05)
		close[2].BorderColor3 = Color3.fromRGB(12,12,12)
		wait(0.7)
		screen:Remove()
	end)
	--
	login[3].MouseButton1Down:Connect(function()
		login[2].BorderColor3 = Color3.fromRGB(168, 52, 235)
		outline:TweenPosition(UDim2.new(1.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.75,true)
		logedin()
		wait(0.05)
		login[2].BorderColor3 = Color3.fromRGB(12,12,12)
		wait(0.7)
		screen:Remove()
	end)
	--
	loader = {
		["outline"] = outline,
		["outline2"] = outline2,
		["indent"] = indent,
		["title"] = title
	}
	--
	setmetatable(loader,loaders)
	return loader
end
--
function loaders:toggle()
	self.outline.Visible = true
end
--
function watermarks:toggle(bool)
	local watermark = self
	--
	watermark.outline.Visible = bool
end
--
function library:saveconfig()
	local cfg = {}
	--
	for i,v in pairs(self.pointers) do
		cfg[i] = {}
		for c,d in pairs(v) do
			cfg[i][c] = {}
			for x,z in pairs(d) do
				if typeof(z.current) == "Color3" then
					cfg[i][c][x] = {z.current.R,z.current.G,z.current.B}
				else
					cfg[i][c][x] = z.current
				end
			end
		end
	end
	--
	return hs:JSONEncode(cfg)
end
--
function library:loadconfig(cfg)
	local cfg = hs:JSONDecode(readfile(cfg))
	for i,v in pairs(cfg) do
		for c,d in pairs(v) do
			for x,z in pairs(d) do
				if z ~= nil then
					if self.pointers[i] ~= nil and self.pointers[i][c] ~= nil and self.pointers[i][c][x] ~= nil then
						self.pointers[i][c][x]:set(z)
					end
				end
			end
		end
	end
end
--
function library:settheme(theme,color)
	local window = self
	--
	if window.theme[theme] then
		window.theme[theme] = color
	end
	--
	if window.themeitems[theme] then
		for i,v in pairs(window.themeitems[theme]) do
			for z,x in pairs(v) do
				x[i] = color
			end
		end
	end
end
--
function library:setkey(key)
	if typeof(key) == "EnumItem" then
		local window = self
		window.key = key
	end
end
--
function library:settoggle(side,bool)
	if side == "x" then
		self.x = bool
	else
		self.y = bool
	end
end
--
function library:setfont(font)
	if font ~= nil then
		local window = self
		for i,v in pairs(window.labels) do
			if v ~= nil then
				v.Font = font
			end
		end
	end
end
--
function library:settextsize(size)
	if size ~= nil then
		local window = self
		for i,v in pairs(window.labels) do
			if v ~= nil then
				v.TextSize = size
			end
		end
	end
end
--
function library:page(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	-- // variables
	local page = {}
	-- // main
	local tabbutton = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,75,1,0),
			Parent = self.tabsbuttons
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = tabbutton
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = tabbutton
		}
	)
	--
	local r_line = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 0,
			Size = UDim2.new(0,1,0,1),
			Position = UDim2.new(1,0,1,1),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local l_line = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 0,
			Size = UDim2.new(0,1,0,1),
			Position = UDim2.new(0,0,1,1),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local line = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,0,2),
			Position = UDim2.new(0,0,1,0),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local label = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,0),
			Font = self.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.textsize,
			TextStrokeTransparency = 0,
			Parent = outline
		}
	)
	--
	local pageholder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-20,1,-20),
			Position = UDim2.new(0.5,0,0.5,0),
			Visible = false,
			Parent = self.tabs
		}
	)
	--
	local left = utility.new(
		"ScrollingFrame",
		{
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(0.5,-5,1,0),
			Position = UDim2.new(0,0,0,0),
			AutomaticCanvasSize = "Y",
			CanvasSize = UDim2.new(0,0,0,0),
			ScrollBarImageTransparency = 1,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 0,
			ClipsDescendants = false,
			VerticalScrollBarInset = "None",
			VerticalScrollBarPosition = "Right",
			Parent = pageholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,10),
			Parent = left
		}
	)
	--
	local right = utility.new(
		"ScrollingFrame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(0.5,-5,1,0),
			Position = UDim2.new(1,0,0,0),
			AutomaticCanvasSize = "Y",
			CanvasSize = UDim2.new(0,0,0,0),
			ScrollBarImageTransparency = 1,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 0,
			ClipsDescendants = false,
			VerticalScrollBarInset = "None",
			VerticalScrollBarPosition = "Right",
			Parent = pageholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,10),
			Parent = right
		}
	)
	-- // page tbl
	page = {
		["library"] = self,
		["outline"] = outline,
		["r_line"] = r_line,
		["l_line"] = l_line,
		["line"] = line,
		["page"] = pageholder,
		["left"] = left,
		["right"] = right,
		["open"] = false,
		["pointers"] = {}
	}
	--
	table.insert(self.pages,page)
	--
	button.MouseButton1Down:Connect(function()
		if page.open == false then
			for i,v in pairs(self.pages) do
				if v ~= page then
					if v.open then
						v.page.Visible = false
						v.open = false
						v.outline.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
						v.line.Size = UDim2.new(1,0,0,2)
						v.line.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
					end
				end
			end
			--
			self:closewindows()
			--
			page.page.Visible = true
			page.open = true
			page.outline.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			page.line.Size = UDim2.new(1,0,0,3)
			page.line.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		self.pointers[tostring(pointer)] = page.pointers
	end
	--
	self.labels[#self.labels+1] = label
	-- // metatable indexing + return
	setmetatable(page, pages)
	return page
end
--
function pages:openpage()
	local page = self
	--
	if page.open == false then
		for i,v in pairs(page.library.pages) do
			if v ~= page then
				if v.open then
					v.page.Visible = false
					v.open = false
					v.outline.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
					v.line.Size = UDim2.new(1,0,0,2)
					v.line.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
				end
			end
		end
		--
		page.page.Visible = true
		page.open = true
		page.outline.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		page.line.Size = UDim2.new(1,0,0,3)
		page.line.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	end
end
--
function pages:section(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local side = props.side or props.Side or props.sectionside or props.Sectionside or props.SectionSide or props.sectionSide or "left"
	local size = props.size or props.Size or props.yaxis or props.yAxis or props.YAxis or props.Yaxis or 200
	side = side:lower()
	-- // variables
	local section = {}
	-- // main
	local sectionholder = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,size),
			Parent = self[side]
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = sectionholder
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = self.library.theme.accent,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-2,0,1),
			Position = UDim2.new(0.5,0,0,0),
			Parent = outline
		}
	)
	--
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	--
	local content = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-12,1,-25),
			Position = UDim2.new(0.5,0,1,-5),
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-5,0,20),
			Position = UDim2.new(0,5,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = outline
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,5),
			Parent = content
		}
	)
	-- // section tbl
	section = {
		["library"] = self.library,
		["sectionholder"] = sectionholder,
		["color"] = color,
		["content"] = content,
		["pointers"] = {}
	}
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = section.pointers
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(section, sections)
	return section
end
--
function pages:multisection(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local side = props.side or props.Side or props.sectionside or props.Sectionside or props.SectionSide or props.sectionSide or "left"
	local size = props.size or props.Size or props.yaxis or props.yAxis or props.YAxis or props.Yaxis or 200
	side = side:lower()
	-- // variables
	local multisection = {}
	-- // main
	local sectionholder = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,size),
			Parent = self[side]
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = sectionholder
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = self.library.theme.accent,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-2,0,1),
			Position = UDim2.new(0.5,0,0,0),
			Parent = outline
		}
	)
	--
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	--
	local tabsholder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0,1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,-15),
			Position = UDim2.new(0,0,1,0),
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-5,0,20),
			Position = UDim2.new(0,5,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = outline
		}
	)
	--
	local buttons = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-6,0,20),
			Position = UDim2.new(0.5,0,0,5),
			Parent = tabsholder
		}
	)
	--
	local tabs = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,-6,1,-27),
			Position = UDim2.new(0.5,0,1,-3),
			Parent = tabsholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Horizontal",
			Padding = UDim.new(0,2),
			Parent = buttons
		}
	)
	--
	local tabs_outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = tabs
		}
	)
	-- // section tbl
	multisection = {
		["library"] = self.library,
		["sectionholder"] = sectionholder,
		["color"] = color,
		["tabsholder"] = tabsholder,
		["mssections"] = {},
		["buttons"] = buttons,
		["tabs"] = tabs,
		["tabs_outline"] = tabs_outline,
		["pointers"] = {}
	}
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = multisection.pointers
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(multisection,multisections)
	return multisection
end
--
function multisections:section(props)
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	-- // variables
	local mssection = {}
	-- // main
	local tabbutton = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,60,0,20),
			Parent = self.buttons
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = tabbutton
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = tabbutton
		}
	)
	--
	local r_line = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 0,
			Size = UDim2.new(0,1,0,1),
			Position = UDim2.new(1,0,1,1),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local l_line = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderSizePixel = 0,
			Size = UDim2.new(0,1,0,1),
			Position = UDim2.new(0,0,1,1),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local line = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,0,2),
			Position = UDim2.new(0,0,1,0),
			ZIndex = 2,
			Parent = outline
		}
	)
	--
	local label = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Parent = outline
		}
	)
	--
	local content = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-6,1,-27),
			Position = UDim2.new(0.5,0,1,-3),
			Parent = self.tabs_outline
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,5),
			Parent = content
		}
	)
	-- // mssection tbl
	mssection = {
		["library"] = self.library,
		["outline"] = outline,
		["r_line"] = r_line,
		["l_line"] = l_line,
		["line"] = line,
		["content"] = content,
		["open"] = false,
		["pointers"] = {}
	}
	--
	table.insert(self.mssections,mssection)
	--
	button.MouseButton1Down:Connect(function()
		if mssection.open == false then
			for i,v in pairs(self.mssections) do
				if v ~= mssection then
					if v.open then
						v.page.Visible = false
						v.open = false
						v.outline.BackgroundColor3 = Color3.fromRGB(31, 31 ,31)
						v.line.Size = UDim2.new(1,0,0,2)
						v.line.BackgroundColor3 = Color3.fromRGB(31, 31 ,31)
					end
				end
			end
			--
			mssection.library:closewindows()
			--
			mssection.content.Visible = true
			mssection.open = true
			mssection.outline.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
			mssection.line.Size = UDim2.new(1,0,0,3)
			mssection.line.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = mssection.pointers
		end
	end
	--
	self.library.labels[#self.library.labels+1] = label
	-- // metatable indexing + return
	setmetatable(mssection,mssections)
	return mssection
end
--
function sections:toggle(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or props.toggle or props.Toggle or props.toggled or props.Toggled or false
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	-- // variables
	local toggle = {}
	-- // main
	local toggleholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,15,0,15),
			Parent = toggleholder
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = toggleholder
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-20,1,0),
			Position = UDim2.new(0,20,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = toggleholder
		}
	)
	--
	local col = Color3.fromRGB(20, 20, 20)
	if def then
		col = self.library.theme.accent
	end
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = col,
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)
	if def then
		table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	end
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	-- // toggle tbl
	toggle = {
		["library"] = self.library,
		["toggleholder"] = toggleholder,
		["title"] = title,
		["color"] = color,
		["callback"] = callback,
		["current"] = def
	}
	--
	button.MouseButton1Down:Connect(function()
		if toggle.current then
			toggle.callback(false)
			toggle.color.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			local find = table.find(self.library.themeitems["accent"]["BackgroundColor3"],toggle.color)
			if find then
				table.remove(self.library.themeitems["accent"]["BackgroundColor3"],find)
			end
			toggle.current = false
		else
			toggle.callback(true)
			toggle.color.BackgroundColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["BackgroundColor3"],toggle.color)
			toggle.current = true
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = toggle
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(toggle, toggles)
	return toggle
end
--
function toggles:set(bool)
	if bool ~= nil then
		local toggle = self
		toggle.callback(bool)
		toggle.current = bool
		if bool then
			toggle.color.BackgroundColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["BackgroundColor3"],toggle.color)
		else
			toggle.color.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			local find = table.find(self.library.themeitems["accent"]["BackgroundColor3"],toggle.color)
			if find then
				table.remove(self.library.themeitems["accent"]["BackgroundColor3"],find)
			end
		end
	end
end
--
function sections:button(props)
	-- // properties
	local name = props.name or props.Name or "new button"
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	-- // variables
	local button = {}
	-- // main
	local buttonholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,20),
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = buttonholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Parent = outline2
		}
	)
	--
	local gradient = utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local buttonpress = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Font = self.library.font,
			Parent = buttonholder
		}
	)
	--
	buttonpress.MouseButton1Down:Connect(function()
		callback()
		outline.BorderColor3 = self.library.theme.accent
		table.insert(self.library.themeitems["accent"]["BorderColor3"],outline)
		wait(0.05)
		outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
		local find = table.find(self.library.themeitems["accent"]["BorderColor3"],outline)
		if find then
			table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
		end
	end)
	-- // button tbl
	button = {
		["library"] = self.library
	}
	--
	self.library.labels[#self.library.labels+1] = buttonpress
	-- // metatable indexing + return
	setmetatable(button, buttons)
	return button
end
--
function sections:slider(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or 0
	local max = props.max or props.Max or props.maximum or props.Maximum or 100
	local min = props.min or props.Min or props.minimum or props.Minimum or 0
	local rounding = props.rounding or props.Rounding or props.round or props.Round or props.decimals or props.Decimals or false
	local ticking = props.tick or props.Tick or props.ticking or props.Ticking or false
	local measurement = props.measurement or props.Measurement or props.digit or props.Digit or props.calc or props.Calc or ""
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	def = math.clamp(def,min,max)
	-- // variables
	local slider = {}
	-- // main
	local sliderholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,25),
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,12),
			Position = UDim2.new(0,0,0,15),
			Parent = sliderholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)	
	--
	local value = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,2),
			Position = UDim2.new(0,0,0.5,0),
			Font = self.library.font,
			Text = def..measurement.."/"..max..measurement,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			ZIndex = 3,
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local slide = utility.new(
		"Frame",
		{
			BackgroundColor3 = self.library.theme.accent,
			BorderSizePixel = 0,
			Size = UDim2.new((1 / color.AbsoluteSize.X) * (color.AbsoluteSize.X / (max - min) * (def - min)),0,1,0),
			ZIndex = 2,
			Parent = outline
		}
	)
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],slide)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = slide
		}
	)
	--
	local sliderbutton = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = sliderholder
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = sliderholder
		}
	)
	-- // slider tbl
	slider = {
		["library"] = self.library,
		["outline"] = outline,
		["sliderbutton"] = sliderbutton,
		["title"] = title,
		["value"] = value,
		["slide"] = slide,
		["color"] = color,
		["max"] = max,
		["min"] = min,
		["current"] = def,
		["measurement"] = measurement,
		["tick"] = ticking,
		["rounding"] = rounding,
		["callback"] = callback
	}
	--
	local function slide()
		local size = math.clamp(plr:GetMouse().X - slider.color.AbsolutePosition.X ,0 ,slider.color.AbsoluteSize.X)
		local result = (slider.max - slider.min) / slider.color.AbsoluteSize.X * size + slider.min
		if slider.rounding then
			local newres = math.floor(result)
			value.Text = newres..slider.measurement.."/"..slider.max..slider.measurement
			slider.current = newres
			slider.callback(newres)
			if slider.tick then
				slider.slide:TweenSize(UDim2.new((1 / slider.color.AbsoluteSize.X) * (slider.color.AbsoluteSize.X / (slider.max - slider.min) * (newres - slider.min)) ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
			else
				slider.slide:TweenSize(UDim2.new((1 / slider.color.AbsoluteSize.X) * size ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
			end
		else
			local newres = utility.round(result ,2)
			value.Text = newres..slider.measurement.."/"..slider.max..slider.measurement
			slider.current = newres
			slider.callback(newres)
			if slider.tick then
				slider.slide:TweenSize(UDim2.new((1 / slider.color.AbsoluteSize.X) * (slider.color.AbsoluteSize.X / (slider.max - slider.min) * (newres - slider.min)) ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
			else
				slider.slide:TweenSize(UDim2.new((1 / slider.color.AbsoluteSize.X) * size ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
			end
		end
	end
	--
	sliderbutton.MouseButton1Down:Connect(function()
		slider.holding = true
		slide()
		table.insert(self.library.themeitems["accent"]["BorderColor3"],outline)
		outline.BorderColor3 = self.library.theme.accent
	end)
	--
	uis.InputChanged:Connect(function()
		if slider.holding then
			slide()
		end
	end)
	--
	uis.InputEnded:Connect(function(Input)
		if Input.UserInputType.Name == 'MouseButton1' and slider.holding then
			slider.holding = false
			outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
			local find = table.find(self.library.themeitems["accent"]["BorderColor3"],outline)
			if find then
				table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
			end
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = slider
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	self.library.labels[#self.library.labels+1] = value
	-- // metatable indexing + return
	setmetatable(slider, sliders)
	return slider
end
--
function sliders:set(value)
	local size = math.clamp((self.color.AbsoluteSize.X / (self.max - self.min) * (value - self.min)) ,0 ,self.color.AbsoluteSize.X)
	local result = value
	if self.rounding then
		local newres = math.floor(result)
		self.value.Text = newres..self.measurement.."/"..self.max..self.measurement
		self.current = newres
		self.callback(newres)
		if self.tick then
			self.slide:TweenSize(UDim2.new((1 / self.color.AbsoluteSize.X) * (self.color.AbsoluteSize.X / (self.max - self.min) * (newres - self.min)) ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
		else
			self.slide:TweenSize(UDim2.new((1 / self.color.AbsoluteSize.X) * size ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
		end
	else
		local newres = utility.round(result ,2)
		self.value.Text = newres..self.measurement.."/"..self.max..self.measurement
		self.current = newres
		self.callback(newres)
		if self.tick then
			self.slide:TweenSize(UDim2.new((1 / self.color.AbsoluteSize.X) * (self.color.AbsoluteSize.X / (self.max - self.min) * (newres - self.min)) ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
		else
			self.slide:TweenSize(UDim2.new((1 / self.color.AbsoluteSize.X) * size ,0 ,1 ,0) ,Enum.EasingDirection.Out ,Enum.EasingStyle.Quad ,0.15 ,true)
		end
	end
end
--
function library:closewindows(ignore)
	local window = self
	--
	for i,v in pairs(window.dropdowns) do
		if v ~= ignore then
			if v.open then
				v.optionsholder.Visible = false
				v.indicator.Text = "-"
				v.open = false
			end
		end
	end
	--
	for i,v in pairs(window.multiboxes) do
		if v ~= ignore then
			if v.open then
				v.optionsholder.Visible = false
				v.indicator.Text = "-"
				v.open = false
			end
		end
	end
	--
	for i,v in pairs(window.buttonboxs) do
		if v ~= ignore then
			if v.open then
				v.optionsholder.Visible = false
				v.indicator.Text = "-"
				v.open = false
			end
		end
	end
	--
	for i,v in pairs(window.colorpickers) do
		if v ~= ignore then
			if v.open then
				v.cpholder.Visible = false
				v.open = false
			end
		end
	end
end
--
function sections:dropdown(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or ""
	local max = props.max or props.Max or props.maximum or props.Maximum or 4
	local options = props.options or props.Options or props.Settings or props.settings or {}
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	-- // variables
	local dropdown = {}
	-- // main
	local dropdownholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,35),
			ZIndex = 2,
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,15),
			Parent = dropdownholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local value = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-20,1,0),
			Position = UDim2.new(0,5,0,0),
			Font = self.library.font,
			Text = def,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			ClipsDescendants = true,
			Parent = outline
		}
	)
	--
	local indicator = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,1,0),
			Position = UDim2.new(0.5,0,0,0),
			Font = self.library.font,
			Text = "+",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Right",
			ClipsDescendants = true,
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = dropdownholder
		}
	)
	--
	local dropdownbutton = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = dropdownholder
		}
	)
	--
	local optionsholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,34),
			Visible = false,
			Parent = dropdownholder
		}
	)
	--
	local size = #options
	--
	size = math.clamp(size,1,max)
	--
	local optionsoutline = utility.new(
		"ScrollingFrame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,size,2),
			Position = UDim2.new(0,0,0,0),
			ClipsDescendants = true,
			CanvasSize = UDim2.new(0,0,0,100*#options),
			ScrollBarImageTransparency = 0.25,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 5,
			VerticalScrollBarInset = "ScrollBar",
			VerticalScrollBarPosition = "Right",
			ZIndex = 5,
			Parent = optionsholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Parent = optionsoutline
		}
	)
	-- // dropdown tbl
	dropdown = {
		["library"] = self.library,
		["optionsholder"] = optionsholder,
		["indicator"] = indicator,
		["options"] = options,
		["title"] = title,
		["value"] = value,
		["open"] = false,
		["titles"] = {},
		["current"] = def,
		["callback"] = callback
	}
	--
	table.insert(dropdown.library.dropdowns,dropdown)
	--
	for i,v in pairs(options) do
		local ddoptionbutton = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,0,18),
				Text = "",
				ZIndex = 6,
				Parent = optionsoutline
			}
		)
		--
		local ddoptiontitle = utility.new(
			"TextLabel",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,-10,1,0),
				Position = UDim2.new(0.5,0,0,0),
				Font = self.library.font,
				Text = v,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				TextXAlignment = "Left",
				ClipsDescendants = true,
				ZIndex = 6,
				Parent = ddoptionbutton
			}
		)
		--
		self.library.labels[#self.library.labels+1] = ddoptiontitle
		--
		table.insert(dropdown.titles,ddoptiontitle)
		--
		if v == dropdown.current then ddoptiontitle.TextColor3 = self.library.theme.accent end
		--
		ddoptionbutton.MouseButton1Down:Connect(function()
			optionsholder.Visible = false
			dropdown.open = false
			indicator.Text = "+"
			for z,x in pairs(dropdown.titles) do
				if x.TextColor3 == self.library.theme.accent then
					x.TextColor3 = Color3.fromRGB(255,255,255)
				end
			end
			dropdown.current = v
			dropdown.value.Text = v
			ddoptiontitle.TextColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["TextColor3"],ddoptiontitle)
			dropdown.callback(v)
		end)
	end
	--
	dropdownbutton.MouseButton1Down:Connect(function()
		dropdown.library:closewindows(dropdown)
		for i,v in pairs(dropdown.titles) do
			if v.Text == dropdown.current then
				v.TextColor3 = dropdown.library.theme.accent
			else
				v.TextColor3 = Color3.fromRGB(255,255,255)
			end
		end
		optionsholder.Visible = not dropdown.open
		dropdown.open = not dropdown.open
		if dropdown.open then
			indicator.Text = "-"
		else
			indicator.Text = "+"
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = dropdown
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	self.library.labels[#self.library.labels+1] = value
	-- // metatable indexing + return
	setmetatable(dropdown, dropdowns)
	return dropdown
end
--
function sections:buttonbox(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or ""
	local max = props.max or props.Max or props.maximum or props.Maximum or 4
	local options = props.options or props.Options or props.Settings or props.settings or {}
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	-- // variables
	local buttonbox = {}
	-- // main
	local buttonboxholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,35),
			ZIndex = 2,
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,15),
			Parent = buttonboxholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local indicator = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,1,0),
			Position = UDim2.new(0.5,0,0,0),
			Font = self.library.font,
			Text = "+",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Right",
			ClipsDescendants = true,
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = buttonboxholder
		}
	)
	--
	local buttonboxbutton = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = buttonboxholder
		}
	)
	--
	local optionsholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,34),
			Visible = false,
			Parent = buttonboxholder
		}
	)
	--
	local size = #options
	--
	size = math.clamp(size,1,max)
	--
	local optionsoutline = utility.new(
		"ScrollingFrame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,size,2),
			Position = UDim2.new(0,0,0,0),
			ClipsDescendants = true,
			CanvasSize = UDim2.new(0,0,0,100*#options),
			ScrollBarImageTransparency = 0.25,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 5,
			VerticalScrollBarInset = "ScrollBar",
			VerticalScrollBarPosition = "Right",
			ZIndex = 5,
			Parent = optionsholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Parent = optionsoutline
		}
	)
	-- // buttonbox tbl
	buttonbox = {
		["library"] = self.library,
		["optionsholder"] = optionsholder,
		["indicator"] = indicator,
		["options"] = options,
		["title"] = title,
		["open"] = false,
		["titles"] = {},
		["current"] = def,
		["callback"] = callback
	}
	--
	table.insert(buttonbox.library.buttonboxs,buttonbox)
	--
	for i,v in pairs(options) do
		local bboptionbutton = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,0,18),
				Text = "",
				ZIndex = 6,
				Parent = optionsoutline
			}
		)
		--
		local bboptiontitle = utility.new(
			"TextLabel",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,-10,1,0),
				Position = UDim2.new(0.5,0,0,0),
				Font = self.library.font,
				Text = v,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				TextXAlignment = "Left",
				ClipsDescendants = true,
				ZIndex = 6,
				Parent = bboptionbutton
			}
		)
		--
		self.library.labels[#self.library.labels+1] = bboptiontitle
		--
		table.insert(buttonbox.titles,bboptiontitle)
		--
		bboptionbutton.MouseButton1Down:Connect(function()
			optionsholder.Visible = false
			buttonbox.open = false
			indicator.Text = "+"
			buttonbox.current = v
			buttonbox.callback(v)
		end)
	end
	--
	buttonboxbutton.MouseButton1Down:Connect(function()
		buttonbox.library:closewindows(buttonbox)
		optionsholder.Visible = not buttonbox.open
		buttonbox.open = not buttonbox.open
		if buttonbox.open then
			indicator.Text = "-"
		else
			indicator.Text = "+"
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = buttonbox
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(buttonbox, buttonboxs)
	return buttonbox
end
--
function dropdowns:set(value)
	if value ~= nil then
		local dropdown = self
		if table.find(dropdown.options,value) then
			self.current = tostring(value)
			self.value.Text = tostring(value)
			self.callback(tostring(value))
			for z,x in pairs(dropdown.titles) do
				if x.Text == value then
					x.TextColor3 = dropdown.library.theme.accent
				else
					x.TextColor3 = Color3.fromRGB(255,255,255)
				end
			end
		end
	end
end
--
function sections:multibox(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or {}
	local max = props.max or props.Max or props.maximum or props.Maximum or 4
	local options = props.options or props.Options or props.Settings or props.settings or {}
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	local defstr = ""
	if #def > 1 then
		for i,v in pairs(def) do
			if i == #def then
				defstr = defstr..v
			else
				defstr = defstr..v..", "
			end
		end
	else
		for i,v in pairs(def) do
			defstr = defstr..v
		end
	end
	-- // variables
	local multibox = {}
	-- // main
	local multiboxholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,35),
			ZIndex = 2,
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,15),
			Parent = multiboxholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local value = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-20,1,0),
			Position = UDim2.new(0,5,0,0),
			Font = self.library.font,
			Text = defstr,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			ClipsDescendants = true,
			Parent = outline
		}
	)
	--
	local indicator = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,1,0),
			Position = UDim2.new(0.5,0,0,0),
			Font = self.library.font,
			Text = "+",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Right",
			ClipsDescendants = true,
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = multiboxholder
		}
	)
	--
	local dropdownbutton = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			Parent = multiboxholder
		}
	)
	--
	local optionsholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,34),
			Visible = false,
			Parent = multiboxholder
		}
	)
	--
	local size = #options
	--
	size = math.clamp(size,1,max)
	--
	local optionsoutline = utility.new(
		"ScrollingFrame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,size,2),
			Position = UDim2.new(0,0,0,0),
			ClipsDescendants = true,
			CanvasSize = UDim2.new(0,0,0,100*#options),
			ScrollBarImageTransparency = 0.25,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 5,
			VerticalScrollBarInset = "ScrollBar",
			VerticalScrollBarPosition = "Right",
			ZIndex = 5,
			Parent = optionsholder
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Parent = optionsoutline
		}
	)
	-- // dropdown tbl
	multibox = {
		["library"] = self.library,
		["indicator"] = indicator,
		["optionsholder"] = optionsholder,
		["options"] = options,
		["value"] = value,
		["open"] = false,
		["titles"] = {},
		["current"] = def,
		["callback"] = callback
	}
	--
	table.insert(multibox.library.multiboxes,multibox)
	--
	for i,v in pairs(options) do
		local ddoptionbutton = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,0,18),
				Text = "",
				ZIndex = 6,
				Parent = optionsoutline
			}
		)
		--
		local ddoptiontitle = utility.new(
			"TextLabel",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,-10,1,0),
				Position = UDim2.new(0.5,0,0,0),
				Font = self.library.font,
				Text = v,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				TextXAlignment = "Left",
				ClipsDescendants = true,
				ZIndex = 6,
				Parent = ddoptionbutton
			}
		)
		--
		self.library.labels[#self.library.labels+1] = ddoptiontitle
		--
		table.insert(multibox.titles,ddoptiontitle)
		--
		for c,b in pairs(def) do if v == b then ddoptiontitle.TextColor3 = self.library.theme.accent end end
		--
		ddoptionbutton.MouseButton1Down:Connect(function()
			local find = table.find(multibox.current,v)
			if find == nil then
				table.insert(multibox.current,v)
				local str = ""
				if #multibox.current > 1 then
					for i,v in pairs(multibox.current) do
						if i == #multibox.current then
							str = str..v
						else
							str = str..v..", "
						end
					end
				else
					for i,v in pairs(multibox.current) do
						str = str..v
					end
				end
				value.Text = str
				ddoptiontitle.TextColor3 = self.library.theme.accent
				table.insert(self.library.themeitems["accent"]["TextColor3"],ddoptiontitle)
				multibox.callback(multibox.current)
			else
				table.remove(multibox.current,find)
				local str = ""
				if #multibox.current > 1 then
					for i,v in pairs(multibox.current) do
						if i == #multibox.current then
							str = str..v
						else
							str = str..v..", "
						end
					end
				else
					for i,v in pairs(multibox.current) do
						str = str..v
					end
				end
				value.Text = str
				ddoptiontitle.TextColor3 = Color3.fromRGB(255,255,255)
				multibox.callback(multibox.current)
			end
		end)
	end
	--
	dropdownbutton.MouseButton1Down:Connect(function()
		multibox.library:closewindows(multibox)
		for i,v in pairs(multibox.titles) do
			if v.TextColor3 ~= Color3.fromRGB(255,255,255) then
				v.TextColor3 = self.library.theme.accent
			end
		end
		optionsholder.Visible = not multibox.open
		multibox.open = not multibox.open
		if multibox.open then
			indicator.Text = "-"
		else
			indicator.Text = "+"
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = multibox
		end
	end
	--
	self.library.labels[#self.library.labels+1] = value
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(multibox, multiboxs)
	return multibox
end
--
function buttonboxs:set(value)
	if value ~= nil then
		local dropdown = self
		if table.find(dropdown.options,value) then
			self.current = tostring(value)
			self.callback(tostring(value))
		end
	end
end
--
function multiboxs:set(tbl)
	if tbl then
		local multibox = self
		if typeof(tbl) == "table" then
			multibox.current = {}
			for i,v in pairs(tbl) do
				if table.find(multibox.options,v) then
					table.insert(multibox.current,v)
				end
			end
			--
			for i,v in pairs(multibox.titles) do
				if v.TextColor3 == multibox.library.theme.accent then
					v.TextColor3 = Color3.fromRGB(255,255,255)
				end
				if table.find(tbl,v.Text) then
					v.TextColor3 = multibox.library.theme.accent
				end
			end
			--
			local str = ""
			if #multibox.current > 1 then
				for i,v in pairs(multibox.current) do
					if i == #multibox.current then
						str = str..v
					else
						str = str..v..", "
					end
				end
			else
				for i,v in pairs(multibox.current) do
					str = str..v
				end
			end
			--
			multibox.value.Text = str
		end
	end
end
--
function sections:textbox(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or ""
	local placeholder = props.placeholder or props.Placeholder or props.placeHolder or props.PlaceHolder or props.placeholdertext or props.PlaceHolderText or props.PlaceHoldertext or props.placeHolderText or props.placeHoldertext or props.Placeholdertext or props.PlaceholderText or props.placeholderText or ""
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	-- // variables
	local textbox = {}
	-- // main
	local textboxholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,35),
			ZIndex = 2,
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,20),
			Position = UDim2.new(0,0,0,15),
			Parent = textboxholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Parent = outline2
		}
	)
	--
	local gradient = utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Font = self.library.font,
			Parent = textboxholder
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = textboxholder
		}
	)
	--
	local tbox = utility.new(
		"TextBox",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,0,20),
			Position = UDim2.new(0.5,0,0,15),
			PlaceholderText = placeholder,
			Text = def,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextTruncate = "AtEnd",
			Font = self.library.font,
			Parent = textboxholder
		}
	)
	-- // textbox tbl
	textbox = {
		["library"] = self.library,
		["tbox"] = tbox,
		["current"] = def,
		["callback"] = callback
	}
	--
	button.MouseButton1Down:Connect(function()
		tbox:CaptureFocus()
	end)
	--
	tbox.Focused:Connect(function()
		outline.BorderColor3 = self.library.theme.accent
		table.insert(self.library.themeitems["accent"]["BorderColor3"],outline)
	end)
	--
	tbox.FocusLost:Connect(function(enterPressed)
		textbox.current = tbox.Text
		callback(tbox.Text)
		outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
		local find = table.find(self.library.themeitems["accent"]["BorderColor3"],outline)
		if find then
			table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = textbox
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	self.library.labels[#self.library.labels+1] = tbox
	-- // metatable indexing + return
	setmetatable(textbox, textboxs)
	return textbox
end
--
function textboxs:set(value)
	self.tbox.Text = value
	self.current = value
	self.callback(value)
end
--
function sections:keybind(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local def = props.def or props.Def or props.default or props.Default or nil
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	local allowed = props.allowed or props.Allowed or 1
	--
	local default = ".."
	local typeis = nil
	--
	if typeof(def) == "EnumItem" then
		if def == Enum.UserInputType.MouseButton1 then
			if allowed == 1 then
				default = "MB1"
				typeis = "UserInputType"
			end
		elseif def == Enum.UserInputType.MouseButton2 then
			if allowed == 1 then
				default = "MB2"
				typeis = "UserInputType"
			end
		elseif def == Enum.UserInputType.MouseButton3 then
			if allowed == 1 then
				default = "MB3"
				typeis = "UserInputType"
			end
		else
			local capd = utility.capatalize(def.Name)
			if #capd > 1 then
				default = capd
			else
				default = def.Name
			end
			typeis = "KeyCode"
		end
	end
	-- // variables
	local keybind = {}
	-- // main
	local keybindholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,17),
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,40,1,0),
			Position = UDim2.new(1,0,0,0),
			Parent = keybindholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline
		}
	)
	--
	local value = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = default,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Center",
			Parent = outline
		}
	)
	--
	outline.Size = UDim2.new(0,value.TextBounds.X+20,1,0)
	--
	local color = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(30, 30, 30),
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = color
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Font = self.library.font,
			Parent = keybindholder
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = keybindholder
		}
	)
	-- // keybind tbl
	keybind = {
		["library"] = self.library,
		["down"] = false,
		["outline"] = outline,
		["value"] = value,
		["allowed"] = allowed,
		["current"] = {typeis,utility.splitenum(def)},
		["pressed"] = false,
		["callback"] = callback
	}
	--
	button.MouseButton1Down:Connect(function()
		if keybind.down == false then
			outline.BorderColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["BorderColor3"],outline)
			wait()
			keybind.down = true
		end
	end)
	--
	button.MouseButton2Down:Connect(function()
		keybind.down = false
		keybind.current = {nil,nil}
		outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
		local find = table.find(self.library.themeitems["accent"]["BorderColor3"],outline)
		if find then
			table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
		end
		value.Text = ".."
		outline.Size = UDim2.new(0,value.TextBounds.X+20,1,0)
	end)
	--
	local function turn(typeis,current)
		outline.Size = UDim2.new(0,value.TextBounds.X+20,1,0)
		keybind.down = false
		keybind.current = {typeis,utility.splitenum(current)}
		outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
		local find = table.find(self.library.themeitems["accent"]["BorderColor3"],outline)
		if find then
			table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
		end
	end
	--
	uis.InputBegan:Connect(function(Input)
		if keybind.down then
			if Input.UserInputType == Enum.UserInputType.Keyboard then
				local capd = utility.capatalize(Input.KeyCode.Name)
				if #capd > 1 then
					value.Text = capd
				else
					value.Text = Input.KeyCode.Name
				end
				turn("KeyCode",Input.KeyCode)
				callback(Input.KeyCode)
			end
			if allowed == 1 then
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					value.Text = "MB1"
					turn("UserInputType",Input)
					callback(Input)
				elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
					value.Text = "MB2"
					turn("UserInputType",Input)
					callback(Input)
				elseif Input.UserInputType == Enum.UserInputType.MouseButton3 then
					value.Text = "MB3"
					turn("UserInputType",Input)
					callback(Input)
				end
			end
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = keybind
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	self.library.labels[#self.library.labels+1] = value
	-- // metatable indexing + return
	setmetatable(keybind, keybinds)
	return keybind
end
--
function keybinds:set(key)
	if key then
		if typeof(key) == "EnumItem" or typeof(key) == "table" then
			if typeof(key) == "table" then
				if key[1] and key[2] then
					key = Enum[key[1]][key[2]]
				else
					return
				end
			end
			local keybind = self
			local typeis = ""
			--
			local default = ".."
			--
			if key == Enum.UserInputType.MouseButton1 then
				if keybind.allowed == 1 then
					default = "MB1"
					typeis = "UserInputType"
				end
			elseif key == Enum.UserInputType.MouseButton2 then
				if keybind.allowed == 1 then
					default = "MB2"
					typeis = "UserInputType"
				end
			elseif key == Enum.UserInputType.MouseButton3 then
				if keybind.allowed == 1 then
					default = "MB3"
					typeis = "UserInputType"
				end
			else
				local capd = utility.capatalize(key.Name)
				if #capd > 1 then
					default = capd
				else
					default = key.Name
				end
				typeis = "KeyCode"
			end
			--
			keybind.value.Text = default
			keybind.current = {typeis,utility.splitenum(key)}
			keybind.callback(keybind.current)
			keybind.outline.Size = UDim2.new(0,keybind.value.TextBounds.X+20,1,0)
			--
			if keybind.down then
				keybind.down = false
				keybind.outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
				local find = table.find(self.library.themeitems["accent"]["BorderColor3"],keybind.outline)
				if find then
					table.remove(self.library.themeitems["accent"]["BorderColor3"],find)
				end
			end
		end
	end
end
--
function sections:colorpicker(props)
	-- // properties
	local name = props.name or props.Name or "new colorpicker"
	local cpname = props.cpname or props.Cpname or props.CPname or props.CPName or props.cPname or props.cpName or props.colorpickername or nil
	local def = props.def or props.Def or props.default or props.Default or Color3.fromRGB(255,255,255)
	local callback = props.callback or props.callBack or props.CallBack or props.Callback or function()end
	--
	local h,s,v = def:ToHSV()
	-- // variables
	local colorpicker = {}
	-- // main
	local colorpickerholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			ZIndex = 2,
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,30,1,0),
			Position = UDim2.new(1,0,0,0),
			Parent = colorpickerholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)
	--
	local cpcolor = utility.new(
		"Frame",
		{
			BackgroundColor3 = def,
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Parent = outline2
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
			Rotation = 90,
			Parent = cpcolor
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = colorpickerholder
		}
	)
	--
	local button = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Font = self.library.font,
			Parent = colorpickerholder
		}
	)
	--
	local cpholder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,230),
			Position = UDim2.new(0,0,1,5),
			Visible = false,
			ZIndex = 5,
			Parent = colorpickerholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			ZIndex = 5,
			Parent = cpholder
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = self.library.theme.accent,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-2,0,1),
			Position = UDim2.new(0.5,0,0,0),
			ZIndex = 5,
			Parent = outline2
		}
	)
	--
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	--
	local cptitle = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-10,0,20),
			Position = UDim2.new(0.5,0,0,0),
			Font = self.library.font,
			Text = cpname or name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			ZIndex = 5,
			Parent = outline2
		}
	)
	--
	local cpholder2 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0.875,0,0,150),
			Position = UDim2.new(0,5,0,20),
			ZIndex = 5,
			Parent = outline2
		}
	)
	--
	local outline3 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromHSV(h,1,1),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			ZIndex = 5,
			Parent = cpholder2
		}
	)
	--
	local cpimage = utility.new(
		"ImageButton",
		{
			AutoButtonColor = false,
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			ZIndex = 5,
			Image = "rbxassetid://7074305282",
			Parent = outline3
		}
	)
	--
	local cpcursor = utility.new(
		"ImageLabel",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(0,6,0,6),
			Position = UDim2.new(s,0,1-v,0),
			ZIndex = 5,
			Image = "rbxassetid://7074391319",
			Parent = cpimage
		}
	)
	--
	local huepicker = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(1,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0.05,0,0,150),
			Position = UDim2.new(1,-5,0,20),
			ZIndex = 5,
			Parent = outline2
		}
	)
	--
	local outline4 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			ZIndex = 5,
			Parent = huepicker
		}
	)
	--
	local huebutton = utility.new(
		"TextButton",
		{
			AnchorPoint = Vector2.new(0,0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Text = "",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			Font = self.library.font,
			ZIndex = 5,
			Parent = huepicker
		}
	)
	--
	utility.new(
		"UIGradient",
		{
			Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 153, 0)), ColorSequenceKeypoint.new(0.20, Color3.fromRGB(209, 255, 0)), ColorSequenceKeypoint.new(0.30, Color3.fromRGB(55, 255, 0)), ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 102)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.60, Color3.fromRGB(0, 102, 255)), ColorSequenceKeypoint.new(0.70, Color3.fromRGB(51, 0, 255)), ColorSequenceKeypoint.new(0.80, Color3.fromRGB(204, 0, 255)), ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 0, 153)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},
			Rotation = 90,
			Parent = outline4
		}
	)
	--
	local huecursor = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(0,12,0,6),
			Position = UDim2.new(0.5,0,h,0),
			ZIndex = 5,
			Parent = outline4
		}
	)
	--
	local huecursor_inline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromHSV(h,1,1),
			BorderColor3 = Color3.fromRGB(255, 255, 255),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			ZIndex = 5,
			Parent = huecursor
		}
	)
	--
	local function textbox(parent,size,position)
		local textbox_holder = utility.new(
			"Frame",
			{
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Position = position,
				Size = size,
				ZIndex = 5,
				Parent = parent
			}
		)
		--
		local outline5 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(12, 12, 12),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		local outline6 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(56, 56, 56),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = outline5
			}
		)
		--
		local color2 = utility.new(
			"Frame",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundColor3 = Color3.fromRGB(30, 30, 30),
				BorderSizePixel = 0,
				Size = UDim2.new(1,0,0,0),
				Position = UDim2.new(0,0,0,0),
				ZIndex = 5,
				Parent = outline6
			}
		)
		--
		utility.new(
			"UIGradient",
			{
				Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
				Rotation = 90,
				Parent = color2
			}
		)
		--
		local tbox = utility.new(
			"TextBox",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0.5,0,0,0),
				PlaceholderColor3 = Color3.fromRGB(255,255,255),
				PlaceholderText = "",
				Text = "",
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				Font = self.library.font,
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		local tbox_button = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0,0,0,0),
				Text = "",
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				Font = self.library.font,
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		tbox_button.MouseButton1Down:Connect(function()
			tbox:CaptureFocus()
		end)
		--
		return {textbox_holder,tbox,outline5}
	end
	--
	local red = textbox(outline2,UDim2.new(0,62,0,20),UDim2.new(0,5,0,175))
	local green = textbox(outline2,UDim2.new(0,62,0,20),UDim2.new(0,5,0,175))
	green[1].AnchorPoint = Vector2.new(0.5,0)
	green[1].Position = UDim2.new(0.5,0,0,175)
	local blue = textbox(outline2,UDim2.new(0,62,0,20),UDim2.new(0,5,0,175))
	blue[1].AnchorPoint = Vector2.new(1,0)
	blue[1].Position = UDim2.new(1,-5,0,175)
	local hex = textbox(outline2,UDim2.new(1,-10,0,20),UDim2.new(0,5,0,200))
	hex[2].Size = UDim2.new(1,-12,1,0)
	hex[2].TextXAlignment = "Left"
	-- // colorpicker tbl
	colorpicker = {
		["library"] = self.library,
		["cpholder"] = cpholder,
		["cpcolor"] = cpcolor,
		["huecursor"] = huecursor,
		["outline3"] = outline3,
		["huecursor_inline"] = huecursor_inline,
		["cpcursor"] = cpcursor,
		["current"] = def,
		["open"] = false,
		["cp"] = false,
		["hue"] = false,
		["hsv"] = {h,s,v},
		["red"] = red[2],
		["green"] = green[2],
		["blue"] = blue[2],
		["hex"] = hex[2],
		["callback"] = callback
	}
	--
	table.insert(self.library.colorpickers,colorpicker)
	--
	local function updateboxes()
		colorpicker.red.PlaceholderText = "R: "..tostring(math.floor(colorpicker.current.R*255))
		colorpicker.green.PlaceholderText = "G: "..tostring(math.floor(colorpicker.current.G*255))
		colorpicker.blue.PlaceholderText = "B: "..tostring(math.floor(colorpicker.current.B*255))
		colorpicker.hex.PlaceholderText = "Hex: "..utility.to_hex(colorpicker.current)
	end
	--
	updateboxes()
	--
	local function movehue()
		local posy = math.clamp(plr:GetMouse().Y-outline3.AbsolutePosition.Y,0,outline3.AbsoluteSize.Y)
		local resy = (1/outline3.AbsoluteSize.Y)*posy
		outline3.BackgroundColor3 = Color3.fromHSV(resy,1,1)
		huecursor_inline.BackgroundColor3 = Color3.fromHSV(resy,1,1)
		colorpicker.hsv[1] = resy
		colorpicker.current = Color3.fromHSV(colorpicker.hsv[1],colorpicker.hsv[2],colorpicker.hsv[3])
		cpcolor.BackgroundColor3 = colorpicker.current
		updateboxes()
		colorpicker.callback(colorpicker.current)
		huecursor:TweenPosition(UDim2.new(0.5,0,resy,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.15,true)
	end
	--
	local function movecp()
		local posx,posy = math.clamp(plr:GetMouse().X-outline3.AbsolutePosition.X,0,outline3.AbsoluteSize.X),math.clamp(plr:GetMouse().Y-outline3.AbsolutePosition.Y,0,outline3.AbsoluteSize.Y)
		local resx,resy = (1/outline3.AbsoluteSize.X)*posx,(1/outline3.AbsoluteSize.Y)*posy
		colorpicker.hsv[2] = resx
		colorpicker.hsv[3] = 1-resy
		colorpicker.current = Color3.fromHSV(colorpicker.hsv[1],colorpicker.hsv[2],colorpicker.hsv[3])
		cpcolor.BackgroundColor3 = colorpicker.current
		updateboxes()
		colorpicker.callback(colorpicker.current)
		cpcursor:TweenPosition(UDim2.new(resx,0,resy,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.15,true)
	end
	--
	button.MouseButton1Down:Connect(function()
		self.library:closewindows(colorpicker)
		cpholder.Visible = not colorpicker.open
		colorpicker.open = not colorpicker.open
	end)
	--
	huebutton.MouseButton1Down:Connect(function()
		colorpicker.hue = true
		movehue()
	end)
	--
	cpimage.MouseButton1Down:Connect(function()
		colorpicker.cp = true
		movecp()
	end)
	--
	uis.InputChanged:Connect(function()
		if colorpicker.cp then
			movecp()
		end
		if colorpicker.hue then
			movehue()
		end
	end)
	--
	uis.InputEnded:Connect(function(Input)
		if Input.UserInputType.Name == 'MouseButton1'  then
			if colorpicker.cp then
				colorpicker.cp = false
			end
			if colorpicker.hue then
				colorpicker.hue = false
			end
		end
	end)
	--
	red[2].Focused:Connect(function()
		red[3].BorderColor3 = self.library.theme.accent
	end)
	--
	red[2].FocusLost:Connect(function()
		local saved = red[2].Text
		local num = tonumber(saved)
		if num then
			saved = tostring(math.clamp(tonumber(saved),0,255))
			red[2].Text = ""
			if saved then
				if #saved >= 1 and #saved <= 3 then
					red[2].PlaceholderText = "R: "..tostring(saved)
				end
				colorpicker:set(Color3.fromRGB(tonumber(saved),colorpicker.current.G*255,colorpicker.current.B*255))
				red[3].BorderColor3 = Color3.fromRGB(12,12,12)
			else
				red[3].BorderColor3 = Color3.fromRGB(12,12,12)
			end
		else
			red[2].Text = ""
			red[3].BorderColor3 = Color3.fromRGB(12,12,12)
		end
	end)
	--
	green[2].Focused:Connect(function()
		green[3].BorderColor3 = self.library.theme.accent
	end)
	--
	green[2].FocusLost:Connect(function()
		local saved = green[2].Text
		local num = tonumber(saved)
		if num then
			saved = tostring(math.clamp(tonumber(saved),0,255))
			green[2].Text = ""
			if saved then
				if #saved >= 1 and #saved <= 3 then
					green[2].PlaceholderText = "G: "..tostring(saved)
				end
				colorpicker:set(Color3.fromRGB(colorpicker.current.R*255,tonumber(saved),colorpicker.current.B*255))
				green[3].BorderColor3 = Color3.fromRGB(12,12,12)
			else
				green[3].BorderColor3 = Color3.fromRGB(12,12,12)
			end
		else
			green[2].Text = ""
			green[3].BorderColor3 = Color3.fromRGB(12,12,12)
		end
	end)
	--
	blue[2].Focused:Connect(function()
		blue[3].BorderColor3 = self.library.theme.accent
	end)
	--
	blue[2].FocusLost:Connect(function()
		local saved = blue[2].Text
		local num = tonumber(saved)
		if num then
			saved = tostring(math.clamp(tonumber(saved),0,255))
			blue[2].Text = ""
			if saved then
				if #saved >= 1 and #saved <= 3 then
					blue[2].PlaceholderText = "B: "..tostring(saved)
				end
				colorpicker:set(Color3.fromRGB(colorpicker.current.R*255,colorpicker.current.G*255,tonumber(saved)))
				blue[3].BorderColor3 = Color3.fromRGB(12,12,12)
			else
				blue[3].BorderColor3 = Color3.fromRGB(12,12,12)
			end
		else
			blue[2].Text = ""
			blue[3].BorderColor3 = Color3.fromRGB(12,12,12)
		end
	end)
	--
	hex[2].Focused:Connect(function()
		hex[3].BorderColor3 = self.library.theme.accent
	end)
	--
	hex[2].FocusLost:Connect(function()
		local saved = hex[2].Text
		if #saved >= 6 and #saved <= 7 then
			local e,s = pcall(function()
				utility.from_hex(saved)
			end)
			if e == true then
				local hexcolor = utility.from_hex(saved)
				if hexcolor then
					colorpicker:set(hexcolor)
					hex[2].Text = ""
					hex[3].BorderColor3 = Color3.fromRGB(12,12,12)
				else
					hex[2].Text = ""
					hex[3].BorderColor3 = Color3.fromRGB(12,12,12)
				end
			else
				hex[2].Text = ""
				hex[3].BorderColor3 = Color3.fromRGB(12,12,12)
			end
		else
			hex[2].Text = ""
			hex[3].BorderColor3 = Color3.fromRGB(12,12,12)
		end
	end)
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = colorpicker
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	self.library.labels[#self.library.labels+1] = hex[2]
	self.library.labels[#self.library.labels+1] = red[2]
	self.library.labels[#self.library.labels+1] = green[2]
	self.library.labels[#self.library.labels+1] = blue[2]
	self.library.labels[#self.library.labels+1] = cptitle
	-- // metatable indexing + return
	setmetatable(colorpicker, colorpickers)
	return colorpicker
end
--
function colorpickers:set(color)
	if color then
		if typeof(color) == "table" then
			color = Color3.fromRGB(color[1]*255,color[2]*255,color[3]*255)
		end
		local colorpicker = self
		local h,s,v = color:ToHSV()
		--
		local function updateboxes()
			colorpicker.red.PlaceholderText = "R: "..tostring(math.floor(colorpicker.current.R*255))
			colorpicker.green.PlaceholderText = "G: "..tostring(math.floor(colorpicker.current.G*255))
			colorpicker.blue.PlaceholderText = "B: "..tostring(math.floor(colorpicker.current.B*255))
			colorpicker.hex.PlaceholderText = "Hex: "..utility.to_hex(colorpicker.current)
		end
		--
		local function movehue()
			colorpicker.outline3.BackgroundColor3 = Color3.fromHSV(h,1,1)
			colorpicker.huecursor_inline.BackgroundColor3 = Color3.fromHSV(h,1,1)
			colorpicker.hsv[1] = h
			colorpicker.current = Color3.fromHSV(colorpicker.hsv[1],colorpicker.hsv[2],colorpicker.hsv[3])
			colorpicker.cpcolor.BackgroundColor3 = colorpicker.current
			colorpicker.huecursor:TweenPosition(UDim2.new(0.5,0,h,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.15,true)
		end
		--
		local function movecp()
			colorpicker.hsv[2] = s
			colorpicker.hsv[3] = v
			colorpicker.current = Color3.fromHSV(colorpicker.hsv[1],colorpicker.hsv[2],colorpicker.hsv[3])
			colorpicker.cpcolor.BackgroundColor3 = colorpicker.current
			colorpicker.cpcursor:TweenPosition(UDim2.new(s,0,1-v,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.15,true)
		end
		--
		movehue()
		movecp()
		updateboxes()
		colorpicker.callback(colorpicker.current)
	end
end
--
function sections:configloader(props)
	-- // properties
	local folder = props.folder or props.Folder
	-- // variables
	local configloader = {}
	-- // main
	local clholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,222),
			Parent = self.content
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = clholder
		}
	)
	--
	local outline2 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,0,0,15),
			Position = UDim2.new(0,0,0,3),
			Font = self.library.font,
			Text = "configs",
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Center",
			Parent = outline
		}
	)
	--
	self.library.labels[#self.library.labels+1] = title
	--
	local color = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = self.library.theme.accent,
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,-6,0,1),
			Position = UDim2.new(0.5,0,0,19),
			Parent = outline
		}
	)
	--
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	--
	local buttonsholder = utility.new(
		"Frame",
		{
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,0,64),
			Position = UDim2.new(0,0,0,150),
			Parent = outline
		}
	)
	--
	local configsholder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,-10,0,120),
			Position = UDim2.new(0.5,0,0,25),
			Parent = outline
		}
	)
	--
	local outline3 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			Parent = configsholder
		}
	)
	--
	local outline4 = utility.new(
		"ScrollingFrame",
		{
			BackgroundColor3 = Color3.fromRGB(56, 56, 56),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,0,1,0),
			Position = UDim2.new(0,0,0,0),
			ClipsDescendants = true,
			AutomaticCanvasSize = "Y",
			CanvasSize = UDim2.new(0,0,0,0),
			ScrollBarImageTransparency = 0.25,
			ScrollBarImageColor3 = Color3.fromRGB(0,0,0),
			ScrollBarThickness = 5,
			VerticalScrollBarInset = "ScrollBar",
			VerticalScrollBarPosition = "Right",
			Parent = outline3
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,0),
			Parent = outline4
		}
	)
	--
	local createdbuttons = {}
	local selected
	--
	local makebutton = function(name,toggled)
		local createdbutton = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,0,18),
				Position = UDim2.new(0,0,0,0),
				Text = "",
				Parent = outline4
			}
		)
		--
		local grey = utility.new(
			"Frame",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundColor3 = Color3.fromRGB(125, 125, 125),
				BackgroundTransparency = 0.9,
				BorderSizePixel = 0,
				Size = UDim2.new(1,-4,1,0),
				Position = UDim2.new(0.5,0,0,0),
				Visible = false,
				Parent = createdbutton
			}
		)
		--
		local createdtitle = utility.new(
			"TextLabel",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,-10,1,0),
				Position = UDim2.new(0.5,0,0,0),
				Font = self.library.font,	
				Text = name,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				TextXAlignment = "Left",
				Parent = createdbutton
			}
		)
		--
		self.library.labels[#self.library.labels+1] = createdtitle
		--
		local createdb = {
			["button"] = createdbutton,
			["grey"] = grey,
			["title"] = createdtitle,
			["name"] = name
		}
		--
		table.insert(createdbuttons,createdb)
		--
		if toggled then
			createdb.grey.Visible = true
			createdb.title.TextColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["TextColor3"],createdb.title)
			selected = createdb
		end
		--
		createdbutton.MouseButton1Down:Connect(function()
			for i,v in pairs(createdbuttons) do
				if v ~= createdb then
					v.grey.Visible = false
					v.title.TextColor3 = Color3.fromRGB(255,255,255)
					local find = table.find(self.library.themeitems["accent"]["TextColor3"],v.title)
					if find then
						table.remove(self.library.themeitems["accent"]["TextColor3"],find)
					end
				end
			end
			--
			createdb.grey.Visible = true
			createdb.title.TextColor3 = self.library.theme.accent
			table.insert(self.library.themeitems["accent"]["TextColor3"],createdb.title)
			selected = createdb
		end)
	end
	--
	local newbutton = function(parent,name)
		local button_holder = utility.new(
			"Frame",
			{
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				ZIndex = 5,
				Parent = parent
			}
		)
		--
		local button_outline = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(12, 12, 12),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = button_holder
			}
		)
		--
		local button_outline2 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(56, 56, 56),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = button_outline
			}
		)
		--
		local button_color = utility.new(
			"Frame",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundColor3 = Color3.fromRGB(30, 30, 30),
				BorderSizePixel = 0,
				Size = UDim2.new(1,0,0,0),
				Position = UDim2.new(0,0,0,0),
				ZIndex = 5,
				Parent = button_outline2
			}
		)
		--
		utility.new(
			"UIGradient",
			{
				Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
				Rotation = 90,
				Parent = button_color
			}
		)
		--
		local button_button = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0,0,0,0),
				Text = name,
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				Font = self.library.font,
				ZIndex = 5,
				Parent = button_holder
			}
		)
		--
		self.library.labels[#self.library.labels+1] = button_button
		--
		return {button_holder,button_outline,button_button}
	end
	--
	local function textbox(parent)
		local textbox_holder = utility.new(
			"Frame",
			{
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				ZIndex = 5,
				Parent = parent
			}
		)
		--
		local outline5 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(12, 12, 12),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		local outline6 = utility.new(
			"Frame",
			{
				BackgroundColor3 = Color3.fromRGB(24, 24, 24),
				BorderColor3 = Color3.fromRGB(56, 56, 56),
				BorderMode = "Inset",
				BorderSizePixel = 1,
				Position = UDim2.new(0,0,0,0),
				Size = UDim2.new(1,0,1,0),
				ZIndex = 5,
				Parent = outline5
			}
		)
		--
		local color2 = utility.new(
			"Frame",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundColor3 = Color3.fromRGB(30, 30, 30),
				BorderSizePixel = 0,
				Size = UDim2.new(1,0,0,0),
				Position = UDim2.new(0,0,0,0),
				ZIndex = 5,
				Parent = outline6
			}
		)
		--
		utility.new(
			"UIGradient",
			{
				Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))},
				Rotation = 90,
				Parent = color2
			}
		)
		--
		local tbox = utility.new(
			"TextBox",
			{
				AnchorPoint = Vector2.new(0.5,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0.5,0,0,0),
				PlaceholderColor3 = Color3.fromRGB(178, 178, 178),
				PlaceholderText = "",
				Text = "",
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				Font = self.library.font,
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		local tbox_button = utility.new(
			"TextButton",
			{
				AnchorPoint = Vector2.new(0,0),
				BackgroundTransparency = 1,
				Size = UDim2.new(1,0,1,0),
				Position = UDim2.new(0,0,0,0),
				Text = "",
				TextColor3 = Color3.fromRGB(255,255,255),
				TextSize = self.library.textsize,
				TextStrokeTransparency = 0,
				Font = self.library.font,
				ZIndex = 5,
				Parent = textbox_holder
			}
		)
		--
		tbox_button.MouseButton1Down:Connect(function()
			tbox:CaptureFocus()
		end)
		--
		return {textbox_holder,tbox,outline5}
	end
	--
	local refresh = function()
		for i,v in pairs(createdbuttons) do
			v.button:Remove()
			v.grey:Remove()
			v.title:Remove()
		end
		createdbuttons = {}
		for i,v in pairs(listfiles(folder)) do
			if v:sub(-4) == ".cfg" then
				if i == 1 then 
					makebutton(v:sub(#tostring(folder)+2, -5),true)
				else
					makebutton(v:sub(#tostring(folder)+2, -5),false)
				end
			end
		end
	end
	--
	refresh()
	--
	local name = textbox(buttonsholder)
	local load = newbutton(buttonsholder,"Load")
	local delete = newbutton(buttonsholder,"Delete")
	local save = newbutton(buttonsholder,"Save")
	local create = newbutton(buttonsholder,"Create")
	--
	name[1].Size = UDim2.new(1,-10,0,20)
	load[1].Size = UDim2.new(0.5,-6,0,20)
	delete[1].Size = UDim2.new(0.5,-6,0,20)
	save[1].Size = UDim2.new(0.5,-6,0,20)
	create[1].Size = UDim2.new(0.5,-6,0,20)
	--
	name[1].Position = UDim2.new(0.5,0,0,0)
	name[1].AnchorPoint = Vector2.new(0.5,0)
	--
	load[1].Position = UDim2.new(0,5,0,22)
	load[1].AnchorPoint = Vector2.new(0,0)
	--
	delete[1].Position = UDim2.new(1,-5,0,22)
	delete[1].AnchorPoint = Vector2.new(1,0)
	--
	save[1].Position = UDim2.new(0,5,0,44)
	save[1].AnchorPoint = Vector2.new(0,0)
	--
	create[1].Position = UDim2.new(1,-5,0,44)
	create[1].AnchorPoint = Vector2.new(1,0)
	--
	name[2].PlaceholderText = "Name"
	--
	local currentname = nil
	--
	name[2].Focused:Connect(function()
		name[3].BorderColor3 = self.library.theme.accent
	end)
	--
	name[2].FocusLost:Connect(function()
		local saved = name[2].Text
		if #saved >= 3 and #saved <= 15 then
			currentname = saved
		else
			name[2].Text = ""
			currentname = nil
		end
		name[3].BorderColor3 = Color3.fromRGB(12,12,12)
	end)
	--
	load[3].MouseButton1Down:Connect(function()
		self.library:loadconfig(folder..selected.name..".cfg")
		load[2].BorderColor3 = self.library.theme.accent
		wait(0.05)
		load[2].BorderColor3 = Color3.fromRGB(12,12,12)
	end)
	--
	delete[3].MouseButton1Down:Connect(function()
		delfile(folder..selected.name..".cfg")
		delete[2].BorderColor3 = self.library.theme.accent
		wait(0.05)
		delete[2].BorderColor3 = Color3.fromRGB(12,12,12)
		wait()
		refresh()
	end)
	--
	save[3].MouseButton1Down:Connect(function()
		writefile(folder..selected.name..".cfg", self.library:saveconfig())
		save[2].BorderColor3 = self.library.theme.accent
		wait(0.05)
		save[2].BorderColor3 = Color3.fromRGB(12,12,12)
		wait()
		refresh()
	end)
	--
	create[3].MouseButton1Down:Connect(function()
		writefile(folder..currentname..".cfg", self.library:saveconfig())
		create[2].BorderColor3 = self.library.theme.accent
		wait(0.05)
		create[2].BorderColor3 = Color3.fromRGB(12,12,12)
		wait()
		refresh()
	end)
	-- // button tbl
	configloader = {
		["library"] = self.library
	}
	-- // metatable indexing + return
	setmetatable(configloader, configloaders)
	return configloader 
end

-- // Common

local debug = false
local ogpcall = pcall
local pcall = function(func)
	local success, errormsg = ogpcall(func)
	if not success then
		if debug == true then
			warn(`fentanyl.lua: "{errormsg}"`)
		end
	end
end

local Lock = function(Object, Property, Goal)
	pcall(function()
		Object[Property] = Goal
		local LockConnection = Object:GetPropertyChangedSignal(Property):Connect(function()
			Object[Property] = Goal
		end)
	end)
end

local DescendantHandler = function(Parent, Classes, Continuous, Callback)
	task.spawn(function()
		local Analyze = function(Object)
			pcall(function()
				for Index, Class in pairs(Classes) do
					if Object:IsA(tostring(Class)) then
						Callback(Object)
					end
				end
			end)
		end
		for Index, Object in pairs(Parent:GetDescendants()) do
			Analyze(Object)
		end
		if Continuous then
			Parent.DescendantAdded:Connect(Analyze)
		end
	end)
end

-- // Services

local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- // Library

local fentanyllua = library:new({textsize = 15,font = Enum.Font.Code,name = "fentanyl.lua BETA",color = Color3.fromRGB(255, 255, 255)})

local Combat_Tab = fentanyllua:page({name = "Combat"})
local Movement_Tab = fentanyllua:page({name = "Movement"})
local Anti_Aim_Tab = fentanyllua:page({name = "Anti-Aim"})
local Visuals_Tab = fentanyllua:page({name = "Visuals"})
local Visuals_Section_Weird = Visuals_Tab:section({name = "Weird",side = "left",size = 395})
local Misc_Tab = fentanyllua:page({name = "Misc"})
local Settings_Tab = fentanyllua:page({name = "Settings"})
local Scripts_Tab = fentanyllua:page({name = "Scripts"})

-- // Settings Tab

local Settings_Section_1 = Settings_Tab:section({name = "Interface",side = "left",size = 50})
local Settings_Section_2 = Settings_Tab:section({name = "Configuration",side = "right",size = 205})
local Settings_Section_3 = Settings_Tab:section({name = "Corruptor",side = "left",size = 105})

local RandomStringConfig = {
	Length = 50,
	RandomLength = false,
	AllowLetters = true,
	AllowNumbers = true,
	AllowSymbols = true,
	CaseMethod = "Mixed",
}

Settings_Section_2:slider({name = "Random String Length",def = 50, max = 500,min = 1,rounding = true,ticking = false,measuring = "",callback = function(value)
	RandomStringConfig.Length = value
end})
Settings_Section_2:toggle({name = "Random String Random Length",def = false,callback = function(value)
	RandomStringConfig.RandomLength = value
end})
Settings_Section_2:toggle({name = "Random String Allow Letters",def = true,callback = function(value)
	RandomStringConfig.AllowLetters = value
end})
Settings_Section_2:toggle({name = "Random String Allow Numbers",def = true,callback = function(value)
	RandomStringConfig.AllowNumbers = value
end})
Settings_Section_2:toggle({name = "Random String Allow Symbols",def = true,callback = function(value)
	RandomStringConfig.AllowSymbols = value
end})
Settings_Section_2:dropdown({name = "Random String Case Method",def = "Mixed",max = 999,options = {"Lowercase", "Uppercase", "Mixed"},callback = function(chosen)
	RandomStringConfig.CaseMethod = chosen
end})

local generateRandomString = function()
	local str = ""
	local length = RandomStringConfig.Length
	if RandomStringConfig.RandomLength then
		length = math.random(1,RandomStringConfig.Length)
	end
	pcall(function()
		local allowed = {}
		if RandomStringConfig.AllowLetters then
			if RandomStringConfig.CaseMethod:lower() == "lowercase" then
				table.insert(allowed, "a")
				table.insert(allowed, "b")
				table.insert(allowed, "c")
				table.insert(allowed, "d")
				table.insert(allowed, "e")
				table.insert(allowed, "f")
				table.insert(allowed, "g")
				table.insert(allowed, "h")
				table.insert(allowed, "i")
				table.insert(allowed, "j")
				table.insert(allowed, "k")
				table.insert(allowed, "l")
				table.insert(allowed, "m")
				table.insert(allowed, "n")
				table.insert(allowed, "o")
				table.insert(allowed, "p")
				table.insert(allowed, "q")
				table.insert(allowed, "r")
				table.insert(allowed, "s")
				table.insert(allowed, "t")
				table.insert(allowed, "u")
				table.insert(allowed, "v")
				table.insert(allowed, "w")
				table.insert(allowed, "x")
				table.insert(allowed, "y")
				table.insert(allowed, "z")
			elseif RandomStringConfig.CaseMethod:lower() == "uppercase" then
				table.insert(allowed, "A")
				table.insert(allowed, "B")
				table.insert(allowed, "C")
				table.insert(allowed, "D")
				table.insert(allowed, "E")
				table.insert(allowed, "F")
				table.insert(allowed, "G")
				table.insert(allowed, "H")
				table.insert(allowed, "I")
				table.insert(allowed, "J")
				table.insert(allowed, "K")
				table.insert(allowed, "L")
				table.insert(allowed, "M")
				table.insert(allowed, "N")
				table.insert(allowed, "O")
				table.insert(allowed, "P")
				table.insert(allowed, "Q")
				table.insert(allowed, "R")
				table.insert(allowed, "S")
				table.insert(allowed, "T")
				table.insert(allowed, "U")
				table.insert(allowed, "V")
				table.insert(allowed, "W")
				table.insert(allowed, "X")
				table.insert(allowed, "Y")
				table.insert(allowed, "Z")
			elseif RandomStringConfig.CaseMethod:lower() == "mixed" then
				table.insert(allowed, "a")
				table.insert(allowed, "b")
				table.insert(allowed, "c")
				table.insert(allowed, "d")
				table.insert(allowed, "e")
				table.insert(allowed, "f")
				table.insert(allowed, "g")
				table.insert(allowed, "h")
				table.insert(allowed, "i")
				table.insert(allowed, "j")
				table.insert(allowed, "k")
				table.insert(allowed, "l")
				table.insert(allowed, "m")
				table.insert(allowed, "n")
				table.insert(allowed, "o")
				table.insert(allowed, "p")
				table.insert(allowed, "q")
				table.insert(allowed, "r")
				table.insert(allowed, "s")
				table.insert(allowed, "t")
				table.insert(allowed, "u")
				table.insert(allowed, "v")
				table.insert(allowed, "w")
				table.insert(allowed, "x")
				table.insert(allowed, "y")
				table.insert(allowed, "z")
				table.insert(allowed, "A")
				table.insert(allowed, "B")
				table.insert(allowed, "C")
				table.insert(allowed, "D")
				table.insert(allowed, "E")
				table.insert(allowed, "F")
				table.insert(allowed, "G")
				table.insert(allowed, "H")
				table.insert(allowed, "I")
				table.insert(allowed, "J")
				table.insert(allowed, "K")
				table.insert(allowed, "L")
				table.insert(allowed, "M")
				table.insert(allowed, "N")
				table.insert(allowed, "O")
				table.insert(allowed, "P")
				table.insert(allowed, "Q")
				table.insert(allowed, "R")
				table.insert(allowed, "S")
				table.insert(allowed, "T")
				table.insert(allowed, "U")
				table.insert(allowed, "V")
				table.insert(allowed, "W")
				table.insert(allowed, "X")
				table.insert(allowed, "Y")
				table.insert(allowed, "Z")
			end
		end
		if RandomStringConfig.AllowNumbers then
			table.insert(allowed, "0")
			table.insert(allowed, "1")
			table.insert(allowed, "2")
			table.insert(allowed, "3")
			table.insert(allowed, "4")
			table.insert(allowed, "5")
			table.insert(allowed, "6")
			table.insert(allowed, "7")
			table.insert(allowed, "8")
			table.insert(allowed, "9")
		end
		if RandomStringConfig.AllowSymbols then
			table.insert(allowed, "!")
			table.insert(allowed, "@")
			table.insert(allowed, "#")
			table.insert(allowed, "$")
			table.insert(allowed, "%")
			table.insert(allowed, "¨")
			table.insert(allowed, "&")
			table.insert(allowed, "*")
			table.insert(allowed, "(")
			table.insert(allowed, ")")
			table.insert(allowed, "¹")
			table.insert(allowed, "²")
			table.insert(allowed, "³")
			table.insert(allowed, "£")
			table.insert(allowed, "¢")
			table.insert(allowed, "¬")
			table.insert(allowed, "-")
			table.insert(allowed, "=")
			table.insert(allowed, "_")
			table.insert(allowed, "+")
			table.insert(allowed, "´")
			table.insert(allowed, "`")
			table.insert(allowed, "~")
			table.insert(allowed, "^")
			table.insert(allowed, "[")
			table.insert(allowed, "{")
			table.insert(allowed, "]")
			table.insert(allowed, "}")
			table.insert(allowed, ",")
			table.insert(allowed, ".")
			table.insert(allowed, "<")
			table.insert(allowed, ">")
			table.insert(allowed, ";")
			table.insert(allowed, ":")
			table.insert(allowed, "/")
			table.insert(allowed, "?")
			table.insert(allowed, "\\")
			table.insert(allowed, "|")
			table.insert(allowed, "§")
			table.insert(allowed, "ª")
			table.insert(allowed, "º")
			table.insert(allowed, "°")
		end
		for i = 1, length do
			local random = allowed[math.random(1,#allowed)]
			str..=random
		end
	end)
	return str
end
Settings_Section_2:button({name = "Print Random String (F9)",callback = function()
	print(generateRandomString())
end})

Settings_Section_1:keybind({name = "Interface Keybind",def = Enum.KeyCode.Insert,callback = function(key)
	fentanyllua.key = key
end})

local CorruptorSettings = {
	instancesPerStep = 1,
	delayPerInstance = 0,
	doParents = false,
}


Settings_Section_3:slider({name = "instancesPerStep",def = CorruptorSettings.instancesPerStep, max = 500,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	CorruptorSettings.instancesPerStep = value
end})
Settings_Section_3:slider({name = "delayPerInstance",def = CorruptorSettings.delayPerInstance, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	CorruptorSettings.delayPerInstance = value
end})
Settings_Section_3:toggle({name = "doParents (BREAKS EVERYTHING)",def = CorruptorSettings.doParents,callback = function(value)
	CorruptorSettings.doParents = value
end})

local CachedDecals = {}
task.spawn(function(Cache)
	local Analyze = function(v)
		if v:IsA("Decal") or v:IsA("Texture") then
			if not (table.find(CachedDecals, v.Texture)) then
				table.insert(CachedDecals, v.Texture)
			end
		elseif v:IsA("FileMesh") or v:IsA("SpecialMesh") then
			if not (table.find(CachedDecals, v.TextureId)) then
				table.insert(CachedDecals, v.TextureId)
			end
		elseif v:IsA("CharacterMesh") then
			if not (table.find(CachedDecals, v.BaseTextureId)) then
				table.insert(CachedDecals, v.BaseTextureId)
			end
			if not (table.find(CachedDecals, v.OverlayTextureId)) then
				table.insert(CachedDecals, v.OverlayTextureId)
			end
		elseif v:IsA("ImageLabel") or v:IsA("ImageButton") or v:IsA("ImageHandleAdornment") then
			if not (table.find(CachedDecals, v.Image)) then
				table.insert(CachedDecals, v.Image)
			end
		elseif v:IsA("Shirt") then
			if not (table.find(CachedDecals, v.ShirtTemplate)) then
				table.insert(CachedDecals, v.ShirtTemplate)
			end
		elseif v:IsA("Pants") then
			if not (table.find(CachedDecals, v.PantsTemplate)) then
				table.insert(CachedDecals, v.PantsTemplate)
			end
		elseif v:IsA("ShirtGraphic") then
			if not (table.find(CachedDecals, v.Graphic)) then
				table.insert(CachedDecals, v.Graphic)
			end
		end
	end
	for Index, Object in pairs(game:GetDescendants()) do
		Analyze(Object)
	end
	game.DescendantAdded:Connect(Analyze)
end)
local InsanityBegun = false
Visuals_Section_Weird:button({name = "Corruptor (DANGEROUS+UNREVERTABLE)",callback = function()
	if InsanityBegun then return end
	InsanityBegun = true
	
	local RandomColor3 = function()
		local R = Random.new():NextInteger(0, 255)
		local G = Random.new():NextInteger(0, 255)
		local B = Random.new():NextInteger(0, 255)
		return Color3.fromRGB(R, G, B)
	end
	
	local RandomBrickColor = function()
		return BrickColor.new(RandomColor3())
	end
	
	local RandomNumber = function(Min, Max, Integer)
		if Integer == true then
			return Random.new():NextInteger(Min, Max)
		else 
			return Random.new():NextNumber(Min, Max)
		end
	end
	
	local RandomVector3 = function(Min, Max, Integer)
		local X
		local Y
		local Z
		if Integer == true then
			X = Random.new():NextInteger(Min, Max)
			Y = Random.new():NextInteger(Min, Max)
			Z = Random.new():NextInteger(Min, Max)
		else 
			X = Random.new():NextNumber(Min, Max)
			Y = Random.new():NextNumber(Min, Max)
			Z = Random.new():NextNumber(Min, Max)
		end
		return Vector3.new(X, Y, Z)
	end
	local RandomVector2 = function(Min, Max, Integer)
		local X
		local Y
		if Integer == true then
			X = Random.new():NextInteger(Min, Max)
			Y = Random.new():NextInteger(Min, Max)
		else 
			X = Random.new():NextNumber(Min, Max)
			Y = Random.new():NextNumber(Min, Max)
		end
		return Vector2.new(X, Y)
	end
	local RandomUDim2 = function(Min, Max, Integer)
		local XScale = 0
		local YScale = 0
		local XOffset = 0
		local YOffset = 0
		if Integer == true then
			XOffset = Random.new():NextInteger(Min, Max)
			YOffset = Random.new():NextInteger(Min, Max)
		else 
			XScale = Random.new():NextNumber(Min, Max)
			YScale = Random.new():NextNumber(Min, Max)
		end
		return UDim2.new(XScale, XOffset, YScale, YOffset)
	end
	local RandomBoolean = function()
		local bool = math.random(0,1)
		if bool == 0 then
			return false
		else 
			return true
		end
	end
	local RandomEnumItem = function(EnumParent)
		local Options = {}
		for Index, EnumItem in pairs(EnumParent:GetEnumItems()) do 
			table.insert(Options, EnumItem)
		end
		return Options[math.random(1,#Options)]
	end
	local RandomInstance = function(Parent)
		if not (Parent and Parent ~= nil) then
			Parent = workspace
		end
		return Parent:GetDescendants()[math.random(1,#game:GetDescendants())]
	end
	local RandomTeam = function()
		return game:GetService("Teams"):GetChildren()[math.random(1,#game:GetService("Teams"):GetChildren())]
	end
	local RandomImage = function()
		return CachedDecals[math.random(1,#CachedDecals)]
	end
	local RandomCFrame = function(Min, Max, Integer)
		local x
		local y
		local z
		local r00
		local r01
		local r02
		local r10
		local r11
		local r12
		local r20
		local r21
		local r22
		local randomNum = function()
			local num
			if Integer then
				num = Random.new():NextInteger(Min, Max)
			else 
				num = Random.new():NextNumber(Min, Max)
			end
			return num
		end
		
		x = randomNum()
		y = randomNum()
		z = randomNum()
		r00 = randomNum()
		r01 = randomNum()
		r02 = randomNum()
		r10 = randomNum()
		r11 = randomNum()
		r12 = randomNum()
		r20 = randomNum()
		r21 = randomNum()
		r22 = randomNum()
		
		return CFrame.new(x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22)
	end
	
	local BlacklistedInstances = {
		"PlayerGui"
	}
	
	task.spawn(function()
		while true do
			for i = 1, CorruptorSettings.instancesPerStep do
				local Instance = game:GetDescendants()[math.random(1,#game:GetDescendants())]
				local corrupt = function()
					if Instance and Instance ~= nil and Instance ~= script then
						--pcall(function()
						pcall(function()
							Instance.Name = generateRandomString()
							Instance.Archivable = RandomBoolean()
							if CorruptorSettings.doParents then
								Instance.Parent = RandomInstance(workspace)
							end
						end)
						if (Instance:IsA("BasePart") and not (Instance:IsA("Terrain"))) then
							Instance.CastShadow = RandomBoolean()
							Instance.Color = RandomColor3()
							Instance.Material = RandomEnumItem(Enum.Material)
							Instance.MaterialVariant = ""
							Instance.Transparency = RandomNumber(0, 1)
							Instance.Reflectance = RandomNumber(0, 1)
							--Instance.Archivable = RandomBoolean()
							Instance.Locked = RandomBoolean()
							--Instance.Name = generateRandomString()
							Instance.EnableFluidForces = RandomBoolean()
							--Instance.CanCollide = RandomBoolean()
							Instance.CanTouch = RandomBoolean()
							Instance.CanQuery = RandomBoolean()
							Instance.Anchored = RandomBoolean()
							Instance.CustomPhysicalProperties = PhysicalProperties.new(
								RandomNumber(0.0001,100),
								RandomNumber(0,2),
								RandomNumber(0, 1),
								RandomNumber(0, 100),
								RandomNumber(0, 100)
							)
							Instance.Massless = RandomBoolean()
							Instance.RootPriority = RandomNumber(-127, 127, true)
							if Instance:IsA("Part") then
								Instance.Shape = RandomEnumItem(Enum.PartType)
							end
							Instance.TopSurface = RandomEnumItem(Enum.SurfaceType)
							Instance.BottomSurface = RandomEnumItem(Enum.SurfaceType)
							Instance.FrontSurface = RandomEnumItem(Enum.SurfaceType)
							Instance.BackSurface = RandomEnumItem(Enum.SurfaceType)
							Instance.RightSurface = RandomEnumItem(Enum.SurfaceType)
							Instance.LeftSurface = RandomEnumItem(Enum.SurfaceType)

							Instance.TopSurfaceInput = RandomEnumItem(Enum.InputType)
							Instance.BottomSurfaceInput = RandomEnumItem(Enum.InputType)
							Instance.FrontSurfaceInput = RandomEnumItem(Enum.InputType)
							Instance.BackSurfaceInput = RandomEnumItem(Enum.InputType)
							Instance.RightSurfaceInput = RandomEnumItem(Enum.InputType)
							Instance.LeftSurfaceInput = RandomEnumItem(Enum.InputType)

							Instance.TopParamA = RandomNumber(0, 1)
							Instance.BottomParamA = RandomNumber(0, 1)
							Instance.FrontParamA = RandomNumber(0, 1)
							Instance.BackParamA = RandomNumber(0, 1)
							Instance.RightParamA = RandomNumber(0, 1)
							Instance.LeftParamA = RandomNumber(0, 1)

							Instance.TopParamB = RandomNumber(0, 1)
							Instance.BottomParamB = RandomNumber(0, 1)
							Instance.FrontParamB = RandomNumber(0, 1)
							Instance.BackParamB = RandomNumber(0, 1)
							Instance.RightParamB = RandomNumber(0, 1)
							Instance.LeftParamB = RandomNumber(0, 1)

							Instance.AudioCanCollide = RandomBoolean()
							Instance.CollisionGroupId = RandomNumber(0, game:GetService("PhysicsService"):GetMaxCollisionGroups(), true)            
						end
						if (Instance:IsA("Terrain")) then
							task.spawn(function()
								local Allowed = {
									Enum.Material.Asphalt,
									Enum.Material.Basalt,
									Enum.Material.Brick,
									Enum.Material.Cobblestone,
									Enum.Material.Concrete,
									Enum.Material.CrackedLava,
									Enum.Material.Glacier,
									Enum.Material.Grass,
									Enum.Material.Ground,
									Enum.Material.Ice,
									Enum.Material.LeafyGrass,
									Enum.Material.Limestone,
									Enum.Material.Mud,
									Enum.Material.Pavement,
									Enum.Material.Rock,
									Enum.Material.Salt,
									Enum.Material.Sand,
									Enum.Material.Sandstone,
									Enum.Material.Slate,
									Enum.Material.Snow,
									Enum.Material.WoodPlanks
								}
								for Index, Material in pairs(Allowed) do 
									Instance:SetMaterialColor(Material, RandomColor3())
								end
							end)
							Instance.WaterColor = RandomColor3()
							Instance.WaterReflectance = RandomNumber(0, 1)
							Instance.WaterTransparency = RandomNumber(0, 1)
							Instance.WaterWaveSize = RandomNumber(0, 1)
							Instance.WaterWaveSpeed = RandomNumber(0, 100)
							Instance.CustomPhysicalProperties = PhysicalProperties.new(
								RandomNumber(0.0001,100),
								RandomNumber(0,2),
								RandomNumber(0, 1),
								RandomNumber(0, 100),
								RandomNumber(0, 100)
							)
							--Instance.Name = generateRandomString()
						end
						if (Instance:IsA("Lighting")) then
							Instance.Ambient = RandomColor3()
							Instance.Brightness = RandomNumber(0,5)
							Instance.ColorShift_Bottom = RandomColor3()
							Instance.ColorShift_Top = RandomColor3()
							Instance.EnvironmentDiffuseScale = RandomNumber(0, 1)
							Instance.EnvironmentSpecularScale = RandomNumber(0, 1)
							Instance.GlobalShadows = RandomBoolean()
							Instance.ShadowSoftness = RandomNumber(0, 1)
							Instance.ClockTime = RandomNumber(0, 24)
							Instance.GeographicLatitude = RandomNumber(0, 180)
							Instance.ExposureCompensation = RandomNumber(-0.5, 0.5)
							--Instance.Name = generateRandomString()
						end
						if (Instance:IsA("Sound")) then
							Instance.PlayOnRemove = RandomBoolean()
							Instance.Looped = RandomBoolean()
							Instance.Playing = RandomBoolean()
							Instance.Volume = RandomNumber(0, 10)
							Instance.TimePosition = RandomNumber(0, Instance.TimeLength)
							Instance.PlaybackSpeed = RandomNumber(0,20)
							Instance.RollOffMinDistance = RandomNumber(0, 10)
							Instance.RollOffMaxDistance = RandomNumber(0, 10000)
							Instance.RollOffMode = RandomEnumItem(Enum.RollOffMode)
						end
						if (Instance:IsA("Player")) then
							Instance.Team = RandomTeam()
							Instance.Neutral = RandomBoolean()
							Instance.TeamColor = RandomBrickColor()
							Instance.AutoJumpEnabled = RandomBoolean()
							Instance.CharacterAppearanceId = RandomNumber(0, 7451015981, true)
							Instance.HealthDisplayDistance = RandomNumber(0, 100)
							Instance.NameDisplayDistance = RandomNumber(0, 100)
							--Instance.DevEnableMouseLock = RandomBoolean()
							Instance.CameraMaxZoomDistance = RandomNumber(0, 10000)
							Instance.CameraMinZoomDistance = RandomNumber(0, Instance.CameraMaxZoomDistance)
							Instance.CameraMode = RandomEnumItem(Enum.CameraMode)
							Instance.CanLoadCharacterAppearance = RandomBoolean()
						end
						if (Instance:IsA("Camera")) then
							Instance.HeadLocked = RandomBoolean()
							Instance.HeadScale = RandomNumber(0, 100)
							Instance.VRTiltAndRollEnabled = RandomBoolean()
							Instance.CameraType = RandomEnumItem(Enum.CameraType)
							Instance.FieldOfView = RandomNumber(0, 120)
						end
						if (Instance:IsA("Player") and Instance == LocalPlayer) then
							UIS.MouseBehavior = RandomEnumItem(Enum.MouseBehavior)
							UIS.MouseIcon = RandomImage()
							UIS.MouseIconEnabled = RandomBoolean()
						end
						if (Instance:IsA("Decal") or Instance:IsA("Texture")) then
							Instance.Texture = RandomImage()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.Color3 = RandomColor3()
						elseif Instance:IsA("FileMesh") or Instance:IsA("SpecialMesh") then
							Instance.TextureId = RandomImage()
						elseif Instance:IsA("CharacterMesh") then
							Instance.BaseTextureId = RandomImage()
							Instance.OverlayTextureId = RandomImage()
						elseif Instance:IsA("ImageLabel") or Instance:IsA("ImageButton") or Instance:IsA("ImageHandleAdornment") then
							Instance.Image = RandomImage()
							if Instance:IsA("ImageHandleAdornment") then
								Instance.Color3 = RandomColor3()
							else 
								Instance.ImageColor3 = RandomColor3()
							end
						elseif Instance:IsA("Shirt") then
							Instance.ShirtTemplate = RandomImage()
							Instance.Color3 = RandomColor3()
						elseif Instance:IsA("Pants") then
							Instance.PantsTemplate = RandomImage()
							Instance.Color3 = RandomColor3()
						elseif Instance:IsA("ShirtGraphic") then
							Instance.Graphic = RandomImage()
							Instance.Color3 = RandomColor3()
						end
						if (Instance:IsA("SpawnLocation")) then
							Instance.Duration = RandomNumber(0, 30)
							Instance.AllowTeamChangeOnTouch = RandomBoolean()
							Instance.Neutral = RandomBoolean()
							Instance.TeamColor = RandomTeam().TeamColor
						end
						if (Instance:IsA("Humanoid")) then
							Instance.CameraOffset = RandomVector3(-10, 10)
							Instance.DisplayDistanceType = RandomEnumItem(Enum.HumanoidDisplayDistanceType)
							Instance.DisplayName = generateRandomString()
							Instance.HealthDisplayDistance = RandomNumber(0, 500)
							Instance.HealthDisplayType = RandomEnumItem(Enum.HumanoidHealthDisplayType)
							Instance.NameDisplayDistance = RandomNumber(0, 500)
							Instance.NameOcclusion = RandomEnumItem(Enum.NameOcclusion)
							Instance.RigType = RandomEnumItem(Enum.HumanoidRigType)
							Instance.BreakJointsOnDeath = RandomBoolean()
							Instance.EvaluateStateMachine = RandomBoolean()
							Instance.RequiresNeck = RandomBoolean()
							Instance.AutoRotate = RandomBoolean()
							Instance.Jump = RandomBoolean()
							Instance.PlatformStand = RandomBoolean()
							Instance.Sit = RandomBoolean()
							Instance.AutomaticScalingEnabled = RandomBoolean()
							Instance.MaxHealth = RandomNumber(0, 500)
							Instance.Health = RandomNumber(0, Instance.MaxHealth)
							Instance.MaxSlopeAngle = RandomNumber(0, 89.9)
							Instance.HipHeight = RandomNumber(0, 10)
							Instance.WalkSpeed = RandomNumber(0, 50)
							Instance.AutoJumpEnabled = RandomBoolean()
							Instance.JumpPower = RandomNumber(0, 100)
							Instance.UseJumpPower = true
							for Index, EnumItem in pairs(Enum.HumanoidStateType:GetEnumItems()) do
								if EnumItem ~= Enum.HumanoidStateType.None then
									pcall(function()
										Instance:SetStateEnabled(EnumItem, RandomBoolean())
										Instance:ChangeState(RandomEnumItem(Enum.HumanoidStateType))
									end)
								end
							end
						end
						if (Instance:IsA("BodyColors")) then
							Instance.HeadColor3 = RandomColor3()
							Instance.RightArmColor3 = RandomColor3()
							Instance.LeftArmColor3 = RandomColor3()
							Instance.RightLegColor3 = RandomColor3()
							Instance.LeftLegColor3 = RandomColor3()
							Instance.TorsoColor3 = RandomColor3()
						elseif (Instance:IsA("Animator")) then
							Instance.PreferLodEnabled = RandomBoolean()
						elseif (Instance:IsA("Animation")) then
							Instance.AnimationId = ""
						end
						if (Instance:IsA("Script") or Instance:IsA("LocalScript") and Instance ~= script) then
							Instance.Disabled = RandomBoolean()
						end
						if (Instance:IsA("AnimationConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.IsKinematic = RandomBoolean()
							Instance.Color = RandomBrickColor()
						elseif (Instance:IsA("BallSocketConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Radius = RandomNumber(0, 1)
							Instance.Enabled = RandomBoolean()
							Instance.LimitsEnabled = RandomBoolean()
							Instance.MaxFrictionTorque = RandomNumber(0, 1)
						elseif (Instance:IsA("CylindricalConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.RotationAxisVisible = RandomBoolean()
							Instance.Size = RandomNumber(0, 1)
							Instance.Enabled = RandomBoolean()
							Instance.AngularActuatorType = RandomEnumItem(Enum.ActuatorType)
							Instance.AngularLimitsEnable = RandomBoolean()
							Instance.InclinationAngle = RandomNumber(-180, 180)
							Instance.ActuatorType = RandomEnumItem(Enum.ActuatorType)
							Instance.LimitsEnabled = RandomBoolean()
						elseif (Instance:IsA("HingeConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Radius = RandomNumber(0, 1)
							Instance.Enabled = RandomBoolean()
							Instance.LimitsEnabled = RandomBoolean()
							Instance.ActuatorType = RandomEnumItem(Enum.ActuatorType)
						elseif (Instance:IsA("NoCollisionConstraint")) then
							Instance.Enabled = RandomBoolean()


						elseif (Instance:IsA("PlaneConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("PrismaticConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Size = RandomNumber(0, 1)
							Instance.LimitsEnabled = RandomBoolean()
							Instance.ActuatorType = RandomEnumItem(Enum.ActuatorType)
						elseif (Instance:IsA("RigidConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("RodConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Thickness = RandomNumber(0, 1)
							Instance.Length = RandomNumber(0, 10)
							Instance.LimitsEnabled = RandomBoolean()
						elseif (Instance:IsA("RopeConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Thickness = RandomNumber(0, 1)
							Instance.Length = RandomNumber(0, 10)
							Instance.Restitution = RandomNumber(0, 1)
							Instance.WinchEnabled = RandomBoolean()
						elseif (Instance:IsA("SpringConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Thickness = RandomNumber(0, 1)
							Instance.Radius = RandomNumber(0, 1)
							Instance.Coils = RandomNumber(0, 10)
							Instance.Damping = RandomNumber(0, 1)
							Instance.FreeLength = RandomNumber(0, 1)
							Instance.LimitsEnabled = RandomBoolean()
							Instance.MaxForce = RandomNumber(0, 100000)
							Instance.Stiffness = RandomNumber(0, 1)
						elseif (Instance:IsA("TorsionSpringConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Thickness = RandomNumber(0, 1)
							Instance.Radius = RandomNumber(0, 1)
							Instance.Coils = RandomNumber(0, 10)
							Instance.Damping = RandomNumber(0, 1)
							Instance.LimitsEnabled = RandomBoolean()
							Instance.MaxForce = RandomNumber(0, 100000)
							Instance.Stiffness = RandomNumber(0, 1)
						elseif (Instance:IsA("UniversalConstraint")) then
							Instance.Visible = RandomBoolean()
							Instance.Color = RandomBrickColor()
							Instance.Enabled = RandomBoolean()
							Instance.Radius = RandomNumber(0, 1)
							Instance.LimitsEnabled = RandomBoolean()
						end
						if (Instance:IsA("AdGui")) then
							Instance.FallbackImage = RandomImage()
							Instance.Active = RandomBoolean()
							Instance.AdShape = RandomEnumItem(Enum.AdShape)
							Instance.Enabled = RandomBoolean()
							Instance.EnableVideoAds = RandomBoolean()
							Instance.Face = RandomEnumItem(Enum.NormalId)
							Instance.ResetOnSpawn = RandomBoolean()
							Instance.ZIndexBehavior = RandomEnumItem(Enum.ZIndexBehavior)
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
						elseif (Instance:IsA("BoxHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Size = RandomVector3(-10, 10)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("ConeHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Height = RandomNumber(-10, 10)
							Instance.Radius = RandomNumber(0, 10)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("CylinderHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Angle = RandomNumber(0, 360)
							Instance.Height = RandomNumber(-10, 10)
							Instance.InnerRadius = RandomNumber(0, 10)
							Instance.Radius = RandomNumber(0, 10)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("ImageHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Size = RandomVector2(-10, 10)
							Instance.Image = RandomImage()
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("LineHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Thickness = RandomNumber(0, 10)
							Instance.Length = RandomNumber(0, 50)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("SphereHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Radius = RandomNumber(0, 10)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						elseif (Instance:IsA("WireframeHandleAdornment")) then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.AdornCullingMode = RandomEnumItem(Enum.AdornCullingMode)

							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Scale = RandomVector3(-10, 10)
							Instance.Thickness = RandomNumber(0, 10)
							Instance.SizeRelativeOffset = RandomVector3(-5, 5)
							Instance.Visible = RandomBoolean()
							Instance.ZIndex = RandomNumber(-100, 100, true)
						end
						if (Instance:IsA("StringValue")) then
							Instance.Value = generateRandomString()
						elseif (Instance:IsA("IntValue")) then
							Instance.Value = RandomNumber(-100000, 100000)
						elseif (Instance:IsA("BoolValue")) then
							Instance.Value = RandomBoolean()
						elseif (Instance:IsA("NumberValue")) then
							Instance.Value = RandomNumber(-100000, 100000)
						elseif (Instance:IsA("BrickColorValue")) then
							Instance.Value = RandomBrickColor()
						elseif (Instance:IsA("CFrameValue")) then
							Instance.Value = RandomCFrame(-1000, 1000)
						elseif (Instance:IsA("Color3Value")) then
							Instance.Value = RandomColor3()
						elseif (Instance:IsA("Vector3Value")) then
							Instance.Value = RandomVector3(-1000, 1000)
						elseif (Instance:IsA("DoubleConstrainedValue")) then
							Instance.MaxValue = RandomNumber(0, 1000)
							Instance.MinValue = RandomNumber(0, Instance.MaxValue)
							Instance.Value = RandomNumber(Instance.MinValue, Instance.MaxValue)
						elseif (Instance:IsA("IntConstrainedValue")) then
							Instance.MaxValue = RandomNumber(0, 1000)
							Instance.MinValue = RandomNumber(0, Instance.MaxValue)
							Instance.Value = RandomNumber(Instance.MinValue, Instance.MaxValue)
						end
						if (Instance:IsA("Attachment")) then
							Instance.Visible = RandomBoolean()
						end
						if (Instance:IsA("Motor6D")) then
							Instance.Enabled = RandomBoolean()
							Instance.MaxVelocity = RandomNumber(0, 360)
							Instance.CurrentAngle = RandomNumber(0, 360)
							Instance.DesiredAngle = RandomNumber(0, 360)


						elseif (Instance:IsA("Weld")) then
							Instance.Enabled = RandomBoolean()


						elseif (Instance:IsA("Glue")) then


							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("ManualGlue")) then


							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("ManualWeld")) then


							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("MotorFeature")) then
							Instance.FaceId = RandomEnumItem(Enum.NormalId)
							Instance.InOut = RandomEnumItem(Enum.InOut)
							Instance.LeftRight = RandomEnumItem(Enum.LeftRight)
							Instance.TopBottom = RandomEnumItem(Enum.TopBottom)
						elseif (Instance:IsA("Rotate")) then


							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("RotateP")) then


							Instance.Enabled = RandomBoolean()
							Instance.BaseAngle = RandomNumber(0, 360)
						elseif (Instance:IsA("RotateV")) then


							Instance.Enabled = RandomBoolean()
							Instance.BaseAngle = RandomNumber(0, 360)
						elseif (Instance:IsA("VelocityMotor")) then


							Instance.Enabled = RandomBoolean()
							Instance.MaxVelocity = RandomNumber(0, 360)
							Instance.DesiredAngle = RandomNumber(0, 360)
							Instance.CurrentAngle = RandomNumber(0, 360)
						elseif (Instance:IsA("Motor")) then


							Instance.Enabled = RandomBoolean()
							Instance.MaxVelocity = RandomNumber(0, 360)
							Instance.DesiredAngle = RandomNumber(0, 360)
							Instance.CurrentAngle = RandomNumber(0, 360)
						end
						if (Instance:IsA("Seat")) then
							Instance.Disabled = RandomBoolean()
						elseif (Instance:IsA("VehicleSeat")) then
							Instance.Disabled = RandomBoolean()
							Instance.HeadsUpDisplay = RandomBoolean()
							Instance.MaxSpeed = RandomNumber(0, 1000)
							Instance.Steer = RandomNumber(-1, 1)
							Instance.SteerFloat = RandomNumber(-1, 1)
							Instance.Throttle = RandomNumber(-1, 1)
							Instance.ThrottleFloat = RandomNumber(-1, 1)
							Instance.Torque = RandomNumber(0, 100)
							Instance.TurnSpeed = RandomNumber(0, 10)
						end
						if (Instance:IsA("RemoteEvent")) then
							Instance:FireServer()
						elseif (Instance:IsA("RemoteFunction")) then
							Instance:InvokeServer()
						elseif (Instance:IsA("BindableEvent")) then
							Instance:Fire()
						elseif (Instance:IsA("BindableRemote")) then
							Instance:Invoke()
						end
						if (Instance:IsA("Atmosphere")) then
							Instance.Density = RandomNumber(0, 1)
							Instance.Offset = RandomNumber(0, 1)
							Instance.Color = RandomColor3()
							Instance.Decay = RandomColor3()
						elseif (Instance:IsA("Clouds")) then
							Instance.Color = RandomColor3()
							Instance.Enabled = RandomBoolean()
							Instance.Cover = RandomNumber(0, 1)
							Instance.Density = RandomNumber(0, 1)
						elseif (Instance:IsA("Sky")) then
							Instance.CelestialBodiesShown = RandomBoolean()
							Instance.MoonAngularSize = RandomNumber(0, 60)
							Instance.SunAngularSize = RandomNumber(0, 60)
							Instance.MoonTextureId = RandomImage()
							Instance.SunTextureId = RandomImage()
							Instance.SkyboxBk = RandomImage()
							Instance.SkyboxDn = RandomImage()
							Instance.SkyboxFt = RandomImage()
							Instance.SkyboxLf = RandomImage()
							Instance.SkyboxRt = RandomImage()
							Instance.SkyboxUp = RandomImage()
							Instance.StarCount = RandomNumber(0, 5000, true)
						elseif (Instance:IsA("BloomEffect")) then
							Instance.Intensity = RandomNumber(0, 1)
							Instance.Size = RandomNumber(0, 24)
							Instance.Threshold = RandomNumber(0.8, 2)
							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("BlurEffect")) then
							Instance.Enabled = RandomBoolean()
							Instance.Size = RandomNumber(0, 10)
						elseif (Instance:IsA("ColorCorrectionEffect")) then
							Instance.Enabled = RandomBoolean()
							Instance.TintColor = RandomColor3()
							Instance.Saturation = RandomNumber(-1, 1)
							Instance.Contrast = RandomNumber(-1, 1)
							Instance.Brightness = RandomNumber(-1, 1)
						elseif (Instance:IsA("DepthOfFieldEffect")) then
							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("SunRaysEffect")) then
							Instance.Enabled = RandomBoolean()
						end
						if (Instance:IsA("ScreenGui")) then
							Instance.ClipToDeviceSafeArea = RandomBoolean()
							Instance.SafeAreaCompatibility = RandomEnumItem(Enum.SafeAreaCompatibility)
							Instance.ScreenInsets = RandomEnumItem(Enum.ScreenInsets)
							Instance.DisplayOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.Enabled = RandomBoolean()
							Instance.IgnoreGuiInset = RandomBoolean()
							Instance.ResetOnSpawn = RandomBoolean()
							Instance.ZIndexBehavior = RandomEnumItem(Enum.ZIndexBehavior)
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
						elseif (Instance:IsA("Frame")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.Style = RandomEnumItem(Enum.FrameStyle)
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
						elseif (Instance:IsA("ScrollingFrame")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.AutomaticCanvasSize = RandomEnumItem(Enum.AutomaticSize)
							Instance.BottomImage = RandomImage()
							Instance.CanvasSize = RandomUDim2(0, 500, true)
							Instance.ElasticBehavior = RandomEnumItem(Enum.ElasticBehavior)
							Instance.HorizontalScrollBarInset = RandomEnumItem(Enum.ScrollBarInset)
							Instance.MidImage = RandomImage()
							Instance.ScrollBarImageColor3 = RandomColor3()
							Instance.ScrollBarImageTransparency = RandomNumber(0, 1)
							Instance.ScrollBarThickness = RandomNumber(0, 30, true)
							Instance.ScrollingDirection = RandomEnumItem(Enum.ScrollingDirection)
							Instance.ScrollingEnabled = RandomBoolean()
							Instance.TopImage = RandomImage()
							Instance.VerticalScrollBarInset = RandomEnumItem(Enum.ScrollBarInset)
							Instance.VerticalScrollBarPosition = RandomEnumItem(Enum.VerticalScrollBarPosition)
						elseif (Instance:IsA("BillboardGui")) then
							Instance.Active = RandomBoolean()
							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Enabled = RandomBoolean()
							Instance.LightInfluence = RandomNumber(0, 1)
							Instance.MaxDistance = RandomNumber(0, 1000000)
							Instance.ResetOnSpawn = RandomBoolean()
							Instance.ZIndexBehavior = RandomEnumItem(Enum.ZIndexBehavior)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
						elseif (Instance:IsA("SurfaceGui")) then
							Instance.ZOffset = RandomNumber(0, 10)
							Instance.Active = RandomBoolean()
							Instance.AlwaysOnTop = RandomBoolean()
							Instance.Face = RandomEnumItem(Enum.NormalId)
							Instance.Enabled = RandomBoolean()
							Instance.LightInfluence = RandomNumber(0, 1)
							Instance.MaxDistance = RandomNumber(0, 1000000)
							Instance.ResetOnSpawn = RandomBoolean()
							Instance.ToolPunchThroughDistance = RandomNumber(0, 100)
							Instance.PixelsPerStud = RandomNumber(0, 100, true)
							Instance.ZIndexBehavior = RandomEnumItem(Enum.ZIndexBehavior)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
						elseif (Instance:IsA("TextLabel")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.Font = RandomEnumItem(Enum.Font)
							Instance.LineHeight = RandomNumber(0, 2)
							Instance.Text = generateRandomString()
							Instance.MaxVisibleGraphemes = RandomNumber(0, #Instance.Text, true)
							Instance.RichText = RandomBoolean()
							Instance.TextColor3 = RandomColor3()
							Instance.TextDirection = RandomEnumItem(Enum.TextDirection)
							Instance.TextScaled = RandomBoolean()
							Instance.TextSize = RandomNumber(0, 100, true)
							Instance.TextStrokeColor3 = RandomColor3()
							Instance.TextStrokeTransparency = RandomNumber(0, 1)
							Instance.TextTruncate = RandomEnumItem(Enum.TextTruncate)
							Instance.TextWrapped = RandomBoolean()
							Instance.TextXAlignment = RandomEnumItem(Enum.TextXAlignment)
							Instance.TextYAlignment = RandomEnumItem(Enum.TextYAlignment)
						elseif (Instance:IsA("TextBox")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.Font = RandomEnumItem(Enum.Font)
							Instance.LineHeight = RandomNumber(0, 2)
							Instance.Text = generateRandomString()
							Instance.MaxVisibleGraphemes = RandomNumber(0, #Instance.Text, true)
							Instance.RichText = RandomBoolean()
							Instance.TextColor3 = RandomColor3()
							Instance.TextDirection = RandomEnumItem(Enum.TextDirection)
							Instance.TextScaled = RandomBoolean()
							Instance.TextSize = RandomNumber(0, 100, true)
							Instance.TextStrokeColor3 = RandomColor3()
							Instance.TextStrokeTransparency = RandomNumber(0, 1)
							Instance.TextTruncate = RandomEnumItem(Enum.TextTruncate)
							Instance.TextWrapped = RandomBoolean()
							Instance.TextXAlignment = RandomEnumItem(Enum.TextXAlignment)
							Instance.TextYAlignment = RandomEnumItem(Enum.TextYAlignment)
							Instance.PlaceholderColor3 = RandomColor3()
							Instance.PlaceholderText = generateRandomString()
						elseif (Instance:IsA("ImageButton")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.Image = RandomImage()
							Instance.ImageColor3 = RandomColor3()
							Instance.ImageTransparency = RandomNumber(0, 1)
							Instance.ResampleMode = RandomEnumItem(Enum.ResamplerMode)
							Instance.ScaleType = RandomEnumItem(Enum.ScaleType)
							Instance.PressedImage = RandomImage()
							Instance.HoverImage = RandomImage()
						elseif (Instance:IsA("ImageLabel")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.Image = RandomImage()
							Instance.ImageColor3 = RandomColor3()
							Instance.ImageTransparency = RandomNumber(0, 1)
							Instance.ResampleMode = RandomEnumItem(Enum.ResamplerMode)
							Instance.ScaleType = RandomEnumItem(Enum.ScaleType)
						elseif (Instance:IsA("TextButton")) then
							Instance.LayoutOrder = RandomNumber(-2147483648, 2147483647, true)
							Instance.ZIndex = RandomNumber(-2147483648, 2147483647, true)
							Instance.Visible = RandomBoolean()
							Instance.AutoLocalize = RandomBoolean()
							Instance.SelectionGroup = RandomBoolean()
							Instance.Selectable = RandomBoolean()
							Instance.Active = RandomBoolean()
							Instance.Draggable = RandomBoolean()
							Instance.SizeConstraint = RandomEnumItem(Enum.SizeConstraint)
							Instance.Rotation = RandomNumber(-180, 180)
							Instance.Interactable = RandomBoolean()
							Instance.BackgroundColor3 = RandomColor3()
							Instance.BackgroundTransparency = RandomNumber(0, 1)
							Instance.BorderColor3 = RandomColor3()
							Instance.BorderMode = RandomEnumItem(Enum.BorderMode)
							Instance.BorderSizePixel = RandomNumber(0, 5, true)
							Instance.ClipsDescendants = RandomBoolean()
							Instance.Font = RandomEnumItem(Enum.Font)
							Instance.LineHeight = RandomNumber(0, 2)
							Instance.Text = generateRandomString()
							Instance.MaxVisibleGraphemes = RandomNumber(0, #Instance.Text, true)
							Instance.RichText = RandomBoolean()
							Instance.TextColor3 = RandomColor3()
							Instance.TextDirection = RandomEnumItem(Enum.TextDirection)
							Instance.TextScaled = RandomBoolean()
							Instance.TextSize = RandomNumber(0, 100, true)
							Instance.TextStrokeColor3 = RandomColor3()
							Instance.TextStrokeTransparency = RandomNumber(0, 1)
							Instance.TextTruncate = RandomEnumItem(Enum.TextTruncate)
							Instance.TextWrapped = RandomBoolean()
							Instance.TextXAlignment = RandomEnumItem(Enum.TextXAlignment)
							Instance.TextYAlignment = RandomEnumItem(Enum.TextYAlignment)
						end
						if (Instance:IsA("Tool")) then
							Instance.ToolTip = generateRandomString()
							Instance.TextureId = RandomImage()
							Instance.CanBeDropped = RandomBoolean()
							Instance.ManualActivationOnly = RandomBoolean()
							Instance.RequiresHandle = RandomBoolean()
							Instance.Enabled = RandomBoolean()
						elseif (Instance:IsA("HopperBin")) then
							Instance.Active = RandomBoolean()
							Instance.BinType = RandomEnumItem(Enum.BinType)
							Instance.TextureId = RandomImage()
						end
						if Instance:IsA("Accessory") then
							Instance.AccessoryType = RandomEnumItem(Enum.AccessoryType)
						end
						if Instance:IsA("ClickDetector") then
							Instance.MaxActivationDistance = RandomNumber(0, 10000, true)
							Instance.CursorIcon = RandomImage()
						end
						if Instance:IsA("DragDetector") then
							Instance.MaxActivationDistance = RandomNumber(0, 10000, true)
							Instance.DragStyle = RandomEnumItem(Enum.DragDetectorDragStyle)
							Instance.Enabled = RandomBoolean()
							Instance.PermissionPolicy = RandomEnumItem(Enum.DragDetectorPermissionPolicy)
							Instance.ResponseStyle = RandomEnumItem(Enum.DragDetectorResponseStyle)
							Instance.RunLocally = RandomBoolean()
							Instance.MaxDragAngle = RandomNumber(-180, 180)
							Instance.MaxDragTranslation = RandomVector3(-180, 180)
							Instance.MinDragAngle = RandomNumber(-180, 180)
							Instance.MinDragTranslation = RandomVector3(-180, 180)
							Instance.ActivatedCursorIcon = RandomImage()
							Instance.CursorIcon = RandomImage()
							Instance.ApplyAtCenterOfMass = RandomBoolean()
						end
						if Instance:IsA("ForceField") then
							Instance.Visible = RandomBoolean()
						end
						if Instance:IsA("ProximityPrompt") then
							Instance.ActionText = generateRandomString()
							Instance.ClickablePrompt = RandomBoolean()
							Instance.Enabled = RandomBoolean()
							Instance.Exclusivity = RandomEnumItem(Enum.ProximityPromptExclusivity)
							Instance.HoldDuration = RandomNumber(0, 10)
							Instance.MaxActivationDistance = RandomNumber(0, 1000)
							Instance.ObjectText = generateRandomString()
							Instance.RequiresLineOfSight = RandomBoolean()
							Instance.Style = RandomEnumItem(Enum.ProximityPromptStyle)
							Instance.UIOffset = RandomVector2(-5, 5)
						end
						if Instance:IsA("ArcHandles") then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.Visible = RandomBoolean()
						end
						if Instance:IsA("SelectionBox") or Instance:IsA("SelectionSphere") then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.SurfaceColor3 = RandomColor3()
							Instance.SurfaceTransparency = RandomNumber(0, 1)
							Instance.Visible = RandomBoolean()
							if Instance:IsA("SelectionBox") then
								Instance.LineThickness = RandomNumber(0, 1)
							end
						end
						if Instance:IsA("SurfaceSelection") then
							Instance.Color3 = RandomColor3()
							Instance.Transparency = RandomNumber(0, 1)
							Instance.Visible = RandomBoolean()
							Instance.TargetSurface = RandomEnumItem(Enum.NormalId)
						end
						if Instance:IsA("Dialog") then
							Instance.BehaviorType = RandomEnumItem(Enum.DialogBehaviorType)
							Instance.ConversationDistance = RandomNumber(0, 10000)
							Instance.GoodbyeChoiceActive = RandomBoolean()
							Instance.GoodbyeDialog = generateRandomString()
							Instance.InitialPrompt = generateRandomString()
							Instance.InUse = RandomBoolean()
							Instance.Purpose = RandomEnumItem(Enum.DialogPurpose)
							Instance.Tone = RandomEnumItem(Enum.DialogTone)
							Instance.TriggerDistance = RandomNumber(0, 10000)
							Instance.TriggerOffset = RandomVector3(-5, 5)
						end
						if Instance:IsA("DialogChoice") then
							Instance.GoodbyeChoiceActive = RandomBoolean()
							Instance.GoodbyeDialog = generateRandomString()
							Instance.ResponseDialog = generateRandomString()
							Instance.UserDialog = generateRandomString()
						end
						if Instance:IsA("Fire") then
							Instance.Heat = RandomNumber(0, 25)
							Instance.Color = RandomColor3()
							Instance.Enabled = RandomBoolean()
							Instance.SecondaryColor = RandomColor3()
							Instance.Size = RandomNumber(2, 30)
							Instance.TimeScale = RandomNumber(0, 1)
						end
						if Instance:IsA("Sparkles") then
							Instance.SparkleColor = RandomColor3()
							Instance.Enabled = RandomBoolean()
							Instance.TimeScale = RandomNumber(0, 1)
						end
						if Instance:IsA("Smoke") then
							Instance.Opacity = RandomNumber(0, 1)
							Instance.Color = RandomColor3()
							Instance.Enabled = RandomBoolean()
							Instance.RiseVelocity = RandomNumber(0, 25)
							Instance.Size = RandomNumber(0.1, 100)
							Instance.TimeScale = RandomNumber(0, 1)
						end
						if Instance:IsA("Explosion") then
							Instance.BlastPressure = RandomNumber(0, 500000)
							Instance.BlastRadius = RandomNumber(0, 100)
							Instance.DestroyJointRadiusPercent = RandomNumber(0, 100)
							Instance.ExplosionType = RandomEnumItem(Enum.ExplosionType)
							Instance.TimeScale = RandomNumber(0, 1)
							Instance.Visible = RandomBoolean()
						end
						if Instance:IsA("Highlight") then
							Instance.DepthMode = RandomEnumItem(Enum.HighlightDepthMode)
							Instance.FillTransparency = RandomNumber(0, 1)
							Instance.OutlineTransparency = RandomNumber(0, 1)
							Instance.FillColor = RandomColor3()
							Instance.OutlineColor = RandomColor3()
						end
						
						
					
						
						
					end
				end
				if not (Instance:IsDescendantOf(latestScreen)) then
					if not (table.find(BlacklistedInstances, Instance.ClassName)) then
						if (CorruptorSettings.doCoreGUI == false) then
							if not (RunService:IsStudio()) then
								if not (Instance:IsDescendantOf(game:GetService("CoreGui"))) then
									corrupt()
								end
							end
						else 
							corrupt()
						end
					end
				end
			end
			if CorruptorSettings.delayPerInstance <= 0 then
				RunService.PreRender:Wait()
			else 
				task.wait(CorruptorSettings.delayPerInstance)
			end
		end
	end)
end})


-- // Anti-Aim Tab

local Anti_Aim_Section_1 = Anti_Aim_Tab:section({name = "Anti-Aim",side = "left",size = 485})
local Anti_Aim_Section_2 = Anti_Aim_Tab:section({name = "Other",side = "right",size = 65})

local AASettings_Other = {
	AntiLock = false,
	AntiFling = false,
}
Anti_Aim_Section_2:toggle({name = "Anti-Lock",def = false,callback = function(value)
	AASettings_Other.AntiLock = value
end})
Anti_Aim_Section_2:toggle({name = "Anti-Fling",def = false,callback = function(value)
	AASettings_Other.AntiFling = value
end})

RunService.PreRender:Connect(function()
	if AASettings_Other.AntiLock then
		local char = LocalPlayer.Character
		if char ~= nil then
			for i, part in pairs(char:GetDescendants()) do
				if part:IsA("BasePart") then
					local vel = 1500
					part.AssemblyLinearVelocity = Vector3.new(part.AssemblyLinearVelocity.X, -vel, part.AssemblyLinearVelocity.Z)
					part.Massless = false
					part.CustomPhysicalProperties = PhysicalProperties.new(100, 2, 0, 100, 0)
				end
			end
			local hum = char:FindFirstChildWhichIsA("Humanoid")
			if hum and hum ~= nil then
				hum:ChangeState(Enum.HumanoidStateType.Running)
			end
		end
	end
	if AASettings_Other.AntiFling then
		for i, player in pairs(plrs:GetPlayers()) do
			local char = player.Character
			if char and char ~= nil then
				for i, v in pairs(char:GetChildren()) do
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end
			end
		end
	end
end)

local AASettings = {
	Enabled = false,
	ModifyYaw = false,
	BaseYaw = 0,
	Relative = "-",
	YawSpin = 0,
	YawJitter = 0,
	ModifyPitch = false,
	BasePitch = 0,
	PitchSpin = 0,
	PitchJitter = 0,
	ModifyRoll = false,
	BaseRoll = 0,
	RollSpin = 0,
	RollJitter = 0,
	FakeLag = 0,
	FakeLagVariation = 0,
}

Anti_Aim_Section_1:toggle({name = "Enabled",def = false,callback = function(value)
	AASettings.Enabled = value
end})
Anti_Aim_Section_1:toggle({name = "Modify Yaw",def = false,callback = function(value)
	AASettings.ModifyYaw = value
end})
Anti_Aim_Section_1:slider({name = "Base Yaw",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.BaseYaw = value
end})
Anti_Aim_Section_1:dropdown({name = "Relative To",def = "-",max = 99,options = {"-", "Camera", "Mouse"},callback = function(chosen)
	AASettings.Relative = chosen
end})
Anti_Aim_Section_1:slider({name = "Yaw Spin",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.YawSpin = value
end})
Anti_Aim_Section_1:slider({name = "Yaw Jitter",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.YawJitter = value
end})
Anti_Aim_Section_1:toggle({name = "Modify Pitch [!]",def = false,callback = function(value)
	AASettings.ModifyPitch = value
end})
Anti_Aim_Section_1:slider({name = "Base Pitch",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.BasePitch = value
end})
Anti_Aim_Section_1:slider({name = "Pitch Spin",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.PitchSpin = value
end})
Anti_Aim_Section_1:slider({name = "Pitch Jitter",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.PitchJitter = value
end})
Anti_Aim_Section_1:toggle({name = "Modify Roll [!]",def = false,callback = function(value)
	AASettings.ModifyRoll = value
end})
Anti_Aim_Section_1:slider({name = "Base Roll",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.BaseRoll = value
end})
Anti_Aim_Section_1:slider({name = "Roll Spin",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.RollSpin = value
end})
Anti_Aim_Section_1:slider({name = "Roll Jitter",def = 0, max = 180,min = -180,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.RollJitter = value
end})
Anti_Aim_Section_1:slider({name = "Fake Lag",def = 0, max = 100,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.FakeLag = value
end})
Anti_Aim_Section_1:slider({name = "Fake Lag Variation",def = 0, max = 100,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	AASettings.FakeLagVariation = value
end})

local CurrentYawSpin = 0
local CurrentRollSpin = 0
local CurrentPitchSpin = 0
local LatestCFrame = nil
local LatestFakeLagStep = 0
task.spawn(function()
	RunService.PreRender:Connect(function()
		LatestFakeLagStep += 1
		local Target = AASettings.FakeLag
		Target += math.random(-AASettings.FakeLagVariation, AASettings.FakeLagVariation)
		if LatestFakeLagStep >= Target then
			LatestFakeLagStep = 0
		end
		
		CurrentYawSpin += AASettings.YawSpin
		CurrentRollSpin += AASettings.RollSpin
		CurrentPitchSpin += AASettings.PitchSpin
		if CurrentYawSpin >= 180 then
			CurrentYawSpin = -180
		end
		if CurrentRollSpin >= 180 then
			CurrentRollSpin = -180
		end
		if CurrentPitchSpin >= 180 then
			CurrentPitchSpin = -180
		end
		if AASettings.YawSpin == 0 then
			CurrentYawSpin = 0
		end
		if AASettings.RollSpin == 0 then
			CurrentRollSpin = 0
		end
		if AASettings.PitchSpin == 0 then
			CurrentPitchSpin = 0
		end
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Root, Humanoid = Character:FindFirstChild("HumanoidRootPart"), Character:FindFirstChildWhichIsA("Humanoid")
			if Root and Humanoid then
				if AASettings.Enabled and Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
					Root.AssemblyAngularVelocity = Vector3.zero
					
					local Pitch = Root.Orientation.X
					local Roll = Root.Orientation.Z
					if AASettings.ModifyPitch then
						Pitch = (AASettings.BasePitch + CurrentPitchSpin + (Random.new():NextNumber(-AASettings.PitchJitter, AASettings.PitchJitter)))
					end
					if AASettings.ModifyRoll then
						Roll = (AASettings.BaseRoll + CurrentRollSpin + (Random.new():NextNumber(-AASettings.RollJitter, AASettings.RollJitter)))
					end
					local Yaw = Root.Orientation.Y
					if AASettings.ModifyYaw or AASettings.Relative ~= "-" then
						Yaw = (AASettings.BaseYaw + CurrentYawSpin + (Random.new():NextNumber(-AASettings.YawJitter, AASettings.YawJitter)))
					end
					if LatestFakeLagStep == 0 then
						LatestCFrame =  CFrame.Angles(math.rad(Pitch), math.rad(Yaw), math.rad(Roll))
					end
				end
			end
		end
		if Character ~= nil then
			local Root = Character:FindFirstChild("HumanoidRootPart")
			if Root then
				if AASettings.Enabled and LatestCFrame ~= nil then
					if AASettings.Relative == "Camera" then
						Root:PivotTo(CFrame.new(Root.Position, Vector3.new(workspace.CurrentCamera.CFrame.Position.X, Root.Position.Y, workspace.CurrentCamera.CFrame.Position.Z)) * LatestCFrame)
					elseif AASettings.Relative == "Mouse" then
						if Mouse.Hit == nil then return end
						Root:PivotTo(CFrame.new(Root.Position, Vector3.new(Mouse.Hit.Position.X, Root.Position.Y, Mouse.Hit.Position.Z)) * LatestCFrame)
					else
						Root:PivotTo(CFrame.new(Root.Position) * LatestCFrame)
					end
				end
			end
		end
	end)
end)


-- // Combat Tab

local Combat_Tab_Reach = Combat_Tab:section({name = "Reach",side = "left",size = 545})
local Combat_Tab_ToolManager = Combat_Tab:section({name = "Tool Manager",side = "right",size = 225})
local Combat_Tab_Other = Combat_Tab:section({name = "Other",side = "right",size = 45})

Combat_Tab_Other:button({name = "Wallbang",callback = function()
	task.spawn(function()
		local analyze = function(BasePart: BasePart)
			if (BasePart and BasePart:IsA("BasePart") and not (BasePart:FindFirstChildWhichIsA("TouchTransmitter")) and not (BasePart:FindFirstAncestorWhichIsA("Tool")) and BasePart.Name ~= "__FL0ATP4RT" and BasePart.Name ~= "AntiVoidPart" and (not BasePart:IsA("Terrain")) and not (BasePart:HasTag("Wallbang"))) then
				local Model = BasePart:FindFirstAncestorWhichIsA("Model")
				local Humanoid
				if Model and Model ~= nil and (not Model:IsA("DataModel") and not Model:IsA("Workspace")) then
					Humanoid = Model:FindFirstChildWhichIsA("Humanoid", true)
				else 
					Humanoid = BasePart:FindFirstChildWhichIsA("Humanoid", true)
				end
				if Humanoid == nil then
					pcall(function()
						Lock(BasePart, "CanQuery", false)
						Lock(BasePart, "CanTouch", false)
						Lock(BasePart, "Parent", workspace.CurrentCamera)
					end)
				end
			end
		end
		for index, object in pairs(workspace:GetDescendants()) do
			analyze(object)
		end
		workspace.DescendantAdded:Connect(analyze)
	end)
end})

local ReachSettings = {
	GripTeleport = false,
	GripTeleportOffsetX = 0,
	GripTeleportOffsetY = 0,
	GripTeleportOffsetZ = 0,
	GripTeleportTargetPlayer = "",
	
	RanGrip = false,
	Always = false,
	Enabled = false,
	XSize = 1,
	YSize = 1,
	ZSize = 1,
	Hitbox = false,
	HitboxOutlineThickness = 0.01,
	HitboxOutlineColor = Color3.fromRGB(255, 255, 255),
	HitboxOutlineTransparency = 0,
	HitboxSurfaceColor = Color3.fromRGB(255, 255, 255),
	HitboxSurfaceTransparency = 0.75
}

Combat_Tab_Reach:toggle({name = "Grip Teleport",def = false,callback = function(value)
	ReachSettings.GripTeleport = value
end})
Combat_Tab_Reach:textbox({name = "Grip TP X Offset",def = "0",placeholder = "Enter X Offset",callback = function(value)
	pcall(function() ReachSettings.GripTeleportOffsetX = tonumber(value) end)
end})
Combat_Tab_Reach:textbox({name = "Grip TP Y Offset",def = "0",placeholder = "Enter Y Offset",callback = function(value)
	pcall(function() ReachSettings.GripTeleportOffsetY = tonumber(value) end)
end})
Combat_Tab_Reach:textbox({name = "Grip TP Z Offset",def = "0",placeholder = "Enter Z Offset",callback = function(value)
	pcall(function() ReachSettings.GripTeleportOffsetZ = tonumber(value) end)
end})
Combat_Tab_Reach:textbox({name = "Grip TP Target Player",def = "",placeholder = "Erase all to stop targetting!",callback = function(value)
	ReachSettings.GripTeleportTargetPlayer = value
end})

Combat_Tab_Reach:toggle({name = "Randomize Grip",def = false,callback = function(value)
	ReachSettings.RanGrip = value
end})
Combat_Tab_Reach:toggle({name = "Always Enabled",def = false,callback = function(value)
	ReachSettings.Always = value
end})
Combat_Tab_Reach:toggle({name = "Reach Enabled",def = false,callback = function(value)
	ReachSettings.Enabled = value
end})
Combat_Tab_Reach:textbox({name = "X Size",def = "1",placeholder = "Enter X Size",callback = function(value)
	pcall(function() ReachSettings.XSize = tonumber(value) end)
end})
Combat_Tab_Reach:textbox({name = "Y Size",def = "1",placeholder = "Enter Y Size",callback = function(value)
	pcall(function() ReachSettings.YSize = tonumber(value) end)
end})
Combat_Tab_Reach:textbox({name = "Z Size",def = "1",placeholder = "Enter Z Size",callback = function(value)
	pcall(function() ReachSettings.ZSize = tonumber(value) end)
end})
Combat_Tab_Reach:toggle({name = "Visualize Hitbox",def = false,callback = function(value)
	ReachSettings.Hitbox = value
end})
Combat_Tab_Reach:textbox({name = "Hitbox Outline Thickness",def = "0.01",placeholder = "Enter Thickness",callback = function(value)
	pcall(function() ReachSettings.HitboxOutlineThickness = tonumber(value) end)
end})
Combat_Tab_Reach:colorpicker({name = "Hitbox Outline Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	ReachSettings.HitboxOutlineColor = value
end})
Combat_Tab_Reach:slider({name = "Hitbox Outline Transparency",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	ReachSettings.HitboxOutlineTransparency = value
end})
Combat_Tab_Reach:colorpicker({name = "Hitbox Surface Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	ReachSettings.HitboxSurfaceColor = value
end})
Combat_Tab_Reach:slider({name = "Hitbox Surface Transparency",def = 0.75, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	ReachSettings.HitboxSurfaceTransparency = value
end})

local cachedHumanoids = {}
task.spawn(function(cache)
	local analyze = function(hum: Humanoid)
		if not (hum:HasTag("r3fl_ignore")) then
			if hum:IsA("Humanoid") then
				local char = LocalPlayer.Character
				if char ~= nil then
					if hum:IsDescendantOf(char) then
						return
					end
				end
				hum:AddTag("r3fl_ignore")
				table.insert(cachedHumanoids, hum)
			end
		end
	end
	for i, v in pairs(workspace:GetDescendants()) do
		analyze(v)
	end
	workspace.DescendantAdded:Connect(analyze)
end)
local getNearest = function(ignoreDead, requiresAnimator, target)
	local nearestDist = math.huge
	local nearestDistVector = nil
	local nearestPart = nil
	local ourchar = LocalPlayer.Character
	if ourchar ~= nil then
		local ourroot = ourchar:FindFirstChild("HumanoidRootPart")
		if ourroot and ourroot:IsA("BasePart") then
			pcall(function()
				for index, humanoid: Humanoid in pairs(cachedHumanoids) do
					local valid = true
					if ignoreDead then
						if not (humanoid.Health >= 0 and humanoid:GetState() ~= Enum.HumanoidStateType.Dead) then
							valid = false
						end
					end
					if requiresAnimator then
						if not (humanoid:FindFirstChildWhichIsA("Animator")) then
							valid = false
						end
					end
					if target ~= nil and target ~= "" and not (string.find(target, " ")) then
						if not (humanoid:FindFirstAncestor(target)) then
							valid = false
						end
					end
					if valid then
						local character = humanoid.Parent
						if character and character ~= nil and not (character:IsA("DataModel") or character:IsA("Workspace")) then
							local root = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Head")
							if root then
								local dist = (root.Position - ourroot.Position).Magnitude
								local distvector = (root.Position - ourroot.Position)
								if dist < nearestDist then
									nearestDistVector = distvector
									nearestDist = dist
									nearestPart = root
								end
							end
						end
					end
				end
			end)
		end
	end
	return nearestPart, nearestDist, nearestDistVector
end

task.spawn(function(Reach)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Tool = Character:FindFirstChildWhichIsA("Tool")
			if Tool then
				local Root = Character:FindFirstChild("HumanoidRootPart") or Character:FindFirstChild("Head")
				if Root then
					if ReachSettings.GripTeleport then
						local NearestRootPart, NearestRootPartDistance, NearestRootPartDistanceVector = getNearest(true, true, ReachSettings.GripTeleportTargetPlayer)
						local Handle = Tool:FindFirstChild("Handle")
						if Handle and Handle ~= nil and NearestRootPart and NearestRootPart ~= nil and NearestRootPart:FindFirstAncestorWhichIsA("Workspace") then
							local RightArm = Character:FindFirstChild("Right Arm")
							if RightArm then
								local RightGrip = RightArm:FindFirstChild("RightGrip")
								if RightGrip then
									RightGrip:Destroy()
								end
							end
							for Index, Joint in pairs(Handle:GetJoints()) do
								Joint:Destroy()
							end
							local Offset = Vector3.new(ReachSettings.GripTeleportOffsetX, ReachSettings.GripTeleportOffsetY, ReachSettings.GripTeleportOffsetZ)
							Handle.CFrame = NearestRootPart.CFrame + Offset
							if Offset.Magnitude > 0 then
								Handle.CFrame = CFrame.lookAt(Handle.CFrame.Position, NearestRootPart.CFrame.Position)
							else
								Handle.Orientation = Vector3.new(Random.new():NextNumber(-180, 180), Random.new():NextNumber(-180, 180), Random.new():NextNumber(-180, 180))
							end
							Handle.Velocity = Vector3.zero
							Handle.CanCollide = false
						else
							local RightArm = Character:FindFirstChild("Right Arm")
							if RightArm then
								local RightGrip = RightArm:FindFirstChild("RightGrip")
								if RightGrip then
									RightGrip:Destroy()
								end
							end
							for Index, Joint in pairs(Handle:GetJoints()) do
								Joint:Destroy()
							end
							local Offset = Vector3.new(ReachSettings.GripTeleportOffsetX, ReachSettings.GripTeleportOffsetY, ReachSettings.GripTeleportOffsetZ)
							Handle.CFrame = Root.CFrame + Offset
							if Offset.Magnitude > 0 then
								Handle.CFrame = CFrame.lookAt(Handle.CFrame.Position, Root.CFrame.Position)
							else
								Handle.Orientation = Vector3.new(Random.new():NextNumber(-180, 180), Random.new():NextNumber(-180, 180), Random.new():NextNumber(-180, 180))
							end
							Handle.Velocity = Vector3.zero
							Handle.CanCollide = false
						end
					end
				end
				if ReachSettings.Always then
					Tool.Enabled = true
				end
				if ReachSettings.RanGrip then
					local ReturnRandomVector3 = function()
						return Vector3.new(
							Random.new():NextNumber(0, 1),
							Random.new():NextNumber(0, 1),
							Random.new():NextNumber(0, 1)
						)
					end
					Tool.GripUp = ReturnRandomVector3()
					Tool.GripRight = ReturnRandomVector3()
					Tool.GripForward = ReturnRandomVector3()
					Tool.GripPos = ReturnRandomVector3()
				end
				local Handle = Tool:FindFirstChild("Handle")
				if Handle then
					if ReachSettings.Enabled then
						Handle.Size = Vector3.new(ReachSettings.XSize, ReachSettings.YSize, ReachSettings.ZSize)
						Handle.CanCollide = false
						Handle.Locked = false
						Handle.CanQuery = true
						Handle.CanTouch = true
						Handle.Archivable = true
						Handle.Massless = true
						Handle.Material = Enum.Material.Air
						Handle.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0, 0, 0, 0)
						Handle.CastShadow = false
					end
					local HitboxVisualizer = Handle:FindFirstChild("__H1TB0X")
					if not HitboxVisualizer then
						HitboxVisualizer = Instance.new("SelectionBox", Handle)
						HitboxVisualizer.Name = "__H1TB0X"
					end
					HitboxVisualizer.Visible = ReachSettings.Hitbox
					HitboxVisualizer.Adornee = Handle
					HitboxVisualizer.Color3 = ReachSettings.HitboxOutlineColor
					HitboxVisualizer.SurfaceColor3 = ReachSettings.HitboxSurfaceColor
					HitboxVisualizer.SurfaceTransparency = ReachSettings.HitboxSurfaceTransparency
					HitboxVisualizer.Transparency = ReachSettings.HitboxOutlineTransparency
					HitboxVisualizer.LineThickness = ReachSettings.HitboxOutlineThickness
				end
			end
		end
	end)
end)



Combat_Tab_ToolManager:button({name = "Grab All Dropped",callback = function()
	for Index, Tool: Tool in pairs(workspace:GetChildren()) do
		if Tool:IsA("Tool") then
			local Character = LocalPlayer.Character
			if Character ~= nil then
				local Root = Character:FindFirstChild("HumanoidRootPart", true)
				local Humanoid = Character:FindFirstChildWhichIsA("Humanoid", true)
				if Root then
						--[[local ogPos = Root.CFrame
						local ogVel = Root.Velocity
						Root.CFrame = Handle.CFrame + Handle.AssemblyLinearVelocity
						Root.Velocity = Vector3.zero
						task.wait(0.1)
						Root.CFrame = ogPos
						Root.Velocity = ogVel
						if Humanoid then
							Humanoid:ChangeState(Enum.HumanoidStateType.Running)
						end]]--
					Tool:PivotTo(Root.CFrame)
					Humanoid:ChangeState(Enum.HumanoidStateType.Running)
				end
			end
		end
	end
end})
Combat_Tab_ToolManager:button({name = "Equip All",callback = function()
	for Index, Tool: Tool in pairs(LocalPlayer.Backpack:GetChildren()) do
		if Tool:IsA("Tool") then
			local Character = LocalPlayer.Character
			if Character ~= nil then
				Tool.Parent = Character
			end
		end
	end
end})
Combat_Tab_ToolManager:button({name = "Drop All",callback = function()
	local Tools = {}
	for Index, Tool: Tool in pairs(LocalPlayer.Backpack:GetChildren()) do
		if Tool:IsA("Tool") then
			table.insert(Tools, Tool)
		end
	end
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Tool: Tool in pairs(Character:GetChildren()) do
			if Tool:IsA("Tool") then
				table.insert(Tools, Tool)
			end
		end
	end
	for Index, Tool in pairs(Tools) do
		Tool.CanBeDropped = true
		Tool.Parent = workspace
	end
end})
Combat_Tab_ToolManager:button({name = "Drop Equipped",callback = function()
	local Tools = {}
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Tool: Tool in pairs(Character:GetChildren()) do
			if Tool:IsA("Tool") then
				table.insert(Tools, Tool)
			end
		end
	end
	for Index, Tool in pairs(Tools) do
		Tool.CanBeDropped = true
		Tool.Parent = workspace
	end
end})
Combat_Tab_ToolManager:button({name = "Drop Un-equipped",callback = function()
	local Tools = {}
	for Index, Tool: Tool in pairs(LocalPlayer.Backpack:GetChildren()) do
		if Tool:IsA("Tool") then
			table.insert(Tools, Tool)
		end
	end
	for Index, Tool in pairs(Tools) do
		Tool.CanBeDropped = true
		Tool.Parent = workspace
	end
end})
local SpamCons = {}
Combat_Tab_ToolManager:button({name = "Spam Equipped / Stop Spam",callback = function()

	local ConsCount = 0
	for Index, Con in pairs(SpamCons) do
		ConsCount += 1
		Con:Disconnect()
		Con = nil
		table.remove(SpamCons, table.find(SpamCons, Con))
	end
	if ConsCount ~= 0 then
		return
	end

	local Tools = {}
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Tool: Tool in pairs(Character:GetChildren()) do
			if Tool:IsA("Tool") then
				table.insert(Tools, Tool)
			end
		end
	end
	for Index, Tool in pairs(Tools) do
		local Con = RunService.PreRender:Connect(function()
			Tool:Activate()
			Tool:Deactivate()
		end)
		table.insert(SpamCons, Con)
	end
end})
Combat_Tab_ToolManager:button({name = "Spam All / Stop Spam",callback = function()
	
	local ConsCount = 0
	for Index, Con in pairs(SpamCons) do
		ConsCount += 1
		Con:Disconnect()
		Con = nil
		table.remove(SpamCons, table.find(SpamCons, Con))
	end
	if ConsCount ~= 0 then
		return
	end
	
	local Tools = {}
	for Index, Tool: Tool in pairs(LocalPlayer.Backpack:GetChildren()) do
		if Tool:IsA("Tool") then
			table.insert(Tools, Tool)
		end
	end
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Tool: Tool in pairs(Character:GetChildren()) do
			if Tool:IsA("Tool") then
				table.insert(Tools, Tool)
			end
		end
	end
	for Index, Tool in pairs(Tools) do
		local Con = RunService.PreRender:Connect(function()
			if Character ~= nil then
				Tool.Parent = Character
			end
			Tool:Activate()
			Tool:Deactivate()
		end)
		table.insert(SpamCons, Con)
	end
end})
Combat_Tab_ToolManager:button({name = "Use All",callback = function()
	local Tools = {}
	for Index, Tool: Tool in pairs(LocalPlayer.Backpack:GetChildren()) do
		if Tool:IsA("Tool") then
			table.insert(Tools, Tool)
		end
	end
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Tool: Tool in pairs(Character:GetChildren()) do
			if Tool:IsA("Tool") then
				table.insert(Tools, Tool)
			end
		end
	end
	for Index, Tool in pairs(Tools) do
		if Character ~= nil then
			Tool.Parent = Character
		end
		Tool:Activate()
		Tool:Deactivate()
	end
end})

-- // Scripts Tab

local Scripts_Tab_Executor = Scripts_Tab:section({name = "Executor",side = "left",size = 85})
local Scripts_Tab_Other = Scripts_Tab:section({name = "Other",side = "right",size = 180})
local Scripts_Tab_Realism = Scripts_Tab:section({name = "Realism",side = "left",size = 415})

local mr = false
local rt = Enum.ReverbType.GenericReverb
Scripts_Tab_Realism:toggle({name = "Modify Reverb",def = false,callback = function(value)
	mr = value
end})
local reverbs = {}
for index, enumitem in pairs(Enum.ReverbType:GetEnumItems()) do
	local str = string.gsub(tostring(enumitem), "Enum.ReverbType.", "")
	table.insert(reverbs, str)
end
Scripts_Tab_Realism:dropdown({name = "Reverb Type",def = "GenericReverb",max = 100,options = reverbs,callback = function(chosen)
	rt = Enum.ReverbType[chosen]
end})

task.spawn(function()
	RunService.PreRender:Connect(function()
		if mr then
			game:GetService("SoundService").AmbientReverb = rt
		end
	end)
end)

local hw = false
Scripts_Tab_Realism:button({name = "Head Waist (R6/R15)",callback = function()
	if hw == false then
		hw = true
		local headwaist = function()
			pcall(function() wait() local s=CFrame.Angles local h=math.asin local i=math.atan local j=game.Workspace.CurrentCamera local k=game.Players.LocalPlayer local g=k:GetMouse() local v=k.Character or k.CharacterAdded:wait() local r=v:WaitForChild("\x48\x65\x61\x64") local f=v:WaitForChild("\x48\x75\x6D\x61\x6E\x6F\x69\x64") local m=v:WaitForChild("\x48\x75\x6D\x61\x6E\x6F\x69\x64\x52\x6F\x6F\x74\x50\x61\x72\x74") local u=(f.RigType.Value==0) local e=(u and v:WaitForChild("\x54\x6F\x72\x73\x6F"))or v:WaitForChild("\x55\x70\x70\x65\x72\x54\x6F\x72\x73\x6F") local w=(u and e:WaitForChild("\x4E\x65\x63\x6B"))or r:WaitForChild("\x4E\x65\x63\x6B") local q=(not u and e:WaitForChild("\x57\x61\x69\x73\x74")) local _=false local a=false local p=1 local n=0.6 local d=0.5 local b=0.4 local t=0.5 local l=w.C0 local c=(not u and q.C0) w.MaxVelocity=1/3 if a==true then _=true p=0 d=0 end game:GetService("\x52\x75\x6E\x53\x65\x72\x76\x69\x63\x65").PreRender:Connect(function()local o=j.CoordinateFrame if((u and v["\x54\x6F\x72\x73\x6F"])or v["\x55\x70\x70\x65\x72\x54\x6F\x72\x73\x6F"])~=nil and v["\x48\x65\x61\x64"]~=nil then local a=e.CFrame.lookVector local e=r.CFrame.p if u and w or w and q then if j.CameraSubject:IsDescendantOf(v)or j.CameraSubject:IsDescendantOf(k)then local j=nil local f=nil if not _ then j=(r.CFrame.p-o.p).magnitude f=r.CFrame.Y-o.Y if not u then w.C0=w.C0:lerp(l*s((h(f/j)*n),-(((e-o.p).Unit):Cross(a)).Y*p,0),t/2) q.C0=q.C0:lerp(c*s((h(f/j)*b),-(((e-o.p).Unit):Cross(a)).Y*d,0),t/2)else w.C0=w.C0:lerp(l*s(-(h(f/j)*n),0,-(((e-o.p).Unit):Cross(a)).Y*p),t/2)end else local _=g.Hit.p j=(r.CFrame.p-_).magnitude f=r.CFrame.Y-_.Y if not u then w.C0=w.C0:lerp(l*s(-(i(f/j)*n),(((e-_).Unit):Cross(a)).Y*p,0),t/2) q.C0=q.C0:lerp(c*s(-(i(f/j)*b),(((e-_).Unit):Cross(a)).Y*d,0),t/2)else w.C0=w.C0:lerp(l*s((i(f/j)*n),0,(((e-_).Unit):Cross(a)).Y*p),t/2)end end end end end if a==true then f.AutoRotate=false m.CFrame=m.CFrame:lerp(CFrame.new(m.Position,Vector3.new(g.Hit.p.x,m.Position.Y,g.Hit.p.z)),t/2)else f.AutoRotate=true end end) end)
		end
		headwaist()
		LocalPlayer.CharacterAdded:Connect(function()
			headwaist()
		end)
	end
end})

local ct = false
Scripts_Tab_Realism:button({name = "Character Tilt (R6)",callback = function()
	if ct == false then
		ct = true
		local ct = function()
			pcall(function()
				repeat
					wait()
				until game.Players.LocalPlayer.Character
				game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
				game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
				game.Players.LocalPlayer.Character.HumanoidRootPart:WaitForChild("RootJoint")

				--Settings--
				RotationPowerFrontBack = 0.15 --multiplies rotation by RotationPower
				RotationPowerLeftRight = 0.15 --multiplies rotation by RotationPower
				RotationSpeed = 0.1
				OriginalC0 = game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint.C0

				game:GetService("RunService").PreRender:Connect(function(step)
					pcall(function()
						local DotFrontBack = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector:Dot(game.Players.LocalPlayer.Character.Humanoid.MoveDirection)
						local DotLeftRight = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector:Dot(game.Players.LocalPlayer.Character.Humanoid.MoveDirection)
						game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint.C0 = game.Players.LocalPlayer.Character.HumanoidRootPart.RootJoint.C0:Lerp(OriginalC0 * CFrame.Angles(DotFrontBack*RotationPowerFrontBack,-DotLeftRight*RotationPowerLeftRight,0),RotationSpeed)
					end)
				end)
			end)
		end
		ct()
		LocalPlayer.CharacterAdded:Connect(function()
			ct()
		end)
	end
end})

local ft = false
Scripts_Tab_Realism:button({name = "Footplanting (R6)",callback = function()
	if ft == false then
		ft = true
		local ft = function()
			pcall(function()
				local RunService = game:GetService('RunService')

				local Player = game.Players.LocalPlayer
				local Character = Player.Character
				local Humanoid = Character:WaitForChild('Humanoid')
				local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
				local Torso = Character:WaitForChild('Torso')

				-- Original C0 Reference

				local RootJointOriginalC0 = HumanoidRootPart.RootJoint.C0
				local NeckOriginalC0 = Torso.Neck.C0
				local RightHipOriginalC0 = Torso['Right Hip'].C0
				local LeftHipOriginalC0 = Torso['Left Hip'].C0

				local PlayersTable = {}

				--Customizable Settings

				local RangeOfMotion = 45
				local RangeOfMotionTorso = 90 - RangeOfMotion
				local RangeOfMotionXZ = RangeOfMotion/140
				local LerpSpeed = 0.005

				--Main Code

				RangeOfMotion = math.rad(RangeOfMotion)
				RangeOfMotionTorso = math.rad(RangeOfMotionTorso)

				function Calculate( dt, HumanoidRootPart, Humanoid, Torso )

					pcall(function()
						local DirectionOfMovement = HumanoidRootPart.CFrame:VectorToObjectSpace( HumanoidRootPart.AssemblyLinearVelocity )
						DirectionOfMovement = Vector3.new( DirectionOfMovement.X / Humanoid.WalkSpeed, 0, DirectionOfMovement.Z / Humanoid.WalkSpeed )

						local XResult = ( DirectionOfMovement.X * (RangeOfMotion - (math.abs( DirectionOfMovement.Z ) * (RangeOfMotion / 2) ) ) )
						local XResultTorso = ( DirectionOfMovement.X * (RangeOfMotionTorso - (math.abs( DirectionOfMovement.Z ) * (RangeOfMotionTorso / 2) ) ) )
						local XResultXZ = ( DirectionOfMovement.X * (RangeOfMotionXZ - (math.abs( DirectionOfMovement.Z ) * (RangeOfMotionXZ / 2) ) ) )

						if DirectionOfMovement.Z > 0.1 then

							XResult *= -1
							XResultTorso *= -1
							XResultXZ *= -1

						end

						local RightHipResult = RightHipOriginalC0 * CFrame.new(-XResultXZ, 0, -math.abs(XResultXZ) + math.abs( -XResultXZ ) ) * CFrame.Angles( 0, -XResult, 0 )
						local LeftHipResult = LeftHipOriginalC0 * CFrame.new(-XResultXZ, 0, -math.abs(-XResultXZ) + math.abs( -XResultXZ ) ) * CFrame.Angles( 0, -XResult, 0 )
						local RootJointResult = RootJointOriginalC0 * CFrame.Angles( 0, 0, -XResultTorso )
						local NeckResult = NeckOriginalC0 * CFrame.Angles( 0, 0, XResultTorso )

						local LerpTime = 1 - LerpSpeed ^ dt

						Torso['Right Hip'].C0 = Torso['Right Hip'].C0:Lerp(RightHipResult, LerpTime)
						Torso['Left Hip'].C0 = Torso['Left Hip'].C0:Lerp(LeftHipResult, LerpTime)
						HumanoidRootPart.RootJoint.C0 = HumanoidRootPart.RootJoint.C0:Lerp(RootJointResult, LerpTime)
						Torso.Neck.C0 = Torso.Neck.C0:Lerp(NeckResult, LerpTime)
					end)

				end

				RunService.PreRender:Connect(function(dt)

					pcall(function()
						for _, Player in game.Players:GetPlayers() do

							if Player.Character == nil then continue end
							if table.find( PlayersTable, Player ) then continue end
							table.insert(PlayersTable, Player)

						end

						for i, Player in pairs(PlayersTable) do

							if Player == nil then

								table.remove( PlayersTable, i )
								continue

							end


							if game.Players:FindFirstChild(Player.Name) == nil then

								table.remove( PlayersTable, i )
								continue

							end


							if Player.Character == nil then

								table.remove( PlayersTable, i )
								continue

							end

							local HumanoidRootPart = Player.Character:FindFirstChild('HumanoidRootPart')
							local Humanoid = Player.Character:FindFirstChild('Humanoid')
							local Torso = Player.Character:FindFirstChild('Torso')

							if HumanoidRootPart == nil or Humanoid == nil or Torso == nil then
								continue
							end

							Calculate(dt, HumanoidRootPart, Humanoid, Torso)

						end
					end)

				end)
			end)
		end
		ft()
		LocalPlayer.CharacterAdded:Connect(function()
			ft()
		end)
	end
end})
local ikft = false
Scripts_Tab_Realism:button({name = "IK Footplanting (R6)",callback = function()
	if ikft == false then
		ikft = true
		local ikft = function()
			pcall(function()
				-- Place inside StarterCharacterScripts
				-- ailenkai
				-- 9/29/24

				local ps, rs = game:GetService("Players"), game:GetService("RunService")
				local plr, mdl = ps.LocalPlayer, ps.LocalPlayer.Character or ps.LocalPlayer.CharacterAdded:Wait()
				local parts = {
					Root = mdl:WaitForChild("HumanoidRootPart"),
					Torso = mdl:WaitForChild("Torso"),
					RLeg = mdl:WaitForChild("Right Leg"),
					LLeg = mdl:WaitForChild("Left Leg"),
					RHip = mdl:FindFirstChild("Right Hip", true),
					LHip = mdl:FindFirstChild("Left Hip", true)
				}

				function createAttach(name, offset, parent)
					local att = Instance.new("Attachment")
					att.CFrame = CFrame.new(offset)
					att.Name = name
					att.Parent = parent
					return att
				end

				local attach = {
					IKR = createAttach("IKR", Vector3.new(0.5, -3, 0), parts.Root),
					IKL = createAttach("IKL", Vector3.new(-0.5, -3, 0), parts.Root),
					RHip = createAttach("RHip", Vector3.new(-0.5, -1, 0), parts.Torso),
					LHip = createAttach("LHip", Vector3.new(0.5, -1, 0), parts.Torso)
				}

				local origC1 = {L = parts.LHip.C1, R = parts.RHip.C1}
				local rayParams = RaycastParams.new({FilterDescendantsInstances = {mdl}, FilterType = Enum.RaycastFilterType.Exclude})

				function adjC1(motor, orig, tPos, fPos, leg)
					local legHeight = -1
					local limitDistance = 1.5 
					local distance = (fPos - tPos).Magnitude

					if distance <= limitDistance then
						local newC1 = orig * CFrame.new(0, (fPos - tPos).Y + legHeight, 0)
						motor.C1 = motor.C1:Lerp(newC1, 0.1)
					end
				end

				function processLeg(leg, tgt, motor, orig, hip)
					local res = workspace:Raycast(leg.Position+Vector3.new(0,0.2,0), -leg.CFrame.UpVector * 5, rayParams)
					local pos = res and res.Position or leg.CFrame.Position - leg.CFrame.UpVector * (leg.Size.Y / 2)
					local distance = (pos - leg.Position).Magnitude
					local maxDistance = leg.Size.Y
					tgt.WorldCFrame = CFrame.new(pos)
					if distance <= maxDistance then
						adjC1(motor, orig, pos, leg.Position, leg)
					else
						motor.C1 = motor.C1:Lerp(orig, 0.1)
					end
				end

				rs.Stepped:Connect(function()
					pcall(function()
						processLeg(parts.RLeg, attach.IKR, parts.RHip, origC1.R, attach.RHip)
						processLeg(parts.LLeg, attach.IKL, parts.LHip, origC1.L, attach.LHip)
					end)
				end)
			end)
		end
		ikft()
		LocalPlayer.CharacterAdded:Connect(function()
			ikft()
		end)
	end
end})

local rev = false
local rself = false
Scripts_Tab_Realism:button({name = "Ragdoll Self (R6/R15)",callback = function()
	if rself == false and rev == false then
		rself = true
		rev = true
		local rself = function()
			pcall(function()
				local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
				local humanoid = char:WaitForChild("Humanoid")

				humanoid.BreakJointsOnDeath = false

				humanoid.Died:Connect(function()
					local char = humanoid.Parent
					char.Archivable = true
					local char2 = char:Clone()
					local hum2: Humanoid = char2:FindFirstChildWhichIsA("Humanoid")
					char2.Parent = workspace
					char2.Name ..= "'s Corpse"
					game:GetService("Debris"):AddItem(char2, 30)
					if hum2 then
						hum2.DisplayName ..= "'s Corpse"
						hum2.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOff
						hum2.NameOcclusion = Enum.NameOcclusion.NoOcclusion
						hum2.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
					end
					hum2:SetStateEnabled(Enum.HumanoidStateType.Running, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
					hum2:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
					hum2:ChangeState(Enum.HumanoidStateType.Ragdoll)
					for index,joint in pairs(char2:GetDescendants()) do
						if joint:IsA("Motor6D") then
							local socket = Instance.new("BallSocketConstraint")
							socket:AddTag("fentanyl.lua")
							local a1 = Instance.new("Attachment")
							local a2 = Instance.new("Attachment")
							a1.Parent = joint.Part0
							a2.Parent = joint.Part1
							socket.Parent = joint.Parent
							socket.Attachment0 = a1
							socket.Attachment1 = a2
							a1.CFrame = joint.C0
							a2.CFrame = joint.C1
							socket.LimitsEnabled = true
							socket.TwistLimitsEnabled = true
							joint:Destroy()
						elseif joint:IsA("Constraint") then
							if not joint:HasTag("fentanyl.lua") then
								joint:Destroy()
							end
						end
					end
					local head = char2:FindFirstChild("Head")
					if head then
						workspace.CurrentCamera.CameraSubject = head
					end
					for i, c in pairs(char:GetDescendants()) do
						if not (c:IsA("Humanoid") or c:IsA("BasePart")) then
							c:Destroy()
						end
						if (c:IsA("BasePart")) then
							c.Size = Vector3.zero
							c.CanCollide = true
							c.CanTouch = false
							c.CanQuery = false
							c.Locked = true
							--c.Anchored = true
							c.Transparency = 1
							c.Reflectance = 0
							c.Material = Enum.Material.Air
							c.Massless = true
							c.Shape = Enum.PartType.Ball
						end
					end
				end)

			end)
		end
		rself()
		LocalPlayer.CharacterAdded:Connect(function()
			rself()
		end)
	end
end})
Scripts_Tab_Realism:button({name = "Ragdoll Everyone (R6/R15)",callback = function()
	if rself == false and rev == false then
		rself = true
		rev = true
		local rev = function()
			local humanoids = {}
			local analyze = function(hum: Humanoid)
				if (hum and hum ~= nil and hum:IsA("Humanoid") and not (hum:HasTag("fentanyl_ragdoll"))) then
					hum:AddTag("fentanyl_ragdoll")
					pcall(function()
						local humanoid = hum

						humanoid.BreakJointsOnDeath = false

						humanoid.Died:Connect(function()
							local char = humanoid.Parent
							char.Archivable = true
							local char2 = char:Clone()
							local hum2: Humanoid = char2:FindFirstChildWhichIsA("Humanoid")
							char2.Parent = workspace
							char2.Name ..= "'s Corpse"
							game:GetService("Debris"):AddItem(char2, 30)
							if hum2 then
								hum2.DisplayName ..= "'s Corpse"
								hum2.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOff
								hum2.NameOcclusion = Enum.NameOcclusion.NoOcclusion
								hum2.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
							end
							hum2:SetStateEnabled(Enum.HumanoidStateType.Running, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
							hum2:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
							hum2:ChangeState(Enum.HumanoidStateType.Ragdoll)
							for index,joint in pairs(char2:GetDescendants()) do
								if joint:IsA("Motor6D") then
									local socket = Instance.new("BallSocketConstraint")
									socket:AddTag("fentanyl.lua")
									local a1 = Instance.new("Attachment")
									local a2 = Instance.new("Attachment")
									a1.Parent = joint.Part0
									a2.Parent = joint.Part1
									socket.Parent = joint.Parent
									socket.Attachment0 = a1
									socket.Attachment1 = a2
									a1.CFrame = joint.C0
									a2.CFrame = joint.C1
									socket.LimitsEnabled = true
									socket.TwistLimitsEnabled = true
									joint:Destroy()
								elseif joint:IsA("Constraint") then
									if not joint:HasTag("fentanyl.lua") then
										joint:Destroy()
									end
								end
							end
							local ourchar = LocalPlayer.Character
							if ourchar ~= nil then
								if (char.Name == LocalPlayer.Name or char.Name == ourchar.Name) then
									local head = char2:FindFirstChild("Head")
									if head then
										workspace.CurrentCamera.CameraSubject = head
									end
								end
							else 
								if (char.Name == LocalPlayer.Name) then
									local head = char2:FindFirstChild("Head")
									if head then
										workspace.CurrentCamera.CameraSubject = head
									end
								end
							end
							for i, c in pairs(char:GetDescendants()) do
								if not (c:IsA("Humanoid") or c:IsA("BasePart")) then
									c:Destroy()
								end
								if (c:IsA("BasePart")) then
									c.Size = Vector3.zero
									c.CanCollide = true
									c.CanTouch = false
									c.CanQuery = false
									c.Locked = true
									--c.Anchored = true
									c.Transparency = 1
									c.Reflectance = 0
									c.Material = Enum.Material.Air
									c.Massless = true
									c.Shape = Enum.PartType.Ball
								end
							end
						end)

					end)
				end
			end
			for index, obj in pairs(workspace:GetDescendants()) do
				analyze(obj)
			end
			workspace.DescendantAdded:Connect(analyze)
		end
		rev()
	end
end})

local fpa = false
Scripts_Tab_Realism:button({name = "First Person Arms (R6)",callback = function()
	if fpa == false then
		fpa = true
		local fpa = function()
			pcall(function()
				local player = game.Players.LocalPlayer
				local character = player.Character or player.CharacterAdded:Wait()
				local humanoid = character:WaitForChild("Humanoid")
				local torso = character:WaitForChild("Torso")
				local rightShoulder = torso:WaitForChild("Right Shoulder")
				local leftShoulder = torso:WaitForChild("Left Shoulder")
				local head = character:WaitForChild("Head")
				local rootpart = character:WaitForChild("HumanoidRootPart")
				local camera = game.Workspace.CurrentCamera

				local updateSpeed = 0.5/2

				game:GetService("RunService").PreRender:Connect(function()
					pcall(function()
						character["Right Arm"].LocalTransparencyModifier = character["Right Arm"].Transparency
						character["Left Arm"].LocalTransparencyModifier = character["Left Arm"].Transparency
						local camCF = camera.CoordinateFrame
						local distance = (character.Head.Position - camCF.p).magnitude
						if distance <= 2 and humanoid.Health ~= 0 then
							rightShoulder.C0 = rightShoulder.C0:lerp((camCF * CFrame.new(1, -1, -.5)):toObjectSpace(torso.CFrame):inverse() * CFrame.Angles(0, math.pi/2, 0), updateSpeed)
							leftShoulder.C0 = leftShoulder.C0:lerp((camCF * CFrame.new(-1, -1, -.5)):toObjectSpace(torso.CFrame):inverse() * CFrame.Angles(0, -math.pi/2, 0), updateSpeed)
						else
							rightShoulder.C0 = CFrame.new(1, 0.5, 0) * CFrame.Angles(0, math.pi/2, 0)
							leftShoulder.C0 = CFrame.new(-1, 0.5, 0) * CFrame.Angles(0, -math.pi/2, 0)
						end
					end)
				end)
			end)
		end
		fpa()
		LocalPlayer.CharacterAdded:Connect(function()
			fpa()
		end)
	end
end})

local fpb = false
Scripts_Tab_Realism:button({name = "First Person Body (R6/R15)",callback = function()
	if fpb == false then
		fpb = true
		local fpb = function()
			pcall(function()
				local RunService = game:GetService("RunService")

				local player = game.Players.LocalPlayer
				local character = player.Character or player.CharacterAdded:Wait()
				local head = character:WaitForChild("Head")
				local humanoid = character:WaitForChild("Humanoid")
				local camera = workspace.CurrentCamera

				local wasfp = false
				RunService.PreRender:Connect(function()
					local isFirstPerson = (camera.CFrame.Position - head.Position).Magnitude < 1.6

					if isFirstPerson then
						wasfp = true
						humanoid.CameraOffset = Vector3.new(0,0,-1)
					else
						if wasfp == true then
							wasfp = false
							humanoid.CameraOffset = Vector3.new(0,0,0)
						end
					end

					for _, v in character:GetChildren() do
						if v:IsA("BasePart") and v ~= head and v.Name ~= "Right Arm" and v.Name ~= "Left Arm" then
							v.LocalTransparencyModifier = 0
						end
					end
				end)
			end)
		end
		fpb()
		LocalPlayer.CharacterAdded:Connect(function()
			fpb()
		end)
	end
end})

local ca = false
Scripts_Tab_Realism:button({name = "Camera align to Head (R6/R15)",callback = function()
	if ca == false then
		ca = true
		local ca = function()
			pcall(function()
				local plr = game.Players.LocalPlayer
				local char = plr.Character or plr.CharacterAdded:wait()
				local hum = char:WaitForChild("Humanoid")
				local rootpart,head = char:WaitForChild("HumanoidRootPart"),char:WaitForChild("Head")
				RunService.PreRender:Connect(function()
					hum.CameraOffset = (rootpart.CFrame+Vector3.new(0,1.5,0)):pointToObjectSpace(head.CFrame.p)
				end)
			end)
		end
		ca()
		LocalPlayer.CharacterAdded:Connect(function()
			ca()
		end)
	end
end})

_G.FootstepsVolume = 0.5
Scripts_Tab_Realism:slider({name = "Footsteps Volume",def = _G.FootstepsVolume, max = 10,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	_G.FootstepsVolume = value
end})


local lastfootcon = nil
local foot = false
Scripts_Tab_Realism:button({name = "Footsteps (R6/R15)",callback = function()
	if foot == false then
		foot = true
		local foot = function()
			pcall(function()
				--PUT THIS SCRIPT IN STARTERPACK, STOP DISLIKING IT BECAUSE YOU DIDN'T USE IT RIGHT
				
				local sounds = game:GetService('SoundService')
				local runtime = game:GetService('RunService')
				local footsounds = sounds:FindFirstChild("FootstepSounds")
				if not (footsounds and footsounds ~= nil and footsounds:IsA("SoundGroup")) then
					footsounds = Instance.new("SoundGroup")
					footsounds.Name = "FootstepSounds"
					footsounds.Parent = sounds
					local matsounds = {
						["Concrete"] = "rbxassetid://6362185620";
						["Wood"] = "rbxassetid://9083826864";
						["Grass"] = "rbxassetid://9083837523";
						["Sand"] = "rbxassetid://9083846829";
						["Metal"] = "rbxassetid://9083841139";
						["Fabric"] = "rbxassetid://9083849830";
						["HighPitchConcrete"] = "rbxassetid://9083855231";
					}
					local materials = {
						["Plastic"] =  matsounds.Concrete,
						["SmoothPlastic"] =  matsounds.Concrete,
						["Neon"] =  matsounds.HighPitchConcrete,
						["Wood"] =  matsounds.Wood,
						["WoodPlanks"] =  matsounds.Wood,
						["Marble"] =  matsounds.HighPitchConcrete,
						["Slate"] =  matsounds.Concrete,
						["Concrete"] =  matsounds.Concrete,
						["Granite"] =  matsounds.HighPitchConcrete,
						["Brick"] =  matsounds.Concrete,
						["Pebble"] =  matsounds.Concrete,
						["Cobblestone"] =  matsounds.Concrete,
						["Rock"] =  matsounds.Concrete,
						["Sandstone"] =  matsounds.Concrete,
						["Basalt"] =  matsounds.Concrete,
						["CrackedLava"] =  matsounds.Concrete,
						["Limestone"] =  matsounds.Concrete,
						["Pavement"] =  matsounds.Concrete,
						["CorrodedMetal"] =  matsounds.Metal,
						["DiamondPlate"] =  matsounds.Metal,
						["Foil"] =  matsounds.Metal,
						["Metal"] =  matsounds.Metal,
						["Grass"] =  matsounds.Grass,
						["LeafyGrass"] =  matsounds.Sand,
						["Sand"] =  matsounds.Sand,
						["Fabric"] =  matsounds.Fabric,
						["Snow"] =  matsounds.Sand,
						["Mud"] =  matsounds.Sand,
						["Ground"] =  matsounds.Concrete,
						["Asphalt"] =  matsounds.Concrete,
						["Salt"] =  matsounds.Sand,
						["Ice"] =  matsounds.HighPitchConcrete,
						["Glacier"] =  matsounds.HighPitchConcrete,
						["Glass"] =  matsounds.HighPitchConcrete,
						["ForceField"] =  matsounds.HighPitchConcrete,
						--["Air"] =  ,
						--["Water"] =  ,
						["Cardboard"] =  matsounds.Fabric,
						["Carpet"] =  matsounds.Fabric,
						["CeramicTiles"] =  matsounds.HighPitchConcrete,
						["ClayRoofTiles"] =  matsounds.HighPitchConcrete,
						["RoofShingles"] =  matsounds.HighPitchConcrete,
						["Leather"] =  matsounds.Fabric,
						["Plaster"] =  matsounds.Fabric,
						["Rubber"] = matsounds.Fabric
					}

					for index, material in pairs(Enum.Material:GetEnumItems()) do
						local str = string.gsub(tostring(material), "Enum.Material.", "")
						local materialid = materials[str]
						if materialid then
							local newsound = Instance.new("Sound")
							newsound.Name = str
							newsound.Volume = _G.FootstepsVolume
							newsound.SoundId = materials[str]
							newsound.Parent = footsounds
						end
					end
				end
				local plr = game.Players.LocalPlayer
				local char = plr.Character or plr.CharacterAdded:Wait()
				local hrp = char:WaitForChild("HumanoidRootPart")
				task.spawn(function()
					local analyze = function(v: Sound)
						if (v and v ~= nil) then
							if (v:IsA("Sound") and v.Name == "Running") then
								Lock(v, "Volume", 0)
							end
						end
					end
					for i, c in pairs(hrp:GetChildren()) do
						analyze(c)
					end
					hrp.ChildAdded:Connect(analyze)
				end)
				local hum = char:WaitForChild("Humanoid")
				local walking

				hum.Running:connect(function(speed)
					pcall(function()
						if speed > hum.WalkSpeed/2 then
							walking = true
						else
							walking = false
						end
					end)
				end)

				local getMaterial = function()
					local floormat = hum.FloorMaterial
					if not floormat then floormat = 'Air' end
					local matstring = string.split(tostring(floormat),'Enum.Material.')[2]
					local material = matstring
					return material
				end

				local lastmat
				if lastfootcon ~= nil then
					lastfootcon:Disconnect()
				end
				task.spawn(function()
					lastfootcon = runtime.PreRender:connect(function()
						pcall(function()
							if walking then
								if footsounds then
									local material = getMaterial()
									if material ~= lastmat and lastmat ~= nil then
										local materialSound = footsounds:FindFirstChild(lastmat)
										if materialSound then
											materialSound.Playing = false
										end
									end
									local materialSound = footsounds:FindFirstChild(material)
									if materialSound and materialSound ~= nil and materialSound:IsA("Sound") then
										materialSound.PlaybackSpeed = hum.WalkSpeed/game:GetService("StarterPlayer").CharacterWalkSpeed
										materialSound.Playing = true
										materialSound.Volume = _G.FootstepsVolume
									end
									lastmat = material
								end
							else
								if footsounds then
									for _,sound in pairs(footsounds:GetChildren()) do
										sound.Playing = false
										sound.Volume = _G.FootstepsVolume
									end
								end
							end
						end)
					end)
				end)
			end)
		end
		foot()
		LocalPlayer.CharacterAdded:Connect(function()
			foot()
		end)
	end
end})

local sm = false
Scripts_Tab_Realism:button({name = "Smooth Movement (R6)",callback = function()
	if sm == false then
		sm = true
		local sm = function()
			pcall(function()
				local targetMoveVelocity = Vector3.new()
				local moveVelocity = Vector3.new()
				local Dir = CFrame.Angles(0,0,0)
				local moveAcceleration = 5
				local stopDecel = 10

				local plr = game:GetService("Players").LocalPlayer
				local RunS = game:GetService("RunService")
				local InputS = game:GetService("UserInputService")
				local CAS = game:GetService("ContextActionService")
				local ctrlModule = require(plr:WaitForChild("PlayerScripts").PlayerModule:WaitForChild("ControlModule"))

				local character = plr.Character or plr.CharacterAdded:Wait()
				local camera = game.Workspace.CurrentCamera

				local function lerp(a, b, t) return a + (b - a) * t end

				local function getWalkDirectionCameraSpace()
					local walkDir = ctrlModule:GetMoveVector()

					if walkDir.Magnitude > 0 then
						walkDir = Vector3.new(walkDir.X, 0, walkDir.Z).Unit * walkDir.Magnitude
						if walkDir.Magnitude > 1 then
							walkDir = walkDir.Unit
						end
					end

					return walkDir
				end

				local function getWalkDirectionWorldSpace()
					local walkDir = camera.CFrame:VectorToWorldSpace(getWalkDirectionCameraSpace())

					if walkDir.Magnitude > 0 then
						walkDir = Vector3.new(walkDir.X, 0, walkDir.Z).Unit * walkDir.Magnitude
						if walkDir.Magnitude > 1 then
							walkDir = walkDir.Unit
						end
					end

					return walkDir
				end

				local function noY(vec:Vector3)
					return Vector3.new(vec.X,0,vec.Z)
				end

				local function updateMovement(dt)
					pcall(function()
						local humanoid = character:FindFirstChild("Humanoid")
						if humanoid then
							local moveDir = getWalkDirectionWorldSpace() 
							local deceleration = lerp(moveAcceleration, stopDecel, 1 - moveDir.Magnitude)
							targetMoveVelocity = moveDir
							moveVelocity = lerp(moveVelocity, targetMoveVelocity, math.clamp(dt * deceleration, 0, 1))
							humanoid:Move(moveVelocity)
						end
					end)
				end

				RunS.RenderStepped:Connect(updateMovement)
			end)
		end
		sm()
		LocalPlayer.CharacterAdded:Connect(function()
			sm()
		end)
	end
end})

local cb = false
Scripts_Tab_Realism:button({name = "Camera Bobble (R6/R15)",callback = function()
	if cb == false then
		cb = true
		local cb = function()
			pcall(function()
				local l__LocalPlayer__1 = game:GetService("Players").LocalPlayer;
				local l__mouse__2 = l__LocalPlayer__1:GetMouse();
				local l__UserInputService__3 = game:GetService("UserInputService");
				l__UserInputService__3.MouseIconEnabled = true;
				function lerp(p1, p2, p3)
					return p1 + (p2 - p1) * p3;
				end;
				local l__Humanoid__1 = l__LocalPlayer__1.Character:WaitForChild("Humanoid");
				local u2 = nil;
				local u3 = 0;
				local u4 = 0;
				local l__CurrentCamera__5 = game:GetService("Workspace").CurrentCamera;
				local u6 = 0;
				local u7 = 0;
				local u8 = 0;
				local u9 = 0;
				local u10 = 10;
				local u11 = 10;
				local u12 = Vector3.new();
				u2 = game:GetService("RunService").RenderStepped:Connect(function(p4)
					p4 = p4 * 35;
					if l__Humanoid__1.Health <= 0 then
						u2:Disconnect();
						return;
					end;
					local v4 = l__Humanoid__1.RootPart and Vector3.new(l__Humanoid__1.RootPart.Velocity.X, 0, l__Humanoid__1.RootPart.Velocity.Z).Magnitude or 0;
					if p4 > 3 then
						u3 = 0;
						u4 = 0;
					else
						u3 = lerp(u3, math.cos(tick() * 0.5 * math.random(10, 15)) * (math.random(5, 20) / 200) * p4, 0.05 * p4);
						u4 = lerp(u4, math.cos(tick() * 0.5 * math.random(5, 10)) * (math.random(2, 10) / 200) * p4, 0.05 * p4);
					end;
					l__CurrentCamera__5.CFrame = l__CurrentCamera__5.CFrame * (CFrame.fromEulerAnglesXYZ(0, 0, math.rad(u6)) * CFrame.fromEulerAnglesXYZ(math.rad(u7 * p4), math.rad(u8 * p4), u9) * CFrame.Angles(0, 0, math.rad(u7 * p4 * (math.min(v4, 10) / 5))) * CFrame.fromEulerAnglesXYZ(math.rad(u3), math.rad(u4), math.rad(u4 * 10)));
					u9 = math.clamp(lerp(u9, -l__CurrentCamera__5.CFrame:VectorToObjectSpace((l__Humanoid__1.RootPart and l__Humanoid__1.RootPart.Velocity or Vector3.new()) / math.max(l__Humanoid__1.WalkSpeed, 0.01)).X * 0.08, 0.1 * p4), -0.35, 0.2);
					u6 = lerp(u6, math.clamp(l__UserInputService__3:GetMouseDelta().X, -5, 5), 0.25 * p4);
					u7 = lerp(u7, math.sin(tick() * u10) / 5 * math.min(1, u11 / 10), 0.25 * p4);
					if v4 > 1 then
						u8 = lerp(u8, math.cos(tick() * 0.5 * math.floor(u10)) * (u10 / 200), 0.25 * p4);
					else
						u8 = lerp(u8, 0, 0.05 * p4);
					end;
					if v4 > 10 then
						u10 = 10;
						u11 = 10;
					elseif v4 > 0.1 then
						u10 = 10;
						u11 = 10;
					else
						u11 = 0;
					end;
					u12 = lerp(u12, l__CurrentCamera__5.CFrame.LookVector, 0.125 * p4);
				end);

			end)
		end
		cb()
		LocalPlayer.CharacterAdded:Connect(function()
			cb()
		end)
	end
end})

Scripts_Tab_Other:button({name = "Infinite Yield",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))() end)
end})
Scripts_Tab_Other:button({name = "Nebulahook (Old Fentanyl.lua)",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/nebulathedev/nebula.xyz-global/refs/heads/main/main.luau"))() end)
end})
Scripts_Tab_Other:button({name = "Forsaken Script",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/nebulathedev/forsaken-script/refs/heads/main/main.luau"))() end)
end})
Scripts_Tab_Other:button({name = "Nebula.xyz (Criminality)",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/nebulathedev/nebula.xyz/refs/heads/main/main.luau"))() end)
end})
Scripts_Tab_Other:button({name = "SEWH Free Emotes",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/nebulathedev/sewh-free-emotes/refs/heads/main/main.luau"))() end)
end})
Scripts_Tab_Other:button({name = "InfilSense (Entry Point) (KEY)",callback = function()
	pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/bkkpro1980/InfilSense/main/main.lua"))() end)
end})


local CurrentExecCode = "print(\"fentanyl.lua on top\")"

Scripts_Tab_Executor:textbox({name = "Code",def = CurrentExecCode,placeholder = "Enter your code",callback = function(value)
	pcall(function() CurrentExecCode = value end)
end})
Scripts_Tab_Executor:button({name = "Execute",callback = function()
	pcall(function() loadstring(CurrentExecCode)() end)
end})

-- // Misc Tab

local Misc_Section_CoreGUI = Misc_Tab:section({name = "CoreGUI",side = "left",size = 125})
local Misc_Section_Teams = Misc_Tab:section({name = "Teams",side = "right",size = 515})
local Misc_Section_Other = Misc_Tab:section({name = "Other",side = "right",size = 245})
local Misc_Section_Back_Frontflipping = Misc_Tab:section({name = "Backflipping & Frontflipping",side = "right",size = 95})
local Misc_Section_Troll = Misc_Tab:section({name = "Troll",side = "right",size = 285})
local Misc_Section_Animations = Misc_Tab:section({name = "Animations",side = "left",size = 195})
local Misc_Section_Tools = Misc_Tab:section({name = "Tools",side = "left",size = 105})
local Misc_Section_InstanceDeletor = Misc_Tab:section({name = "Instance Deletor (DANGEROUS)",side = "right",size = 395})
local Misc_Section_Dangerous = Misc_Tab:section({name = "Dangerous",side = "left",size = 125})

-- teamhack

local TeamCreationConfig = {
	Name = "Team",
	TeamColor = Color3.fromRGB(255, 255, 255),
	RandomTeamColor = false,
	AutoAssignable = false,
	AutoJoinTeam = false,
	Ammount = 1,
	LoopCreate = false,
	RandomString = false,
	SpamJoinRandomTeam = false,
	SpamAllJoinRandomTeam = false,
	SpamAllJoinSameRandomTeam = false,
}

Misc_Section_Teams:textbox({name = "Team Name",def = "Team",placeholder = "Enter Team Name",callback = function(value)
	TeamCreationConfig.Name = value
end})

Misc_Section_Teams:toggle({name = "Random Team Name",def = false,callback = function(value)
	TeamCreationConfig.RandomString = value
end})

local BrickColorsDropdownOptions = {}
local Colors = {}

for i = 1, 1032 do
	local BrickColorValue = BrickColor.new(i)
	if not table.find(BrickColorsDropdownOptions, tostring(BrickColorValue)) then
        table.insert(BrickColorsDropdownOptions, tostring(BrickColorValue))
	end
end
Misc_Section_Teams:colorpicker({name = "Team Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	TeamCreationConfig.TeamColor = value
end})

Misc_Section_Teams:toggle({name = "Random Team Color",def = false,callback = function(value)
	TeamCreationConfig.RandomTeamColor = value
end})

Misc_Section_Teams:toggle({name = "Team Auto-Assignable",def = false,callback = function(value)
	TeamCreationConfig.AutoAssignable = value
end})

Misc_Section_Teams:toggle({name = "Automatically Join Team",def = false,callback = function(value)
	TeamCreationConfig.AutoJoinTeam = value
end})

Misc_Section_Teams:slider({name = "Team Ammount",def = 1, max = 500,min = 1,rounding = true,ticking = false,measuring = "",callback = function(value)
	TeamCreationConfig.Ammount = value
end})

Misc_Section_Teams:toggle({name = "Loop Create",def = false,callback = function(value)
	TeamCreationConfig.LoopCreate = value
end})

local createTeam = function()
	for i = 1, TeamCreationConfig.Ammount do
		local Team = Instance.new("Team")
		Team.Name = TeamCreationConfig.Name
		if TeamCreationConfig.RandomString then
			Team.Name = generateRandomString()
		end
		Team.TeamColor = BrickColor.new(TeamCreationConfig.TeamColor)
		if TeamCreationConfig.RandomTeamColor then
			Team.TeamColor = BrickColor.new(
				Color3.fromRGB(
					Random.new():NextInteger(0, 255),
					Random.new():NextInteger(0, 255),
					Random.new():NextInteger(0, 255)
				)
			)
		end
		Team.AutoAssignable = TeamCreationConfig.AutoAssignable
		Team.Parent = game:GetService("Teams")
		if TeamCreationConfig.AutoJoinTeam then
			LocalPlayer.Neutral = false
			LocalPlayer.Team = Team
		end
	end
end

Misc_Section_Teams:button({name = "Create Team",callback = function()
	createTeam()
end})

Misc_Section_Teams:button({name = "Delete All Teams",callback = function()
	for index, team in pairs(game:GetService("Teams"):GetChildren()) do
		if team and team ~= nil and team:IsA("Team") then
			team:Destroy()
		end
	end
end})

Misc_Section_Teams:button({name = "Join Random Team",callback = function()
	LocalPlayer.Neutral = false
	LocalPlayer.Team = game:GetService("Teams"):GetChildren()[math.random(1,#game:GetService("Teams"):GetChildren())]
end})

Misc_Section_Teams:toggle({name = "Spam Join Random Team",def = false,callback = function(value)
	TeamCreationConfig.SpamJoinRandomTeam = value
end})

Misc_Section_Teams:button({name = "Join Neutral Team ",callback = function()
	LocalPlayer.Neutral = true
	LocalPlayer.Team = nil
end})

local JoinTeamName = "Team"
Misc_Section_Teams:textbox({name = "Team Name",def = "Team",placeholder = "Enter Team Name",callback = function(value)
	JoinTeamName = value
end})

Misc_Section_Teams:button({name = "Join Team",callback = function()
	local FoundTeam = nil
	for Index, Team in pairs(game:GetService("Teams"):GetChildren()) do
		if Team:IsA("Team") then
			if Team.Name:lower() == JoinTeamName:lower() then
				FoundTeam = Team 
			end
		end
	end
	if FoundTeam ~= nil then
		LocalPlayer.Neutral = false
		LocalPlayer.Team = FoundTeam
	end
end})

Misc_Section_Teams:button({name = "All Players Neutral",callback = function()
	for Index, Player in pairs(game:GetService("Players"):GetPlayers()) do 
		if Player ~= LocalPlayer then
			Player.Neutral = true
			Player.Team = nil
		end
	end
end})

local allJoinRandomTeam = function()
	for Index, Player in pairs(game:GetService("Players"):GetPlayers()) do 
		if Player ~= LocalPlayer then
			Player.Neutral = false
			Player.Team = game:GetService("Teams"):GetChildren()[math.random(1,#game:GetService("Teams"):GetChildren())]
		end
	end
end
local allJoinSameRandomTeam = function()
	local CurRngTeam = game:GetService("Teams"):GetChildren()[math.random(1,#game:GetService("Teams"):GetChildren())]
	for Index, Player in pairs(game:GetService("Players"):GetPlayers()) do 
		if Player ~= LocalPlayer then
			Player.Neutral = false
			Player.Team = CurRngTeam
		end
	end
end

Misc_Section_Teams:button({name = "All Join Random Team",callback = function()
	allJoinRandomTeam()
end})

Misc_Section_Teams:button({name = "All Join Same Random Team",callback = function()
	allJoinSameRandomTeam()
end})

Misc_Section_Teams:toggle({name = "Spam All Join Random Team",def = false,callback = function(value)
	TeamCreationConfig.SpamAllJoinRandomTeam = value
end})

Misc_Section_Teams:toggle({name = "Spam All Join Same Random Team",def = false,callback = function(value)
	TeamCreationConfig.SpamAllJoinSameRandomTeam = value
end})

RunService.PreRender:Connect(function()
	if TeamCreationConfig.SpamJoinRandomTeam == true then
		LocalPlayer.Neutral = false
		LocalPlayer.Team = game:GetService("Teams"):GetChildren()[math.random(1,#game:GetService("Teams"):GetChildren())]
	end
	if TeamCreationConfig.LoopCreate then
		createTeam()
	end
	if TeamCreationConfig.SpamAllJoinRandomTeam then
		allJoinRandomTeam()
	end
	if TeamCreationConfig.SpamAllJoinSameRandomTeam then
		allJoinSameRandomTeam()
	end
end)

--

local frontbackflips = {
	Enabled = false,
	FrontKey = Enum.KeyCode.J,
	BackKey = Enum.KeyCode.K
}
Misc_Section_Back_Frontflipping:toggle({name = "Enable Keybinds",def = false,callback = function(value)
	frontbackflips.Enabled = value
end})

Misc_Section_Back_Frontflipping:keybind({name = "Frontflipping Key",def = Enum.KeyCode.J,callback = function(key)
	frontbackflips.FrontKey = key
end})

Misc_Section_Back_Frontflipping:keybind({name = "Backflipping Key",def = Enum.KeyCode.K,callback = function(key)
	frontbackflips.BackKey = key
end})

task.spawn(function(backfrontflipping)
	UIS.InputBegan:Connect(function(Input, Processed)
		local Character = LocalPlayer.Character
		if Processed or frontbackflips.Enabled == false or Character == nil then return end
		if Input.KeyCode == frontbackflips.FrontKey then
			-- frontFLip
			local Root = Character:FindFirstChild("HumanoidRootPart")
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Root and Humanoid then
				Humanoid.Sit = true
				Root.AssemblyLinearVelocity += Vector3.new(0, 45, 0)
				for i = 1, 360/5 do
					Root.CFrame *= CFrame.Angles(math.rad(-5), 0, 0)
					RunService.PreRender:Wait()
				end
				Humanoid.Sit = false
			end
		elseif Input.KeyCode == frontbackflips.BackKey then
			-- backFLip
			local Root = Character:FindFirstChild("HumanoidRootPart")
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Root and Humanoid then
				Humanoid.Sit = true
				Root.AssemblyLinearVelocity += Vector3.new(0, 45, 0)
				for i = 1, 360/5 do
					Root.CFrame *= CFrame.Angles(math.rad(5), 0, 0)
					RunService.PreRender:Wait()
				end
				Humanoid.Sit = false
			end
		end
	end)
end)

local OtherSettings = {
	AntiVoid = false,
	CanTouch = true,
	CanQuery = true,
	Locked = false,
	Archivable = true,
	DH = workspace.FallenPartsDestroyHeight
}

local DisableAnimate = false
Misc_Section_Other:toggle({name = "Disable Animate",def = false,callback = function(value)
	DisableAnimate = value
end})

task.spawn(function(disanim)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Animate = Character:FindFirstChild("Animate")
			if Animate and Animate:IsA("BaseScript") then
				Animate.Disabled = DisableAnimate
			end
		end
	end)
end)

Misc_Section_Other:button({name = "Fix Animator",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		for Index, Animator in pairs(Character:GetDescendants()) do
			if Animator:IsA("Animator") or Animator:IsA("AnimationController") then
				local NewAnimator = Instance.new("Animator")
				NewAnimator.Name = Animator.Name
				NewAnimator.Parent = Animator.Parent
				Animator:Destroy()
			end
		end
	end
end})

Misc_Section_Other:toggle({name = "Anti-Void",def = false,callback = function(value)
	OtherSettings.AntiVoid = value
end})

task.spawn(function(antivoidder)
	RunService.PreRender:Connect(function()
		local AntiVoid = workspace:FindFirstChild("AntiVoidPart")
		if not AntiVoid then
			AntiVoid = Instance.new("Part", workspace)
			AntiVoid.Name = "AntiVoidPart"
			AntiVoid.Size = Vector3.new(2048, 2048, 2048)
			AntiVoid.Anchored = true
			AntiVoid.Position = Vector3.new(0/1/0,0/1/0,0/1/0)
			AntiVoid.Shape = Enum.PartType.Block
			AntiVoid.CastShadow = false
			AntiVoid.Transparency = 1
			AntiVoid.CanTouch = false
			AntiVoid.CanQuery = false
			AntiVoid.Locked = true
			AntiVoid.Archivable = true
			AntiVoid.Massless = true
			AntiVoid.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0, 0, 0, 0)
		end
		AntiVoid.CanCollide = OtherSettings.AntiVoid
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Root = Character:FindFirstChild("HumanoidRootPart")
			if Root then
				AntiVoid.Position = Vector3.new(Root.Position.X, workspace.FallenPartsDestroyHeight - AntiVoid.Size.Y / 2, Root.Position.Z)
			end
		end
	end)
end)

local alignmentKeys
local alignmentKeysEnabled = false
local alignmentKeysEmotes
Misc_Section_Other:toggle({name = "Alignment Keys",def = false,callback = function(value)
	alignmentKeysEnabled = value
	if alignmentKeysEnabled then
		alignmentKeys = UIS.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.KeyCode == Enum.KeyCode.Comma then workspace.CurrentCamera:PanUnits(-1) end
			if input.KeyCode == Enum.KeyCode.Period then workspace.CurrentCamera:PanUnits(1) end
		end)
		alignmentKeysEmotes = game:GetService("StarterGui"):GetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu)
		game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, false)
	else
		alignmentKeys:Disconnect()
		game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, alignmentKeysEmotes)
	end
end})
Misc_Section_Other:toggle({name = "CanTouch",def = true,callback = function(value)
	OtherSettings.CanTouch = value
end})
Misc_Section_Other:toggle({name = "CanQuery",def = true,callback = function(value)
	OtherSettings.CanQuery = value
end})
Misc_Section_Other:toggle({name = "Locked",def = false,callback = function(value)
	OtherSettings.Locked = value
end})
Misc_Section_Other:toggle({name = "Archivable",def = true,callback = function(value)
	OtherSettings.Archivable = value
end})

Misc_Section_Other:slider({name = "DestroyHeight",def = workspace.FallenPartsDestroyHeight, max = 50000,min = -50000,rounding = true,ticking = false,measuring = "",callback = function(value)
	OtherSettings.DH = value
end})

task.spawn(function(OtherMiscTasks)
	local Update = function(Character)
		for Index, Object in pairs(Character:GetDescendants()) do
			if (Object:IsA("BasePart")) then
				task.spawn(function()
					RunService.PreRender:Connect(function()
						Object.CanTouch = OtherSettings.CanTouch
						Object.CanQuery = OtherSettings.CanQuery
						Object.Locked = OtherSettings.Locked
						Object.Archivable = OtherSettings.Archivable
					end)
				end)
			end
		end
	end
	if LocalPlayer.Character ~= nil then
		Update(LocalPlayer.Character)
	end
	LocalPlayer.CharacterAdded:Connect(Update)
	RunService.PreRender:Connect(function()
		if not (RunService:IsStudio()) then
			workspace.FallenPartsDestroyHeight = OtherSettings.DH
		end
	end)
end)

Misc_Section_Dangerous:button({name = "Remove Translucid/Invis Parts",callback = function()
	pcall(function()
		DescendantHandler(workspace, {"BasePart"}, true, 
		function(obj)
			if (obj.Transparency > 0 and obj.Name ~= "HumanoidRootPart" and not (obj:FindFirstChildWhichIsA("ProximityPrompt") or obj:FindFirstChildWhichIsA("ClickDetector"))) then
				obj:Destroy()
			end
		end
		)
	end)
end})
Misc_Section_Dangerous:button({name = "DestroyHeight TP",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		local Root = Character:FindFirstChild("HumanoidRootPart")
		if Root then
			local DestroyHeight = workspace.FallenPartsDestroyHeight
			if not (RunService:IsStudio()) then
				workspace.FallenPartsDestroyHeight = 0/1/0
			end
			local OgCFrame = Root.CFrame
			Root.CFrame = CFrame.new(Root.Position.X, DestroyHeight - 25, Root.Position.Z)
			task.wait(1)
			Root.CFrame = OgCFrame
			if not (RunService:IsStudio()) then
				workspace.FallenPartsDestroyHeight = DestroyHeight
			end
		end
	end
end})
Misc_Section_Dangerous:button({name = "nan TP",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		local Root = Character:FindFirstChild("HumanoidRootPart")
		if Root then
			local nan = (0/1/0)
			Root.CFrame = CFrame.new(nan, nan, nan)
		end
	end
end})
local LatestCharParent
if LocalPlayer.Character ~= nil then
	LatestCharParent = LocalPlayer.Character.Parent
end
LocalPlayer.CharacterAdded:Connect(function()
	LatestCharParent = LocalPlayer.Character.Parent
end)
Misc_Section_Dangerous:button({name = "Toggle nil Parent",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		if Character.Parent == nil then
			Character.Parent = LatestCharParent
		else
			Character.Parent = nil
		end
	end
end})

Misc_Section_InstanceDeletor:button({name = "All",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Instance"}, false, function(Instance)
			Instance:Destroy()
		end)
		Character:Destroy()
	end
end})

Misc_Section_InstanceDeletor:button({name = "Non-Essentials",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Instance"}, false, function(Instance)
			local Allowed = {
				"BasePart",
				"BaseScript",
				"Humanoid",
				"Animator",
				"JointInstance"
			}
			local AllowedCount = 0
			for Index, Object in pairs(Allowed) do
				if (Instance:IsA(Object) or Instance.ClassName == Object) then
					AllowedCount += 1
				end
			end
			if AllowedCount <= 0 then
				Instance:Destroy()
			end
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Attachments",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Attachment"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Joints",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"JointInstance"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Constraints",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Constraint"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Scripts",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"BaseScript"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Values",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"ValueBase"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "TouchInterests",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"TouchTransmitter"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "ForceFields",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"ForceField"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Animations",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Animator", "Animation", "Keyframe", "KeyframeMarker", "KeyframeSequence", "KeyframeSequenceProvider", "AnimationController", "AnimationTrack", "AnimationClip", "AnimationRigData", "AnimationConstraint", "AnimationClipProvider", "AnimationFromVideoCreatorService", "CurveAnimation"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Humanoids",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Humanoid"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "HumanoidControllers",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"HumanoidController"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Controllers",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Controller", "ControllerBase", "ControllerSensor", "ControllerManager", "ControllerService", "ControllerPartSensor", "ClimbController", "HumanoidController", "AnimationController", "AirController", "SwimController", "GroundController", "VehicleController", "SkateboardController"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Humanoid Related",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Status", "HumanoidDescription", "HumanoidRigDescription"}, false, function(Instance)
			Instance:Destroy()
		end)
	end
end})
Misc_Section_InstanceDeletor:button({name = "Sounds",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		DescendantHandler(Character, {"Sound", "SoundGroup"}, false, function(Instance)
			if Instance:IsA("Sound") then
				Instance.PlayOnRemove = false
			end
			Instance:Destroy()
		end)
	end
end})

Misc_Section_Tools:button({name = "TPTool",callback = function()
	local TpTool = Instance.new("Tool")
	TpTool.Name = "Teleport Tool"
	TpTool.RequiresHandle = false
	TpTool.Parent = LocalPlayer.Backpack
	TpTool.Activated:Connect(function()
		local Char = LocalPlayer.Character or workspace:FindFirstChild(LocalPlayer.Name)
		local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
		if not Char or not HRP then
			return warn("Failed to find HumanoidRootPart")
		end
		HRP.CFrame = CFrame.new(Mouse.Hit.X, Mouse.Hit.Y + 3, Mouse.Hit.Z, select(4, HRP.CFrame:components()))
	end)
end})

Misc_Section_Tools:button({name = "BTools",callback = function()
	for i = 3, 4 do
		local Tool = Instance.new("HopperBin")
		Tool.BinType = i
		Tool.Name = ""
		Tool.Parent = LocalPlayer:FindFirstChildOfClass("Backpack")
	end
end})

Misc_Section_Tools:button({name = "F3X",callback = function()
	if not (RunService:IsStudio()) then
		loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/f3x.lua"))()
	end
end})

local TrollSectionSettings = {
	OverrideAnims = false,
	AnimSpeed = 0,
}

local AnimationsSettings = {
	Loop = false,
	Speed = 1,
	Priority = Enum.AnimationPriority.Core
}

Misc_Section_Animations:toggle({name = "Loop",def = false,callback = function(value)
	AnimationsSettings.Loop = value
end})

Misc_Section_Animations:textbox({name = "Playback Speed",def = "1",placeholder = "Enter PlaybackSpeed",callback = function(value)
	pcall(function() AnimationsSettings.Speed = tonumber(value) end)
end})

Misc_Section_Animations:dropdown({name = "Animation Priority",def = "Core",max = 999,options = {"Core", "Idle", "Movement", "Action", "Action2", "Action3", "Action4"},callback = function(chosen)
	AnimationsSettings.Priority = Enum.AnimationPriority[chosen]
end})

local CachedAnimationIDs = {}

Misc_Section_Animations:button({name = "Play All",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		if #CachedAnimationIDs == 0 then
			local analyze = function(Animation: Animation)
				if Animation:IsA("Animation") then
					if not (table.find(CachedAnimationIDs, tostring(Animation.AnimationId))) then
						table.insert(CachedAnimationIDs, tostring(Animation.AnimationId))
					end
				end
			end
			for Index, Animation: Animation in pairs(game:GetDescendants()) do
				analyze(Animation)
			end
			game.DescendantAdded:Connect(analyze)
		end
		local PlayAnims = function(AnimationController: AnimationController)
			if AnimationController ~= nil then
				for Index, AnimationID in pairs(CachedAnimationIDs) do
					local Animation = Instance.new("Animation")
					Animation.AnimationId = AnimationID
					local Track = AnimationController:LoadAnimation(Animation)
					Track.Looped = AnimationsSettings.Loop
					Track.Priority = AnimationsSettings.Priority
					Track:Play(0)
					Track:AdjustSpeed(AnimationsSettings.Speed)
					Animation:Destroy()
				end
			end
		end
		local AnimationController, Humanoid, Animator = Character:FindFirstChildWhichIsA("AnimationController"), Character:FindFirstChildWhichIsA("Humanoid", true), Character:FindFirstChildWhichIsA("Animator", true)
		PlayAnims(AnimationController)
		PlayAnims(Humanoid)
		PlayAnims(Animator)
	end
end})


Misc_Section_Animations:button({name = "Play Random",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		if #CachedAnimationIDs == 0 then
			local analyze = function(Animation: Animation)
				if Animation:IsA("Animation") then
					if not (table.find(CachedAnimationIDs, tostring(Animation.AnimationId))) then
						table.insert(CachedAnimationIDs, tostring(Animation.AnimationId))
					end
				end
			end
			for Index, Animation: Animation in pairs(game:GetDescendants()) do
				analyze(Animation)
			end
			game.DescendantAdded:Connect(analyze)
		end
		local PlayAnims = function(AnimationController: AnimationController)
			if AnimationController ~= nil then
				local RandomId = CachedAnimationIDs[math.random(1,#CachedAnimationIDs)]
				local Animation = Instance.new("Animation")
				Animation.AnimationId = RandomId
				local Track = AnimationController:LoadAnimation(Animation)
				Track.Looped = AnimationsSettings.Loop
				Track.Priority = AnimationsSettings.Priority
				Track:Play(0)
				Track:AdjustSpeed(AnimationsSettings.Speed)
				Animation:Destroy()
			end
		end
		local AnimationController, Humanoid, Animator = Character:FindFirstChildWhichIsA("AnimationController"), Character:FindFirstChildWhichIsA("Humanoid", true), Character:FindFirstChildWhichIsA("Animator", true)
		PlayAnims(AnimationController)
		PlayAnims(Humanoid)
		PlayAnims(Animator)
	end
end})
Misc_Section_Animations:button({name = "Stop All",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		local Humanoid, Animator, AnimationController = Character:FindFirstChildWhichIsA("Humanoid", true), Character:FindFirstChildWhichIsA("Animator", true), Character:FindFirstChildWhichIsA("AnimationController", true)
		if Humanoid then
			for Index, AnimationTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
				AnimationTrack:Stop(0)
			end
		end
		if Animator then
			for Index, AnimationTrack in pairs(Animator:GetPlayingAnimationTracks()) do
				AnimationTrack:Stop(0)
			end
		end
		if AnimationController then
			for Index, AnimationTrack in pairs(AnimationController:GetPlayingAnimationTracks()) do
				AnimationTrack:Stop(0)
			end
		end
	end
end})

-- 

Misc_Section_Troll:toggle({name = "Override Anim Speed",def = false,callback = function(value)
	TrollSectionSettings.OverrideAnims = value
end})
Misc_Section_Troll:textbox({name = "Anim Speed",def = "0",placeholder = "Default: 0",callback = function(value)
	pcall(function() TrollSectionSettings.AnimSpeed = tonumber(value) end)
end})
task.spawn(function(animspeedhandler)
	RunService.PreRender:Connect(function()
		if TrollSectionSettings.OverrideAnims then
			local Character = LocalPlayer.Character
			if Character then
				local Humanoid = Character:FindFirstChildWhichIsA("Humanoid", true)
				local Animator = Character:FindFirstChildWhichIsA("Animator", true)
				if Humanoid then
					for Index, AnimationTrack: AnimationTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
						AnimationTrack:AdjustSpeed(TrollSectionSettings.AnimSpeed)
					end
				end
				if Animator then
					for Index, AnimationTrack: AnimationTrack in pairs(Animator:GetPlayingAnimationTracks()) do
						AnimationTrack:AdjustSpeed(TrollSectionSettings.AnimSpeed)
					end
				end
			end
		end
	end)
end)
Misc_Section_Troll:button({name = "Jerk Off [FE]",callback = function()
	task.spawn(function()
		local Character = LocalPlayer.Character
		if Character then
			local humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			local backpack = LocalPlayer:FindFirstChildWhichIsA("Backpack")
			if not humanoid or not backpack then return end

			local tool = Instance.new("Tool")
			tool.Name = "Jerk Off"
			tool.ToolTip = "in the stripped club. straight up \"jorking it\" . and by \"it\" , haha, well. let's justr say. My peanits."
			tool.RequiresHandle = false
			tool.Parent = backpack

			local jorkin = false
			local track = nil

			local function stopTomfoolery()
				jorkin = false
				if track then
					track:Stop()
					track = nil
				end
			end

			tool.Equipped:Connect(function() jorkin = true end)
			tool.Unequipped:Connect(stopTomfoolery)
			humanoid.Died:Connect(stopTomfoolery)

			while task.wait() do
				if not jorkin then continue end
				local isR15 = humanoid.RigType == Enum.HumanoidRigType.R15
				if not track then
					local anim = Instance.new("Animation")
					anim.AnimationId = not isR15 and "rbxassetid://72042024" or "rbxassetid://698251653"
					track = humanoid:LoadAnimation(anim)
				end

				track:Play()
				track:AdjustSpeed(isR15 and 0.7 or 0.65)
				track.TimePosition = 0.6
				task.wait(0.1)
				while track and track.TimePosition < (not isR15 and 0.65 or 0.7) do task.wait(0.1) end
				if track then
					track:Stop()
					track = nil
				end
			end
		end
	end)
end})
Misc_Section_Troll:button({name = "Skateboard Animations R6 [FE]",callback = function()
	local Character = LocalPlayer.Character
	if Character then
		local Root = Character:FindFirstChild("HumanoidRootPart")
		if Root then

			task.spawn(function(SpawnSkateboard)				
				local Skateboard = Instance.new("Model")
				Skateboard.Parent = workspace
				Skateboard.Name = "Iron Cafe SkateBoard"

				local SkateboardPlatform = Instance.new("SkateboardPlatform", Skateboard)
				SkateboardPlatform.Size = Vector3.new(2, 0.4, 6)
				local SkateboardMesh = Instance.new("SpecialMesh", SkateboardPlatform)
				SkateboardMesh.MeshType = Enum.MeshType.FileMesh
				SkateboardMesh.Scale = Vector3.new(0.6, 0.6, 0.6)
				SkateboardMesh.MeshId = "http://www.roblox.com/asset/?id=23153590"
				SkateboardMesh.TextureId = "http://www.roblox.com/asset/?id=24538722"

				local BoardDrop = Instance.new("Sound", SkateboardPlatform)
				BoardDrop.Name = "BoardDrop"
				BoardDrop.SoundId = "http://www.roblox.com/asset/?id=22920550"
				local BoardOllie = Instance.new("Sound", SkateboardPlatform)
				BoardOllie.Name = "BoardOllie"
				BoardOllie.SoundId = "http://www.roblox.com/asset/?id=22921446"
				local BoardStop = Instance.new("Sound", SkateboardPlatform)
				BoardStop.Name = "BoardStop"
				BoardStop.SoundId = "http://www.roblox.com/asset/?id=22920633"
				local CruiseLoop = Instance.new("Sound", SkateboardPlatform)
				CruiseLoop.Name = "CruiseLoop"
				CruiseLoop.SoundId = "http://www.roblox.com/asset/?id=22917014"

				local boardKick = Instance.new("Animation", SkateboardPlatform)
				boardKick.Name = "boardKick"
				boardKick.AnimationId = "http://www.roblox.com/Asset?ID=21417802"
				local coastingPose = Instance.new("Animation", SkateboardPlatform)
				coastingPose.Name = "coastingPose"
				coastingPose.AnimationId = "http://www.roblox.com/Asset?ID=21698666"
				local leftturn = Instance.new("Animation", SkateboardPlatform)
				leftturn.Name = "leftturn"
				leftturn.AnimationId = "http://www.roblox.com/Asset?ID=21632926"
				local ollie = Instance.new("Animation", SkateboardPlatform)
				ollie.Name = "ollie"
				ollie.AnimationId = "http://www.roblox.com/Asset?ID=21700751"
				local rightturn = Instance.new("Animation", SkateboardPlatform)
				rightturn.Name = "rightturn"
				rightturn.AnimationId = "http://www.roblox.com/Asset?ID=21633130"


				local BaseWheel = Instance.new("Part")
				BaseWheel.Color = Color3.fromRGB(98, 71, 50)
				BaseWheel.Transparency = 1
				BaseWheel.Shape = Enum.PartType.Ball

				local LF = BaseWheel:Clone()
				local LR = BaseWheel:Clone()
				local RF = BaseWheel:Clone()
				local RR = BaseWheel:Clone()

				LF.Parent = Skateboard
				LF.Position = SkateboardPlatform.Position + Vector3.new(-2.499622344970703, -0.29942286014556885, 1.5002233982086182)
				--LF.RightSurface = Enum.SurfaceType.Hinge
				local LF_Rot = Instance.new("Rotate", LF)
				LF_Rot.Part0 = LF
				LF_Rot.Part1 = SkateboardPlatform
				LF_Rot.C1 = CFrame.new(1, -0.3, 2.5) * CFrame.Angles(0,math.rad(-90),0)

				LR.Parent = Skateboard
				LR.Position = SkateboardPlatform.Position + Vector3.new(2.4998703002929688, -0.2993818521499634, 1.4999892711639404)
				--LR.RightSurface = Enum.SurfaceType.Hinge
				local LR_Rot = Instance.new("Rotate", LR)
				LR_Rot.Part0 = LR
				LR_Rot.Part1 = SkateboardPlatform
				LR_Rot.C1 = CFrame.new(1, -0.3, -2.5) * CFrame.Angles(0,math.rad(-90),0)

				RF.Parent = Skateboard
				RF.Position = SkateboardPlatform.Position + Vector3.new(2.4999961853027344, -0.29935890436172485, -1.499908685684204)
				--RF.LeftSurface = Enum.SurfaceType.Hinge
				local RF_Rot = Instance.new("Rotate", RF)
				RF_Rot.Part0 = RF
				RF_Rot.Part1 = SkateboardPlatform
				RF_Rot.C1 = CFrame.new(-1, -0.3, -2.5) * CFrame.Angles(0,math.rad(90),0)

				RR.Parent = Skateboard
				RR.Position = SkateboardPlatform.Position + Vector3.new(-2.5001144409179688, -0.2993922829627991, -1.4999315738677979)
				--RR.LeftSurface = Enum.SurfaceType.Hinge
				local RR_Rot = Instance.new("Rotate", RR)
				RR_Rot.Part0 = RR
				RR_Rot.Part1 = SkateboardPlatform
				RR_Rot.C1 = CFrame.new(-1, -0.3, 2.5) * CFrame.Angles(0,math.rad(90),0)

				Lock(SkateboardPlatform, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))
				Lock(LF, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))
				Lock(LR, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))
				Lock(RF, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))
				Lock(RR, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))


				SkateboardPlatform.Touched:Connect(function(Hit)
					if Hit:FindFirstAncestor(LocalPlayer.Name) then
						local Root = Hit.Parent:FindFirstChild("HumanoidRootPart")
						if Root and not (Root:HasTag("Skateboard")) then
							RunService.PreRender:Connect(function()
								Root.CFrame = SkateboardPlatform.CFrame + (SkateboardPlatform.CFrame.UpVector * 3)
								Root.CFrame *= CFrame.Angles(0, math.rad(-90), 0)
								Root.Velocity = Vector3.zero
							end)
						end
					end
				end)

				task.spawn(function(Main)
					local Forward = 0
					local Sideways = 0
					local con1 = UIS.InputBegan:Connect(function(Input, Proc)
						if Proc then return end
						if Input.KeyCode == Enum.KeyCode.W then
							local Character = LocalPlayer.Character
							if Character then
								local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
								if Humanoid then
									local track: AnimationTrack = Humanoid:LoadAnimation(boardKick)
									track.Priority = Enum.AnimationPriority.Action4
									track:Play()
								end
							end
							Forward = 1
						elseif Input.KeyCode == Enum.KeyCode.S then
							Forward = -1
						elseif Input.KeyCode == Enum.KeyCode.D then
							Sideways = 1
						elseif Input.KeyCode == Enum.KeyCode.A then
							Sideways = -1
						end
					end)
					local con2 = UIS.InputEnded:Connect(function(Input, Proc)
						if Proc then return end
						if Input.KeyCode == Enum.KeyCode.W then
							if Forward == 1 then
								Forward = 0
							end
						elseif Input.KeyCode == Enum.KeyCode.S then
							if Forward == -1 then
								Forward = 0
							end
						elseif Input.KeyCode == Enum.KeyCode.D then
							if Sideways == 1 then
								Sideways = 0
							end
						elseif Input.KeyCode == Enum.KeyCode.A then
							if Sideways == -1 then
								Sideways = 0
							end
						end
					end)
					local animtrack1: AnimationTrack = nil
					local con3
					con3 = RunService.PreRender:Connect(function()
						--[[SkateboardPlatform.Steer = Sideways
						SkateboardPlatform.Throttle = Forward]]--
						local Character = LocalPlayer.Character
						if Character then
							local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
							if Humanoid then
								if Humanoid.Health <= 0 or Humanoid:GetState() == Enum.HumanoidStateType.Dead then
									con1:Disconnect()
									con2:Disconnect()
									con3:Disconnect()
									Skateboard:Destroy()
								end
								if animtrack1 == nil then
									animtrack1 = Humanoid:LoadAnimation(coastingPose)
									animtrack1.Priority = Enum.AnimationPriority.Action3
									animtrack1:Play()
								end
								Humanoid.WalkSpeed = 0
							end
							local Root = Character:FindFirstChild("HumanoidRootPart")
							if Root then
								SkateboardPlatform.AssemblyLinearVelocity -= Root.CFrame.RightVector * Forward
								SkateboardPlatform.CFrame *= CFrame.Angles(0, math.rad(-Sideways), 0)
							end
						end
					end)
				end)

				Skateboard:PivotTo(Root.CFrame)
			end)

		end
	end
end})
Misc_Section_Troll:button({name = "Become Marble [FE]",callback = function()
	task.spawn(function(marble)
		local UserInputService = game:GetService("UserInputService")
		local RunService = game:GetService("RunService")
		local Camera = workspace.CurrentCamera

		local SPEED_MULTIPLIER = 30
		local JUMP_POWER = 60
		local JUMP_GAP = 0.3

		local character = game.Players.LocalPlayer.Character

		for i,v in ipairs(character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end

		local ball = character.HumanoidRootPart
		ball.Shape = Enum.PartType.Ball
		ball.Size = Vector3.new(5,5,5)
		local humanoid = character:WaitForChild("Humanoid")
		local params = RaycastParams.new()
		params.FilterType = Enum.RaycastFilterType.Blacklist
		params.FilterDescendantsInstances = {character}

		local tc = RunService.PreRender:Connect(function(delta)
			ball.CanCollide = true
			humanoid.PlatformStand = true
			if UserInputService:GetFocusedTextBox() then return end
			if UserInputService:IsKeyDown("W") then
				ball.RotVelocity -= Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER
			end
			if UserInputService:IsKeyDown("A") then
				ball.RotVelocity -= Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER
			end
			if UserInputService:IsKeyDown("S") then
				ball.RotVelocity += Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER
			end
			if UserInputService:IsKeyDown("D") then
				ball.RotVelocity += Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER
			end
			--ball.RotVelocity = ball.RotVelocity - Vector3.new(0,ball.RotVelocity.Y/50,0)
		end)

		UserInputService.JumpRequest:Connect(function()
			local result = workspace:Raycast(
				ball.Position,
				Vector3.new(
					0,
					-((ball.Size.Y/2)+JUMP_GAP),
					0
				),
				params
			)
			if result then
				ball.Velocity = ball.Velocity + Vector3.new(0,JUMP_POWER,0)
			end
		end)

		Camera.CameraSubject = ball
		humanoid.Died:Connect(function() tc:Disconnect() end)
	end)	
end})
local FunPhysSettings = {
	Enabled = false,
	Mode = "Fling (Parts)",
	FloatVelocity = 5,
	SpinVelocity = 45,
}
Misc_Section_Troll:toggle({name = "FunPhysics Enabled",def = false,callback = function(value)
	FunPhysSettings.Enabled = value
end})
Misc_Section_Troll:dropdown({name = "FunPhysics Mode",def = "Fling (Parts)",max = 999,options = {"Fling (Parts)", "Bring (Parts)", "Freeze (Parts)", "Float (Parts)", "Spin (Parts)", "Kill (NPCs)", "Jump (NPCs)", "Ragdoll (NPCs)", "FallingDown (NPCs)", "GettingUp (NPCs)", "Physics (NPCs)", "Freefall (NPCs)", "Swimming (NPCs)", "Flying (NPCs)", "Seated (NPCs)", "Climbing (NPCs)", "PlatformStanding (NPCs)", "RunningNoPhysics (NPCs)", "StrafingNoPhysics (NPCs)", "Landed (NPCs)"},callback = function(chosen)
	FunPhysSettings.Mode = chosen
end})
Misc_Section_Troll:slider({name = "Float Velocity",def = 5, max = 10,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	FunPhysSettings.FloatVelocity = value
end})
Misc_Section_Troll:slider({name = "Spin Velocity",def = 45, max = 180,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	FunPhysSettings.SpinVelocity = value
end})
RunService.PreRender:Connect(function()
	local Outline: SelectionBox = workspace:FindFirstChild("FunPhysicsOutline")
	if not Outline then
		Outline = Instance.new("SelectionBox", workspace)
		Outline.Name = "FunPhysicsOutline"
	end
	Outline.SurfaceTransparency = 1
	Outline.LineThickness = 0.01
	Outline.Color3 = Color3.fromRGB(255, 255, 255)
	Outline.Visible = FunPhysSettings.Enabled
	if Mouse.Target ~= nil then
		if Mouse.Target.Anchored == false then
			Outline.Adornee = Mouse.Target
		else
			Outline.Adornee = nil
		end
	else
		Outline.Adornee = nil
	end
end)
local Clicks = 0
local Dragging = false
Mouse.Button1Up:Connect(function()
	Clicks += 1
	local Target: BasePart = Mouse.Target
	if FunPhysSettings.Enabled and Target ~= nil and Target.Anchored == false then
		if FunPhysSettings.Mode == "Fling (Parts)" then
			Target.AssemblyAngularVelocity = Vector3.new(3e3,3e3,3e3)
		elseif FunPhysSettings.Mode == "Bring (Parts)" then
			local Character = LocalPlayer.Character
			if Character then
				local Root = Character:FindFirstChild("HumanoidRootPart")
				if Root then
					local Model = Target:FindFirstAncestorWhichIsA("Model")
					if Model and not (Model:IsA("Workspace") or Model:IsA("DataModel")) then
						Model:PivotTo(Root.CFrame)
					else
						Target.CFrame = Root.CFrame
					end
				end
			end
		elseif FunPhysSettings.Mode == "Freeze (Parts)" then
			local Model = Target:FindFirstAncestorWhichIsA("Model")
			if Model and not (Model:IsA("Workspace") or Model:IsA("DataModel")) then
				if Model.PrimaryPart ~= nil then
					Target = Model.PrimaryPart
				end
			end
			if Target:HasTag("Frozen") then
				Target:RemoveTag("Frozen")
				local Vel = Target:FindFirstChild("FreezeBodyVelocity")
				if Vel then
					Vel:Destroy()
				end
			else
				Target:AddTag("Frozen")
				local Vel = Instance.new("BodyVelocity", Target)
				Vel.Name = "FreezeBodyVelocity"
				Vel.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				Vel.P = 0
				Vel.Velocity = Vector3.zero
			end
		elseif FunPhysSettings.Mode == "Float (Parts)" then
			local Model = Target:FindFirstAncestorWhichIsA("Model")
			if Model and not (Model:IsA("Workspace") or Model:IsA("DataModel")) then
				if Model.PrimaryPart ~= nil then
					Target = Model.PrimaryPart
				end
			end
			if Target:HasTag("Floated") then
				Target:RemoveTag("Floated")
				local Vel = Target:FindFirstChild("FloatBodyVelocity")
				if Vel then
					Vel:Destroy()
				end
			else
				Target:AddTag("Floated")
				local Vel = Instance.new("BodyVelocity", Target)
				Vel.Name = "FloatBodyVelocity"
				Vel.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				Vel.P = math.huge
				Vel.Velocity = Vector3.new(0, FunPhysSettings.FloatVelocity, 0)
			end
		elseif FunPhysSettings.Mode == "Spin (Parts)" then
			local Model = Target:FindFirstAncestorWhichIsA("Model")
			if Model and not (Model:IsA("Workspace") or Model:IsA("DataModel")) then
				if Model.PrimaryPart ~= nil then
					Target = Model.PrimaryPart
				end
			end
			if Target:HasTag("Spun") then
				Target:RemoveTag("Spun")
				local Vel = Target:FindFirstChild("SpinBodyVelocity")
				if Vel then
					Vel:Destroy()
				end
			else
				Target:AddTag("Spun")
				local Vel = Instance.new("BodyAngularVelocity", Target)
				Vel.Name = "SpinBodyVelocity"
				Vel.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
				Vel.P = math.huge
				Vel.AngularVelocity = Vector3.new(0, FunPhysSettings.SpinVelocity, 0)
			end
		elseif FunPhysSettings.Mode == "Kill (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
			end
		elseif FunPhysSettings.Mode == "Jump (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			end
		elseif FunPhysSettings.Mode == "Freefall (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
			end
		elseif FunPhysSettings.Mode == "FallingDown (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.FallingDown)
			end
		elseif FunPhysSettings.Mode == "Ragdoll (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Ragdoll)
			end
		elseif FunPhysSettings.Mode == "GettingUp (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
			end
		elseif FunPhysSettings.Mode == "Physics (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
			end
		elseif FunPhysSettings.Mode == "Climbing (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Climbing)
			end
		elseif FunPhysSettings.Mode == "Swimming (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			end
		elseif FunPhysSettings.Mode == "Landed (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
			end
		elseif FunPhysSettings.Mode == "Flying (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Flying)
			end
		elseif FunPhysSettings.Mode == "RunningNoPhysics (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
			end
		elseif FunPhysSettings.Mode == "StrafingNoPhysics (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.StrafingNoPhysics)
			end
		elseif FunPhysSettings.Mode == "Seated (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.Seated)
			end
		elseif FunPhysSettings.Mode == "PlatformStanding (NPCs)" then
			local Humanoid = Target.Parent:FindFirstChildWhichIsA("Humanoid", true)
			if Humanoid then
				Humanoid:ChangeState(Enum.HumanoidStateType.PlatformStanding)
			end
		end
	end
end)

local ForceCoreGUI = {
	All = false,
	Backpack = false,
	PlayerList = false,
	Chat = false,
	Health = false,
}

Misc_Section_CoreGUI:toggle({name = "Force All",def = false,callback = function(value)
	ForceCoreGUI.All = not ForceCoreGUI.All
end})
Misc_Section_CoreGUI:toggle({name = "Force Backpack",def = false,callback = function(value)
	ForceCoreGUI.Backpack = not ForceCoreGUI.Backpack
end})
Misc_Section_CoreGUI:toggle({name = "Force PlayerList",def = false,callback = function(value)
	ForceCoreGUI.PlayerList = not ForceCoreGUI.PlayerList
end})
Misc_Section_CoreGUI:toggle({name = "Force Chat",def = false,callback = function(value)
	ForceCoreGUI.Chat = not ForceCoreGUI.Chat
end})
Misc_Section_CoreGUI:toggle({name = "Force Health",def = false,callback = function(value)
	ForceCoreGUI.Health = not ForceCoreGUI.Health
end})


task.spawn(function()
	RunService.PreRender:Connect(function()
		if ForceCoreGUI.All then
			game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.All, true)
		end
		if ForceCoreGUI.Backpack then
			game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
		end
		if ForceCoreGUI.PlayerList then
			game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
		end
		if ForceCoreGUI.Chat then
			game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
		end
		if ForceCoreGUI.Health then
			game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Health, true)
		end

	end)
end)

-- // Movement Tab

local Movement_Section_Self = Movement_Tab:section({name = "Self",side = "left",size = 900})
local Movement_Section_Macros = Movement_Tab:section({name = "Macros",side = "right",size = 105})
local Movement_Section_States = Movement_Tab:section({name = "States",side = "right",size = 105})
local Movement_Section_Modes = Movement_Tab:section({name = "Modes",side = "right",size = 145})

local MacrosSettings = {
	Wallhop = false,
	Angle = 45,
	AutoJump = false,
}

Movement_Section_Macros:toggle({name = "Wallhop Macro (M1)",def = false,callback = function(value)
	MacrosSettings.Wallhop = value
end})
Movement_Section_Macros:dropdown({name = "Wallhop Macro Degree",def = "45",max = 999,options = {"15", "45", "90"},callback = function(chosen)
	MacrosSettings.Angle = tonumber(chosen)
end})
Movement_Section_Macros:toggle({name = "Auto-Jump (BLATANT)",def = false,callback = function(value)
	MacrosSettings.AutoJump = value
end})

UIS.InputBegan:Connect(function(inp, proc)
	if inp.UserInputType == Enum.UserInputType.MouseButton1 then
		if MacrosSettings.Wallhop then
			local Character = LocalPlayer.Character
			if Character ~= nil then
				local Root = Character:FindFirstChild("HumanoidRootPart")
				local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
				if Root and Humanoid then
					Humanoid.AutoRotate = false
					Root.CFrame *= CFrame.Angles(0, math.rad(MacrosSettings.Angle), 0)
					RunService.PostSimulation:Wait()
					if MacrosSettings.AutoJump then
						if (Humanoid.FloorMaterial ~= Enum.Material.Air) then
							Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
						end
					end
					Root.CFrame *= CFrame.Angles(0, math.rad(-MacrosSettings.Angle), 0)
					Humanoid.AutoRotate = true
				end
			end
		end
	end
end)

local StatesSettings = {
	DisableSit = false,
	DisableRagdoll = false,
	DisableDead = false,
}

Movement_Section_States:toggle({name = "Disable Sit",def = false,callback = function(value)
	StatesSettings.DisableSit = value
end})
Movement_Section_States:toggle({name = "Disable Ragdoll",def = false,callback = function(value)
	StatesSettings.DisableRagdoll = value
end})
Movement_Section_States:toggle({name = "Disable Dead",def = false,callback = function(value)
	StatesSettings.DisableDead = value
end})

local AttemptedGodmode = false
Movement_Section_States:button({name = "Attempt Godmode",callback = function()
	if AttemptedGodmode == true then return end 
	AttemptedGodmode = true
	task.spawn(function()
		if replicatesignal then
			replicatesignal(plr.ConnectDiedSignalBackend)
			task.wait(Players.RespawnTime - 0.165)
		end
	end)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Humanoid: Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			if Humanoid then
				Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
				Humanoid.MaxHealth = math.huge
				Humanoid.Health = math.huge
				Humanoid.BreakJointsOnDeath = false
				Humanoid.RequiresNeck = false
			end
			local AGF: ForceField = Character:FindFirstChild("AGF_FORCEFIELD")
			if not AGF then
				AGF = Instance.new("ForceField")
				AGF.Name = "AGF_FORCEFIELD"
				AGF.Visible = false
				AGF.Parent = Character
			end
		end
	end)
end})



task.spawn(function(StatesHandler)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			if Humanoid then
				Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, (not StatesSettings.DisableSit))
				if (StatesSettings.DisableSit and Humanoid:GetState() == Enum.HumanoidStateType.Seated) then
					Humanoid:ChangeState(Enum.HumanoidStateType.Running)
				end
				if AASettings.Enabled then
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
				else
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, (not StatesSettings.DisableRagdoll))
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, (not StatesSettings.DisableRagdoll))
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, (not StatesSettings.DisableRagdoll))
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, (not StatesSettings.DisableRagdoll))
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, (not StatesSettings.DisableRagdoll))
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, (not StatesSettings.DisableRagdoll))
				end
				Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, (not StatesSettings.DisableDead))
			end
		end
	end)
end)

local EdgeJumpSettings = {
	Enabled = false,
	Key = nil,
	JDelay = 0
}
local CachedCharacterParts = {}
local MovementSettings = {
	Gravity = workspace.Gravity,
	Step = false,
	WalkSpeedOverride = false,
	WalkSpeed = 0,
	MinWalkSpeed = 0,
	MaxWalkSpeed = math.huge,
	WalkSpeedMultiplier = 1,
	RigidWalk = false,
	JumpPowerOverride = false,
	JumpPower = 0,
	AirJump = false,
	Bhop = false,
	Float = false,
	FloatQ = false,
	FloatE = false,
	
	Noclip = false,
	Fly = false,
	FlyKeybind = nil,
	FlySpeed = 1,
	FlyForward = 0,
	FlyRight = 0,
	FlyUp = 0,
	
	WalkSpeedMode = "Velocity (Undetectable)", -- Velocity, Teleport, BodyMover, Classic
	JumpPowerMode = "Velocity (Undetectable)", -- Velocity, Teleport, BodyMover, Classic
	BhopMode = "Velocity (Undetectable)", -- Velocity, Teleport, BodyMover, Classic
}
local StandbotSettings = {
	Enabled = false,
	Key = Enum.KeyCode.Z,
	Target = nil,
	Distance = Vector3.zero
}

Movement_Section_Modes:dropdown({name = "WalkSpeed Override Mode",def = "Velocity (Undetectable)",max = 999,options = {"Velocity (Undetectable)", "Teleport", "BodyMover (RISKY)", "Classic (RISKY)"},callback = function(chosen)
	MovementSettings.WalkSpeedMode = chosen
end})
Movement_Section_Modes:dropdown({name = "JumpPower Override Mode",def = "Velocity (Undetectable)",max = 999,options = {"Velocity (Undetectable)", "Teleport", "BodyMover (RISKY)", "Classic (RISKY)"},callback = function(chosen)
	MovementSettings.JumpPowerMode = chosen
end})
Movement_Section_Modes:dropdown({name = "Bhop Mode",def = "Velocity (Undetectable)",max = 999,options = {"Velocity (Undetectable)", "Teleport", "BodyMover (RISKY)", "Classic (RISKY)"},callback = function(chosen)
	MovementSettings.BhopMode = chosen
end})

Movement_Section_Self:toggle({name = "WalkSpeed Override",def = false,callback = function(value)
	MovementSettings.WalkSpeedOverride = value
end})
Movement_Section_Self:textbox({name = "WalkSpeed Value",def = "0",placeholder = "Default: 0",callback = function(value)
	pcall(function() MovementSettings.WalkSpeed = tonumber(value) end)
end})
Movement_Section_Self:toggle({name = "Rigid Walk",def = false,callback = function(value)
	MovementSettings.RigidWalk = value
end})
Movement_Section_Self:textbox({name = "Min WalkSpeed",def = "0",placeholder = "Default: 0",callback = function(value)
	pcall(function() MovementSettings.MinWalkSpeed = tonumber(value) end)
end})
Movement_Section_Self:textbox({name = "Max WalkSpeed",def = "1000e1000",placeholder = "Default: 1000e1000",callback = function(value)
	pcall(function() MovementSettings.MaxWalkSpeed = tonumber(value) end)
end})
Movement_Section_Self:textbox({name = "WalkSpeed Multiplier",def = "1",placeholder = "Default: 1",callback = function(value)
	pcall(function() MovementSettings.WalkSpeedMultiplier = tonumber(value) end)
end})
Movement_Section_Self:toggle({name = "JumpPower Override",def = false,callback = function(value)
	MovementSettings.JumpPowerOverride = value
end})
Movement_Section_Self:textbox({name = "JumpPower Value",def = "0",placeholder = "Default: 0",callback = function(value)
	pcall(function() MovementSettings.JumpPower = tonumber(value) end)
end})
Movement_Section_Self:slider({name = "Gravity",def = workspace.Gravity, max = 1000,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	MovementSettings.Gravity = value
end})
Movement_Section_Self:toggle({name = "Air Jump",def = false,callback = function(value)
	MovementSettings.AirJump = value
end})
Movement_Section_Self:toggle({name = "Bunny Hop",def = false,callback = function(value)
	MovementSettings.Bhop = value
end})
Movement_Section_Self:toggle({name = "Float (Q/E)",def = false,callback = function(value)
	MovementSettings.Float = value
end})
Movement_Section_Self:toggle({name = "Noclip",def = false,callback = function(value)
	MovementSettings.Noclip = value
end})
Movement_Section_Self:toggle({name = "Fly (W/A/S/D/Q/E)",def = false,callback = function(value)
	MovementSettings.Fly = value
end})
Movement_Section_Self:keybind({name = "Fly Keybind",def = nil,callback = function(key)
	MovementSettings.FlyKeybind = key
end})
Movement_Section_Self:slider({name = "Fly Speed",def = 1, max = 10,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	MovementSettings.FlySpeed = value
end})

UIS.InputBegan:Connect(function(inp)
	if inp.KeyCode == Enum.KeyCode.W then
		MovementSettings.FlyForward = 1
	elseif inp.KeyCode == Enum.KeyCode.S then
		MovementSettings.FlyForward = -1
	elseif inp.KeyCode == Enum.KeyCode.A then
		MovementSettings.FlyRight = -1
	elseif inp.KeyCode == Enum.KeyCode.D then
		MovementSettings.FlyRight = 1
	elseif inp.KeyCode == Enum.KeyCode.E then
		MovementSettings.FlyUp = 1
	elseif inp.KeyCode == Enum.KeyCode.Q then
		MovementSettings.FlyUp = -1
	elseif inp.KeyCode == MovementSettings.FlyKeybind then
		MovementSettings.Fly = not MovementSettings.Fly
	end
end)
UIS.InputEnded:Connect(function(inp)
	if inp.KeyCode == Enum.KeyCode.W then
		if MovementSettings.FlyForward == 1 then
			MovementSettings.FlyForward = 0
		end
	elseif inp.KeyCode == Enum.KeyCode.S then
		if MovementSettings.FlyForward == -1 then
			MovementSettings.FlyForward = 0
		end
	elseif inp.KeyCode == Enum.KeyCode.A then
		if MovementSettings.FlyRight == -1 then
			MovementSettings.FlyRight = 0
		end
	elseif inp.KeyCode == Enum.KeyCode.D then
		if MovementSettings.FlyRight == 1 then
			MovementSettings.FlyRight = 0
		end
	elseif inp.KeyCode == Enum.KeyCode.E then
		if MovementSettings.FlyUp == 1 then
			MovementSettings.FlyUp = 0
		end
	elseif inp.KeyCode == Enum.KeyCode.Q then
		if MovementSettings.FlyUp == -1 then
			MovementSettings.FlyUp = 0
		end
	end
end)

task.spawn(function(Noclip)
	RunService.PreRender:Connect(function()
		if MovementSettings.Noclip then
			local Character = LocalPlayer.Character
			if Character then
				local Head, Torso = Character:FindFirstChild("Head"), Character:FindFirstChild("Torso")
				if Head and Torso then
					pcall(function()
						Head.CanCollide = false
						Torso.CanCollide = false
					end)
				end
			end
		end
	end)
end)
local Once = false
task.spawn(function(Fly)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character then
			local Root = Character:FindFirstChild("HumanoidRootPart")
			local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			if Root and Root ~= nil and Humanoid and Humanoid ~= nil then
				pcall(function()
					if MovementSettings.Fly then
						local Camera = workspace.CurrentCamera
						local CamCF = Camera.CFrame
						local CamPos = CamCF.Position
						local RootCFrame = Root.CFrame
						local RootPos = RootCFrame.Position
						Root.AssemblyLinearVelocity = Vector3.zero
						Root.AssemblyAngularVelocity = Vector3.zero
						Root.CFrame = CFrame.lookAt(RootPos, CamPos + (CamCF.LookVector * 9999))
						Root.CFrame += CamCF.LookVector * (MovementSettings.FlyForward * MovementSettings.FlySpeed)
						Root.CFrame += CamCF.RightVector * (MovementSettings.FlyRight * MovementSettings.FlySpeed)
						Root.CFrame += CamCF.UpVector * (MovementSettings.FlyUp * MovementSettings.FlySpeed)
						Humanoid:ChangeState(Enum.HumanoidStateType.Running)
						Once = true
					else 
						if Once == true then
							Once = false 
							Root.CFrame = CFrame.new(Root.Position)
							Humanoid:ChangeState(Enum.HumanoidStateType.Running)
						end
					end
				end)
			end
		end
	end)
end)

local FakeClimb = false
local SmallerHitbox = false
Movement_Section_Self:toggle({name = "Smaller Hitbox",def = false,callback = function(value)
	SmallerHitbox = value
end})
Movement_Section_Self:toggle({name = "Climb",def = false,callback = function(value)
	FakeClimb = value
end})

task.spawn(function()
	RunService.PreRender:Connect(function()
		task.spawn(function()
			local Character = LocalPlayer.Character
			if Character then
				local Torso = Character:FindFirstChild("Torso")
				local Head = Character:FindFirstChild("Head")
				if Torso then
					if SmallerHitbox then
						if Torso:GetAttribute("OgSize") == nil then
							Torso:SetAttribute("OgSize", Torso.Size)
						end
						Torso.Size = Vector3.zero
					else
						if Torso:GetAttribute("OgSize") ~= nil then
							Torso.Size = Torso:GetAttribute("OgSize")
							Torso:SetAttribute("OgSize", nil)
						end
					end
				end
				if Head then
					if SmallerHitbox then
						if Head:GetAttribute("OgSize") == nil then
							Head:SetAttribute("OgSize", Head.Size)
						end
						Head.Size = Vector3.zero
					else
						if Head:GetAttribute("OgSize") ~= nil then
							Head.Size = Head:GetAttribute("OgSize")
							Head:SetAttribute("OgSize", nil)
						end
					end
				end
			end
		end)
		
		local ClimbTruss = workspace:FindFirstChild("__CL1MBTRU55")
		if not ClimbTruss then
			ClimbTruss = Instance.new("TrussPart", workspace)
			ClimbTruss.Name = "__CL1MBTRU55"
		end
		ClimbTruss.Anchored = true
		ClimbTruss.CanCollide = FakeClimb
		ClimbTruss.Locked = true
		ClimbTruss.CanQuery = false
		ClimbTruss.CanTouch = false
		ClimbTruss.Archivable = false
		if FakeClimb then
			ClimbTruss.Transparency = 0.5
		else
			ClimbTruss.Transparency = 1
		end
		ClimbTruss.Reflectance = 0
		ClimbTruss.Material = Enum.Material.SmoothPlastic
		ClimbTruss.Color = Color3.fromRGB(255, 255, 255)
		ClimbTruss.Size = Vector3.zero
		local Character = LocalPlayer.Character
		if Character then
			local Root = Character:FindFirstChild("HumanoidRootPart")
			if Root then
				ClimbTruss.CFrame = Root.CFrame + (Root.CFrame.LookVector * (Root.Size.Z + 0.5))
			end
		end
	end)
end)

local AutoRotate = "-"
Movement_Section_Self:dropdown({name = "AutoRotate Mode",def = "-",max = 999,options = {"-", "Force On", "Force Off"},callback = function(chosen)
	AutoRotate = chosen
end})
local Anchor = "-"
Movement_Section_Self:dropdown({name = "Anchor Mode",def = "-",max = 999,options = {"-", "Force On", "Force Off"},callback = function(chosen)
	Anchor = chosen
end})
local HipHeight = "-"
local AutomaticScalingEnabled = "-"
local MaxSlopeAngle = "-"
Movement_Section_Self:dropdown({name = "AutomaticScalingEnabled Mode",def = "-",max = 999,options = {"-", "Force On", "Force Off"},callback = function(chosen)
	AutomaticScalingEnabled = chosen
end})
Movement_Section_Self:textbox({name = "HipHeight [!]",def = "-",placeholder = "Enter \"-\" to disable!",callback = function(value)
	if value == "-" or value == "" or value == " " then
		HipHeight = "-"
	else
		pcall(function() HipHeight = tonumber(value) end)
	end
end})
Movement_Section_Self:textbox({name = "MaxSlopeAngle [!]",def = "-",placeholder = "Enter \"-\" to disable!",callback = function(value)
	if value == "-" or value == "" or value == " " then
		MaxSlopeAngle = "-"
	else
		pcall(function() MaxSlopeAngle = tonumber(value) end)
	end
end})
task.spawn(function()
	local CharacterHandler = function(Character)
		local Analyze = function(BasePart)
			if BasePart:IsA("BasePart") then
				table.insert(CachedCharacterParts, BasePart)
			end
		end
		for Index, Object in pairs(Character:GetDescendants()) do
			Analyze(Object)
		end
		Character.DescendantAdded:Connect(Analyze)
	end
	if LocalPlayer.Character ~= nil then
		CharacterHandler(LocalPlayer.Character)
	end
	LocalPlayer.CharacterAdded:Connect(CharacterHandler)
	
	RunService.PreRender:Connect(function()
		if Anchor == "Force On" then
			for Index, Object in pairs(CachedCharacterParts) do
				if Object and Object ~= nil and Object:IsA("BasePart") then
					pcall(function() Object.Anchored = true end)
				end
			end
		elseif Anchor == "Force Off" then
			for Index, Object in pairs(CachedCharacterParts) do
				if Object and Object ~= nil and Object:IsA("BasePart") then
					pcall(function() Object.Anchored = false end)
				end
			end
		end
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Humanoid ~= nil then
				if AASettings.ModifyYaw then
					Humanoid.AutoRotate = false
				else
					if AutoRotate == "Force On" then
						Humanoid.AutoRotate = true
					elseif AutoRotate == "Force Off" then
						Humanoid.AutoRotate = false
					end
				end
				if HipHeight ~= "-" then
					Humanoid.HipHeight = HipHeight
				end
				if MaxSlopeAngle ~= "-" then
					Humanoid.MaxSlopeAngle = MaxSlopeAngle
				end
				if AutomaticScalingEnabled == "Force On" then
					Humanoid.AutomaticScalingEnabled = true
				elseif AutomaticScalingEnabled == "Force Off" then
					Humanoid.AutomaticScalingEnabled = false
				end
			end
		end
	end)
end)

Movement_Section_Self:keybind({name = "Standbot",def = Enum.KeyCode.Z,callback = function(key)
	StandbotSettings.Key = key
end})
task.spawn(function(Standbot)
	UIS.InputBegan:Connect(function(inp, proc)
		if proc then return end
		if inp.KeyCode == StandbotSettings.Key then
			StandbotSettings.Enabled = not StandbotSettings.Enabled
			if StandbotSettings.Enabled then
				warn("Started Standbotting")
				local Character = LocalPlayer.Character
				if Character ~= nil then
					local Root = Character:FindFirstChild("HumanoidRootPart")
					if Root then
						local Params = RaycastParams.new()
						Params.FilterType = Enum.RaycastFilterType.Exclude
						Params:AddToFilter(Character)
						local Result = workspace:Raycast(Root.Position, Vector3.new(0, -100000000, 0), Params)
						if Result ~= nil then
							local Part = Result.Instance
							local Distance = (Root.Position - Part.Position)
							StandbotSettings.Target = Part
							StandbotSettings.Distance = Distance
						end
					end
				end
			else
				warn("Stopped Standbotting")
				StandbotSettings.Target = nil
				StandbotSettings.Distance = Vector3.zero
			end
		end
	end)
	RunService.PreRender:Connect(function()
		if StandbotSettings.Enabled and StandbotSettings.Target ~= nil then
			local Character = LocalPlayer.Character
			if Character ~= nil then
				local Root = Character:FindFirstChild("HumanoidRootPart")
				if Root then
					Root.CFrame = StandbotSettings.Target.CFrame + StandbotSettings.Distance
					Root.Velocity = Vector3.zero
				end
			end
		end
	end)
end)
local Strongest = false
Movement_Section_Self:button({name = "Strongest Character (Unrevertable)",callback = function()
	if Strongest == true then return end
	Strongest = true
	task.spawn(function()
		local analyze = function(obj: BasePart)
			if (obj:IsA("BasePart")) then
				if (obj:FindFirstAncestor("Iron Cafe SkateBoard")) then return end
				if (obj:FindFirstAncestor(LocalPlayer.Name)) then
					-- from character
					Lock(obj, "Massless", false)
					Lock(obj, "CustomPhysicalProperties", PhysicalProperties.new(100, 2, 0, 100, 0))
				else
					-- not from character
					Lock(obj, "Massless", true)
					Lock(obj, "CustomPhysicalProperties", PhysicalProperties.new(0.0001, 2, 0, 100, 0))
				end
			end
		end
		for i,v in pairs(game:GetDescendants()) do
			analyze(v)
		end
		game.DescendantAdded:Connect(analyze)
	end)
end})
Movement_Section_Self:toggle({name = "Step",def = false,callback = function(value)
	MovementSettings.Step = not MovementSettings.Step
end})
task.spawn(function(stepping)
	local lastcon
	local update = function(char)
		if lastcon ~= nil then
			lastcon:Disconnect()
			lastcon = nil
		end
		local root = char:WaitForChild("HumanoidRootPart", math.huge)
		if root then
			lastcon = root.Touched:Connect(function(hit)
				if hit:IsA("Terrain") or hit.Transparency == 1 or hit.CanQuery == false then return end
				if MovementSettings.Step then
					local dist = ((hit.Position.Y + hit.Size.Y / 2) - root.Position.Y)
					if dist > 0 then
						root.CFrame += Vector3.new(0, dist + (root.Size.Y), 0)
						root.AssemblyLinearVelocity = Vector3.new(root.AssemblyLinearVelocity.X, 0, root.AssemblyLinearVelocity.Z)
					end
				end
			end)
		end
	end
	if LocalPlayer.Character ~= nil then
		update(LocalPlayer.Character)
	end
	LocalPlayer.CharacterAdded:Connect(update)
end)

task.spawn(function(Floating)
	UIS.InputBegan:Connect(function(Input, Proc)
		if Proc then return end
		if Input.KeyCode == Enum.KeyCode.Q then
			MovementSettings.FloatQ = true
		elseif Input.KeyCode == Enum.KeyCode.E then
			MovementSettings.FloatE = true
		end
	end)
	UIS.InputEnded:Connect(function(Input, Proc)
		if Proc then return end
		if Input.KeyCode == Enum.KeyCode.Q then
			MovementSettings.FloatQ = false
		elseif Input.KeyCode == Enum.KeyCode.E then
			MovementSettings.FloatE = false
		end
	end)
	RunService.PreRender:Connect(function()
		workspace.Gravity = MovementSettings.Gravity
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local HumanoidRootPart, Humanoid = Character:FindFirstChild("HumanoidRootPart"), Character:FindFirstChildWhichIsA("Humanoid")
			if Humanoid then
				if MovementSettings.Bhop then
					local Value = Humanoid.JumpPower
					if MovementSettings.JumpPowerOverride then
						Value = MovementSettings.JumpPower
					end
					if Humanoid.FloorMaterial ~= Enum.Material.Air then
						if MovementSettings.BhopMode == "Velocity (Undetectable)" then
							if HumanoidRootPart then
								HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(HumanoidRootPart.AssemblyLinearVelocity.X, Value, HumanoidRootPart.AssemblyLinearVelocity.Z)
							end
						elseif MovementSettings.BhopMode == "Teleport" then
							if HumanoidRootPart then
								HumanoidRootPart.CFrame += Vector3.new(0, Value, 0)
								HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(HumanoidRootPart.AssemblyLinearVelocity.X, 0, HumanoidRootPart.AssemblyLinearVelocity.Z)
							end
						elseif MovementSettings.BhopMode == "BodyMover (RISKY)" then
							if HumanoidRootPart then
								local NewBodyVelocity = Instance.new("BodyVelocity", HumanoidRootPart)
								NewBodyVelocity.P = math.huge
								NewBodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
								NewBodyVelocity.Velocity = Vector3.new(0, Value, 0)
								game:GetService("Debris"):AddItem(NewBodyVelocity, 0)
							end
						elseif MovementSettings.BhopMode == "Classic (RISKY)" then
							if Humanoid.FloorMaterial ~= Enum.Material.Air then
								Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
							end
						end
					end
				end
			end
			if HumanoidRootPart then
				local FloatPart = workspace:FindFirstChild("__FL0ATP4RT")
				if not FloatPart then
					FloatPart = Instance.new("Part", workspace)
					FloatPart.Name = "__FL0ATP4RT"
				end
				FloatPart.CanQuery = false
				FloatPart.Locked = true
				FloatPart.CanTouch = false
				FloatPart.Archivable = true
				FloatPart.Anchored = true
				FloatPart.Size = Vector3.new(5, 0.5, 5)
				if MovementSettings.Float then
					if MovementSettings.FloatQ then
						FloatPart.Transparency = 0.5
						FloatPart.CanCollide = false
						FloatPart.Position = HumanoidRootPart.Position - Vector3.new(0, 3.25, 0)
					elseif MovementSettings.FloatE then
						FloatPart.Transparency = 0
						FloatPart.CanCollide = true
						FloatPart.Position = HumanoidRootPart.Position - Vector3.new(0, 2, 0)
					else
						FloatPart.Transparency = 0
						FloatPart.CanCollide = true
						FloatPart.Position = HumanoidRootPart.Position - Vector3.new(0, 3.25, 0)
					end
				else
					FloatPart.Transparency = 1
					FloatPart.CanCollide = false
					FloatPart.Position = HumanoidRootPart.Position - Vector3.new(0, 3.25, 0)
				end
			end
		end
	end)
end)

task.spawn(function(WalkspeedOverride)
	RunService.PreRender:Connect(function()
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local HumanoidRootPart, Humanoid = Character:FindFirstChild("HumanoidRootPart"), Character:FindFirstChildWhichIsA("Humanoid")
			if HumanoidRootPart and Humanoid then
				if MovementSettings.JumpPowerMode == "Classic (RISKY)" then
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
				else
					Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, (not MovementSettings.JumpPowerOverride))
				end
				local Value = Humanoid.WalkSpeed
				if MovementSettings.WalkSpeedOverride then
					Value = MovementSettings.WalkSpeed
				end
				local Result = 0
				Result += (Value * MovementSettings.WalkSpeedMultiplier)
				if Result < MovementSettings.MinWalkSpeed then
					Result = MovementSettings.MinWalkSpeed
				elseif Result > MovementSettings.MaxWalkSpeed then
					Result = MovementSettings.MaxWalkSpeed
				end
				if MovementSettings.WalkSpeedOverride or MovementSettings.RigidWalk then
					if MovementSettings.WalkSpeedMode == "Velocity (Undetectable)" then
						if Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
							HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(Humanoid.MoveDirection.X * Result, HumanoidRootPart.AssemblyLinearVelocity.Y, Humanoid.MoveDirection.Z * Result)
						end
					elseif MovementSettings.WalkSpeedMode == "Teleport" then
						if Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
							HumanoidRootPart.CFrame += Vector3.new(Humanoid.MoveDirection.X * Result, 0, Humanoid.MoveDirection.Z * Result)
						end
					elseif MovementSettings.WalkSpeedMode == "BodyMover (RISKY)" then
						if Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
							local NewBodyVelocity = Instance.new("BodyVelocity", HumanoidRootPart)
							NewBodyVelocity.P = math.huge
							NewBodyVelocity.MaxForce = Vector3.new(math.huge, 0, math.huge)
							NewBodyVelocity.Velocity = Vector3.new(Humanoid.MoveDirection.X * Result, 0, Humanoid.MoveDirection.Z * Result)
							game:GetService("Debris"):AddItem(NewBodyVelocity, 0)
						end
					elseif MovementSettings.WalkSpeedMode == "Classic (RISKY)" then
						Humanoid.WalkSpeed = MovementSettings.WalkSpeed
					end
				end
			end
		end
	end)
end)

task.spawn(function(jpoverr)
	UIS.InputBegan:Connect(function(inp, proc)
		if proc then return end
		if inp.KeyCode == Enum.KeyCode.Space then
			local Character = LocalPlayer.Character
			if Character ~= nil then
				local HumanoidRootPart, Humanoid = Character:FindFirstChild("HumanoidRootPart"), Character:FindFirstChildWhichIsA("Humanoid")
				if HumanoidRootPart and Humanoid then
					if MovementSettings.JumpPowerOverride then
						local Value = MovementSettings.JumpPower
						if Humanoid.FloorMaterial == Enum.Material.Air and MovementSettings.AirJump == false then return end
						if MovementSettings.JumpPowerMode == "Velocity (Undetectable)" then
							HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(HumanoidRootPart.AssemblyLinearVelocity.X, Value, HumanoidRootPart.AssemblyLinearVelocity.Z)
						elseif MovementSettings.JumpPowerMode == "Teleport" then
							HumanoidRootPart.CFrame += Vector3.new(0, Value, 0)
							HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(HumanoidRootPart.AssemblyLinearVelocity.X, 0, HumanoidRootPart.AssemblyLinearVelocity.Z)
						elseif MovementSettings.JumpPowerMode == "BodyMover (RISKY)" then
							local NewBodyVelocity = Instance.new("BodyVelocity", HumanoidRootPart)
							NewBodyVelocity.P = math.huge
							NewBodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
							NewBodyVelocity.Velocity = Vector3.new(0, Value, 0)
							game:GetService("Debris"):AddItem(NewBodyVelocity, 0)
						elseif MovementSettings.JumpPowerMode == "Classic (RISKY)" then
							Humanoid.UseJumpPower = true
							Humanoid.JumpPower = Value
						end
					end
				end
			end
		end
	end)
end)

Movement_Section_Self:keybind({name = "Edge Jump Key",def = nil,callback = function(key)
	EdgeJumpSettings.Key = key
end})
Movement_Section_Self:textbox({name = "Edge Jump Delay",def = "0",placeholder = "Enter Jump Delay",callback = function(value)
	pcall(function()EdgeJumpSettings.JDelay = tonumber(value)end)
end})

task.spawn(function(EdgeJump)
	-- vars

	local rs = game:GetService("RunService")
	local uis = game:GetService("UserInputService")
	local plrs = game:GetService("Players")
	local plr = plrs.LocalPlayer

	-- functions

	local update = function()
		repeat rs.PreRender:Wait() until plr.Character ~= nil
		local char = plr.Character
		repeat rs.PreRender:Wait() until char:FindFirstChildWhichIsA("Humanoid")
		local hum: Humanoid = char:FindFirstChildWhichIsA("Humanoid")
		hum.StateChanged:Connect(function(old, new)
			if EdgeJumpSettings.Enabled then
				if new == Enum.HumanoidStateType.Freefall and (old ~= Enum.HumanoidStateType.Freefall and old ~= Enum.HumanoidStateType.Jumping and old ~= Enum.HumanoidStateType.Climbing and old ~= Enum.HumanoidStateType.Landed) then
					task.spawn(function()
						if EdgeJumpSettings.JDelay > 0 then
							task.wait(EdgeJumpSettings.JDelay)
						end
						hum:ChangeState(Enum.HumanoidStateType.Jumping)
					end)
				end
			end
		end)
	end
	update()
	plr.CharacterAdded:Connect(update)

	uis.InputBegan:Connect(function(inp, proc)
		if proc then return end
		if inp.KeyCode == EdgeJumpSettings.Key then
			EdgeJumpSettings.Enabled = not EdgeJumpSettings.Enabled
			local new = Instance.new("Hint", workspace)
			new.Name = "Notice"
			new.Text = `EdgeJump: {EdgeJumpSettings.Enabled}`
			game:GetService("Debris"):AddItem(new, 1)
		end
	end)
end)

-- // Visuals Tab

local Visuals_Section_KillFeedback = Visuals_Tab:section({name = "Kill Feedback",side = "right",size = 205})
local Visuals_Section_Player = Visuals_Tab:section({name = "Player",side = "left",size = 475})
local Visuals_Section_World = Visuals_Tab:section({name = "World",side = "left",size = 475})
local Visuals_Section_Camera = Visuals_Tab:section({name = "Camera",side = "right",size = 215})
local Visuals_Section_Crosshair = Visuals_Tab:section({name = "Crosshair",side = "right",size = 225})
local Visuals_Section_PostFX = Visuals_Tab:section({name = "PostFX",side = "right",size = 425})
local Visuals_Section_Terrain = Visuals_Tab:section({name = "Terrain",side = "right",size = 75})

local WeirdFOV = false
local WeirdFOVFactor = 3
local CameraMatrixModifiers = false
local CameraMatrixConfig = {
	r00 = 1,
	r01 = 0,
	r02 = 0,
	r10 = 0,
	r11 = 1,
	r12 = 0,
	r20 = 0,
	r21 = 0,
	r22 = 1
}

Visuals_Section_Weird:toggle({name = "Weird FOV",def = false,callback = function(value)
	WeirdFOV = value
end})
Visuals_Section_Weird:slider({name = "Weird FOV Factor",def = 3, max = 5,min = 1,rounding = false,ticking = false,measuring = "",callback = function(value)
	WeirdFOVFactor = value
end})
Visuals_Section_Weird:toggle({name = "Camera Matrix Enabled",def = false,callback = function(value)
	CameraMatrixModifiers = value
end})
local CameraMatrix_min = -1
local CameraMatrix_max = 1
Visuals_Section_Weird:slider({name = "Camera Matrix R00 (Default: 1)",def = 1, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r00 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R01 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r01 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R02 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r02 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R10 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r10 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R11 (Default: 1)",def = 1, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r11 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R12 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r12 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R20 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r20 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R21 (Default: 0)",def = 0, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r21 = value
end})
Visuals_Section_Weird:slider({name = "Camera Matrix R22 (Default: 1)",def = 1, max = CameraMatrix_max,min = CameraMatrix_min,rounding = false,ticking = false,measuring = "",callback = function(value)
	CameraMatrixConfig.r22 = value
end})

local camera = workspace.CurrentCamera
local preDistort: CFrame?

local function preDistortCamera()
	if preDistort then
		camera.CFrame = preDistort
	end
end

local function distortCamera()
	preDistort = camera.CFrame
	if CameraMatrixModifiers then
		--warn("Yes")
		camera.CFrame *= CFrame.new(0, 0, 0, 
			CameraMatrixConfig.r00, CameraMatrixConfig.r01, CameraMatrixConfig.r02, CameraMatrixConfig.r10, CameraMatrixConfig.r11, CameraMatrixConfig.r12, CameraMatrixConfig.r20, CameraMatrixConfig.r21, CameraMatrixConfig.r22
		)
		--warn("Yes2")
	end
end
RunService:BindToRenderStep("PreDistort", 199, preDistortCamera)
RunService:BindToRenderStep("DistortCamera", 201, distortCamera)

RunService.PreRender:Connect(function()
	
	local WeirdFOVBall = workspace.CurrentCamera:FindFirstChild("WeirdFOVBall")
	if not WeirdFOVBall then
		WeirdFOVBall = Instance.new("Part")
		WeirdFOVBall.Name = "WeirdFOVBall"
		WeirdFOVBall.Parent = workspace.CurrentCamera
	end
	WeirdFOVBall.Material = Enum.Material.Glass
	WeirdFOVBall.CanCollide = false
	WeirdFOVBall.CanTouch = false
	WeirdFOVBall.CanQuery = false
	WeirdFOVBall.Locked = true
	WeirdFOVBall.Archivable = false
	WeirdFOVBall.CastShadow = false
	WeirdFOVBall.Anchored = true
	WeirdFOVBall.Shape = Enum.PartType.Ball
	if WeirdFOV then
		WeirdFOVBall.Transparency = WeirdFOVFactor
		WeirdFOVBall.Size = Vector3.new(4, 4, 4)
	else 
		WeirdFOVBall.Transparency = 1
		WeirdFOVBall.Size = Vector3.zero
	end
	WeirdFOVBall.Color = Color3.fromRGB(17, 17, 17)
	local Highlight = WeirdFOVBall:FindFirstChild("Highlight")
	if not Highlight then
		Highlight = Instance.new("Highlight")
		Highlight.Parent = WeirdFOVBall
		Highlight.Name = "Highlight"
	end
	Highlight.Enabled = false
	WeirdFOVBall.CFrame = workspace.CurrentCamera.CFrame + (workspace.CurrentCamera.CFrame.LookVector * (2.3 - ((workspace.CurrentCamera.FieldOfView - 70) / 249)))
end)

local KillFeedbackSettings = {
	HighlightEnabled = false,
	HighlightAlwaysOnTop = false,
	HighlightFillTransparency = 0.5,
	HighlightFillColor = Color3.fromRGB(255, 0, 0),
	HighlightOutlineTransparency = 1,
	HighlightOutlineColor = Color3.fromRGB(255, 255, 255),
	TweenTime = 0.5,
}

Visuals_Section_KillFeedback:toggle({name = "Highlight Enabled",def = false,callback = function(value)
	KillFeedbackSettings.HighlightEnabled = value
end})
Visuals_Section_KillFeedback:toggle({name = "Highlight AlwaysOnTop",def = false,callback = function(value)
	KillFeedbackSettings.HighlightAlwaysOnTop = value
end})
Visuals_Section_KillFeedback:slider({name = "Highlight Fill Transparency",def = 0.5, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	KillFeedbackSettings.HighlightFillTransparency = value
end})
Visuals_Section_KillFeedback:colorpicker({name = "Highlight Fill Color",cpname = nil,def = Color3.fromRGB(255,0,0),callback = function(value)
	KillFeedbackSettings.HighlightFillColor = value
end})
Visuals_Section_KillFeedback:slider({name = "Highlight Outline Transparency",def = 1, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	KillFeedbackSettings.HighlightOutlineTransparency = value
end})
Visuals_Section_KillFeedback:colorpicker({name = "Highlight Outline Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	KillFeedbackSettings.HighlightOutlineColor = value
end})
Visuals_Section_KillFeedback:slider({name = "Tween Time",def = 0.5, max = 3,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	KillFeedbackSettings.TweenTime = value
end})

task.spawn(function()
	local CachedHumanoids = {}
	local Analyze = function(Humanoid)
		if Humanoid:IsA("Humanoid") then
			table.insert(CachedHumanoids, Humanoid)
			Humanoid.Died:Connect(function()
				local Model = Humanoid:FindFirstAncestorWhichIsA("Model")
				if Model and KillFeedbackSettings.HighlightEnabled then
					local New = Instance.new("Highlight")
					New.Name = "FENTANYL_Highlight"
					New:AddTag("fentanyl.lua")
					New.Enabled = true
					New.FillTransparency = KillFeedbackSettings.HighlightFillTransparency
					New.OutlineTransparency = KillFeedbackSettings.HighlightOutlineTransparency
					New.FillColor = KillFeedbackSettings.HighlightFillColor
					New.OutlineColor = KillFeedbackSettings.HighlightOutlineColor
					if KillFeedbackSettings.HighlightAlwaysOnTop then
						New.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
					else
						New.DepthMode = Enum.HighlightDepthMode.Occluded
					end
					New.Parent = Model
					New.Adornee = Model
					local TweenService = game:GetService("TweenService")
					local Tween = TweenService:Create(
						New,
						TweenInfo.new(KillFeedbackSettings.TweenTime),
						{FillTransparency = 1, OutlineTransparency = 1}
					):Play()
					game:GetService("Debris"):AddItem(New, KillFeedbackSettings.TweenTime)
				end
			end)
		end
	end
	for Index, Object in pairs(game:GetDescendants()) do
		Analyze(Object)
	end
	game.DescendantAdded:Connect(Analyze)
end)

local CrosshairSettings = {
	Enabled = false,
	Image = "rbxassetid://17459159263",
	Transparency = 0,
	Color = Color3.fromRGB(255, 255, 255),
	BaseRotation = 0,
	RotationSpin = 0,
	Size = 50,
}

Visuals_Section_Crosshair:toggle({name = "Enabled",def = false,callback = function(value)
	CrosshairSettings.Enabled = value
end})
Visuals_Section_Crosshair:dropdown({name = "Image",def = "Circle",max = 10,options = {"Circle", "Cross", "Dot"},callback = function(chosen)
	if chosen == "Circle" then
		CrosshairSettings.Image = "rbxassetid://17459159263"
	elseif chosen == "Cross" then
		CrosshairSettings.Image = "rbxassetid://15574540229"
	elseif chosen == "Dot" then
		CrosshairSettings.Image = "rbxassetid://83149877402771"
	end
end})
Visuals_Section_Crosshair:slider({name = "Transparency",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	CrosshairSettings.Transparency = value
end})
Visuals_Section_Crosshair:colorpicker({name = "Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	CrosshairSettings.Color = value
end})
Visuals_Section_Crosshair:slider({name = "Base Rotation",def = 0, max = 180,min = -180,rounding = false,ticking = false,measuring = "",callback = function(value)
	CrosshairSettings.BaseRotation = value
end})
Visuals_Section_Crosshair:slider({name = "Rotation Spin",def = 0, max = 180,min = -180,rounding = false,ticking = false,measuring = "",callback = function(value)
	CrosshairSettings.RotationSpin = value
end})
Visuals_Section_Crosshair:slider({name = "Size",def = 50, max = 100,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	CrosshairSettings.Size = value
end})

local CrosshairCurrentSpin = 0
RunService.PreRender:Connect(function()
	CrosshairCurrentSpin += CrosshairSettings.RotationSpin
	if CrosshairCurrentSpin >= 180 then
		CrosshairCurrentSpin = -180
	end
	
	UIS.MouseIconEnabled = not CrosshairSettings.Enabled
	
	local PlayerGui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
	if PlayerGui then
		local CrosshairGui = cre:FindFirstChild("FENTANYL_CrosshairGui")
		if not CrosshairGui then
			CrosshairGui = Instance.new("ScreenGui")
		end
		CrosshairGui.Name = "FENTANYL_CrosshairGui"
		if not CrosshairGui:HasTag("fentanyl.lua") then
			CrosshairGui:AddTag("fentanyl.lua")
		end
		CrosshairGui.ClipToDeviceSafeArea = false
		CrosshairGui.SafeAreaCompatibility = Enum.SafeAreaCompatibility.None
		CrosshairGui.ScreenInsets = Enum.ScreenInsets.None
		CrosshairGui.Archivable = false
		CrosshairGui.DisplayOrder = 2147483647
		CrosshairGui.IgnoreGuiInset = true
		CrosshairGui.ResetOnSpawn = false
		CrosshairGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		CrosshairGui.AutoLocalize = false
		CrosshairGui.SelectionGroup = false
		CrosshairGui.Parent = cre
		CrosshairGui.Enabled = CrosshairSettings.Enabled
		
		local CrosshairImage = CrosshairGui:FindFirstChild("FENTANYL_CrosshairImage")
		if not CrosshairImage then
			CrosshairImage = Instance.new("ImageLabel")
		end
		CrosshairImage.Name = "FENTANYL_CrosshairImage"
		if not CrosshairImage:HasTag("fentanyl.lua") then
			CrosshairImage:AddTag("fentanyl.lua")
		end
		CrosshairImage.Archivable = false
		CrosshairImage.Active = false
		CrosshairImage.Draggable = false
		CrosshairImage.BackgroundTransparency = 1
		CrosshairImage.Interactable = false
		CrosshairImage.LayoutOrder = 2147483647
		CrosshairImage.ZIndex = 2147483647
		CrosshairImage.Visible = true
		CrosshairImage.Rotation = (CrosshairSettings.BaseRotation + CrosshairCurrentSpin)
		CrosshairImage.Size = UDim2.new(0, CrosshairSettings.Size, 0, CrosshairSettings.Size)
		CrosshairImage.ImageColor3 = CrosshairSettings.Color
		CrosshairImage.Image = CrosshairSettings.Image
		CrosshairImage.ImageTransparency = CrosshairSettings.Transparency
		CrosshairImage.SizeConstraint = Enum.SizeConstraint.RelativeXY
		CrosshairImage.ClipsDescendants = false
		CrosshairImage.ResampleMode = Enum.ResamplerMode.Default
		CrosshairImage.ScaleType = Enum.ScaleType.Stretch
		CrosshairImage.Parent = CrosshairGui
		
		local MousePosition = UIS:GetMouseLocation()
		CrosshairImage.Position = UDim2.new(
			0,
			MousePosition.X - CrosshairImage.Size.X.Offset / 2,
			0,
			MousePosition.Y - CrosshairImage.Size.Y.Offset / 2
		)
	end
end)

local PostFXSettings = {
	Enabled = false,
	CloudCover = 0.5,
	CloudDensity = 0.7,
	CloudColor = Color3.fromRGB(255, 255, 255),
	BloomIntensity = 1,
	BloomSize = 24,
	BloomThreshold = 2,
	BlurSize = 0,
	SunRaysIntensity = 0.01,
	SunRaysSpread = 0.1,
	Brightness = 0,
	Contrast = 0,
	Saturation = 0,
	WorldTint = Color3.fromRGB(255, 255, 255)
}

Visuals_Section_PostFX:toggle({name = "Enable PostFX Mods",def = false,callback = function(value)
	PostFXSettings.Enabled = value
end})

Visuals_Section_PostFX:slider({name = "Cloud Cover",def = 0.5, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.CloudCover = value
end})
Visuals_Section_PostFX:slider({name = "Cloud Density",def = 0.7, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.CloudDensity = value
end})
Visuals_Section_PostFX:colorpicker({name = "Cloud Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	PostFXSettings.CloudColor = value
end})
Visuals_Section_PostFX:slider({name = "Bloom Intensity",def = 1, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.BloomIntensity = value
end})
Visuals_Section_PostFX:slider({name = "Bloom Size",def = 24, max = 120,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.BloomSize = value
end})
Visuals_Section_PostFX:slider({name = "Bloom Threshold",def = 2, max = 10,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.BloomThreshold = value
end})
Visuals_Section_PostFX:slider({name = "Blur Size",def = 0, max = 24,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.BlurSize = value
end})
Visuals_Section_PostFX:slider({name = "Sun Rays Intensity",def = 0.01, max = 1, min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.SunRaysIntensity = value
end})
Visuals_Section_PostFX:slider({name = "Sun Rays Spread",def = 0.1, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.SunRaysSpread = value
end})
Visuals_Section_PostFX:slider({name = "Brightness",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.Brightness = value
end})
Visuals_Section_PostFX:slider({name = "Contrast",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.Contrast = value
end})
Visuals_Section_PostFX:slider({name = "Saturation",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PostFXSettings.Saturation = value
end})
Visuals_Section_PostFX:colorpicker({name = "World Tint",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	PostFXSettings.WorldTint = value
end})


task.spawn(function()
	-- tag: "fentanyl.lua"
	RunService.PreRender:Connect(function()
		local Terrain = workspace:FindFirstChildWhichIsA("Terrain")
		if Terrain then
			local Clouds = Terrain:FindFirstChild("FentanylCloud")
			if not Clouds  then
				Clouds = Instance.new("Clouds")
				Clouds:AddTag("fentanyl.lua")
				Clouds.Name = "FentanylCloud"
				Clouds.Parent = Terrain
			end
			Clouds.Enabled = PostFXSettings.Enabled
			Clouds.Color = PostFXSettings.CloudColor
			Clouds.Density = PostFXSettings.CloudDensity
			Clouds.Cover = PostFXSettings.CloudCover
		end
		local Lighting = game:GetService("Lighting")
		if Lighting then
			local Bloom = Lighting:FindFirstChild("FentanylBloom")
			if not Bloom  then
				Bloom = Instance.new("BloomEffect")
				Bloom:AddTag("fentanyl.lua")
				Bloom.Name = "FentanylBloom"
				Bloom.Parent = Lighting
			end
			Bloom.Intensity = PostFXSettings.BloomIntensity
			Bloom.Size = PostFXSettings.BloomSize
			Bloom.Threshold = PostFXSettings.BloomThreshold
			Bloom.Enabled = PostFXSettings.Enabled
			
			local Blur = Lighting:FindFirstChild("FentanylBlur")
			if not Blur  then
				Blur = Instance.new("BlurEffect")
				Blur:AddTag("fentanyl.lua")
				Blur.Name = "FentanylBlur"
				Blur.Parent = Lighting
			end
			Blur.Size = PostFXSettings.BlurSize
			Blur.Enabled = PostFXSettings.Enabled
			
			local SunRays = Lighting:FindFirstChild("FentanylSunRays")
			if not SunRays  then
				SunRays = Instance.new("SunRaysEffect")
				SunRays:AddTag("fentanyl.lua")
				SunRays.Name = "FentanylSunRays"
				SunRays.Parent = Lighting
			end
			SunRays.Intensity = PostFXSettings.SunRaysIntensity
			SunRays.Spread = PostFXSettings.SunRaysSpread
			SunRays.Enabled = PostFXSettings.Enabled
			
			local ColorCorrection = Lighting:FindFirstChild("FentanylColorCorrection")
			if not ColorCorrection  then
				ColorCorrection = Instance.new("ColorCorrectionEffect")
				ColorCorrection:AddTag("fentanyl.lua")
				ColorCorrection.Name = "FentanylColorCorrection"
				ColorCorrection.Parent = Lighting
			end
			ColorCorrection.Brightness = PostFXSettings.Brightness
			ColorCorrection.Contrast = PostFXSettings.Contrast
			ColorCorrection.Saturation = PostFXSettings.Saturation
			ColorCorrection.TintColor = PostFXSettings.WorldTint
			ColorCorrection.Enabled = PostFXSettings.Enabled

		end
	end)
end)

local PlayerSettings = {
	SelfChams = false,
	SelfChamsColor = Color3.fromRGB(255, 255, 255),
	SelfChamsTransparency = 0,
	SelfChamsReflectance = 0,
	SelfChamsMaterial = Enum.Material.ForceField,
	SelfChamsShadows = false,
	
	Trail = false,
	TrailFaceCamera = true,
	TrailMode = "Footsteps", -- Footsteps, Back, "Top"
	TrailWidth = 0.01,
	TrailStartColor = Color3.fromRGB(255, 255, 255),
	TrailEndColor = Color3.fromRGB(255, 255, 255),
	TrailStartTransparency = 0,
	TrailEndTransparency = 0,
	TrailLightEmission = 1,
	TrailLightInfluence = 0,
	TrailLifetime = 2,
}

Visuals_Section_Player:toggle({name = "Self Chams Enabled",def = false,callback = function(value)
	PlayerSettings.SelfChams = value
end})
Visuals_Section_Player:colorpicker({name = "Self Chams Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	PlayerSettings.SelfChamsColor = value
end})
Visuals_Section_Player:slider({name = "Self Chams Transparency",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.SelfChamsTransparency = value
end})
Visuals_Section_Player:slider({name = "Self Chams Reflectance",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.SelfChamsReflectance = value
end})
Visuals_Section_Player:toggle({name = "Self Chams Shadows",def = false,callback = function(value)
	PlayerSettings.SelfChamsShadows = value
end})
local ChamsMats = {}
for Index, EnumItem in pairs(Enum.Material:GetEnumItems()) do
	local str = ""
	str ..= string.gsub(tostring(EnumItem), "Enum.Material.", "")
	table.insert(ChamsMats, str)
end
Visuals_Section_Player:dropdown({name = "Self Chams Material",def = "ForceField",max = 999,options = ChamsMats,callback = function(chosen)
	PlayerSettings.SelfChamsMaterial = chosen
end})

Visuals_Section_Player:toggle({name = "Trail Enabled",def = false,callback = function(value)
	PlayerSettings.Trail = value
end})
Visuals_Section_Player:toggle({name = "Trail FaceCamera",def = true,callback = function(value)
	PlayerSettings.TrailFaceCamera = value
end})
Visuals_Section_Player:dropdown({name = "Trail Mode",def = "Footsteps",max = 999,options = {"Footsteps", "Back", "Top"},callback = function(chosen)
	PlayerSettings.TrailMode = chosen
end})
Visuals_Section_Player:slider({name = "Trail Width",def = 0.01, max = 2,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailWidth = value
end})
Visuals_Section_Player:colorpicker({name = "Trail Start Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	PlayerSettings.TrailStartColor = value
end})
Visuals_Section_Player:colorpicker({name = "Trail End Color",cpname = nil,def = Color3.fromRGB(255,255,255),callback = function(value)
	PlayerSettings.TrailEndColor = value
end})
Visuals_Section_Player:slider({name = "Trail Start Transparency",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailStartTransparency = value
end})
Visuals_Section_Player:slider({name = "Trail End Transparency",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailEndTransparency = value
end})
Visuals_Section_Player:slider({name = "Trail Light Emission",def = 1, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailLightEmission = value
end})
Visuals_Section_Player:slider({name = "Trail Light Influence",def = 0, max = 1,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailLightInfluence = value
end})
Visuals_Section_Player:slider({name = "Trail Lifetime",def = 2, max = 10,min = 0,rounding = false,ticking = false,measuring = "",callback = function(value)
	PlayerSettings.TrailLifetime = value
end})

task.spawn(function()
	local CachedCharacterParts = {}
	local CharacterHandler = function(Character)
		local Analyze = function(BasePart)
			if BasePart:IsA("BasePart") then
				table.insert(CachedCharacterParts, BasePart)
			end
		end
		for Index, Object in pairs(Character:GetDescendants()) do
			Analyze(Object)
		end
		Character.DescendantAdded:Connect(Analyze)
	end
	if LocalPlayer.Character ~= nil then
		CharacterHandler(LocalPlayer.Character)
	end
	LocalPlayer.CharacterAdded:Connect(CharacterHandler)
	
	RunService.PreRender:Connect(function()
		for Index, Part in pairs(CachedCharacterParts) do
			if Part:HasTag("SelfChams") then
				if not PlayerSettings.SelfChams then
					Part:RemoveTag("SelfChams")
					local OriginalMaterial = Part:FindFirstChild("OriginalMaterial")
					local OriginalColor = Part:FindFirstChild("OriginalColor")
					local OriginalTransparency = Part:FindFirstChild("OriginalTransparency")
					local OriginalReflectance = Part:FindFirstChild("OriginalReflectance")
					local OriginalMaterial = Part:FindFirstChild("OriginalMaterial")
					local OriginalCastShadow = Part:FindFirstChild("OriginalCastShadow")
					
					if OriginalMaterial then
						Part.Material = Enum.Material[OriginalMaterial.Value]
					end
					if OriginalColor then
						Part.Color = OriginalColor.Value
					end
					if OriginalTransparency then
						Part.Transparency = OriginalTransparency.Value
					end
					if OriginalReflectance then
						Part.Reflectance = OriginalReflectance.Value
					end
					if OriginalCastShadow then
						Part.CastShadow = OriginalCastShadow.Value
					end
				else
					Part.Material = PlayerSettings.SelfChamsMaterial
					Part.Color = PlayerSettings.SelfChamsColor
					Part.Transparency = PlayerSettings.SelfChamsTransparency
					Part.Reflectance = PlayerSettings.SelfChamsReflectance
					Part.Material = PlayerSettings.SelfChamsMaterial
					Part.CastShadow = PlayerSettings.SelfChamsShadows
				end
			else
				if PlayerSettings.SelfChams then
					
					Part:AddTag("SelfChams")
					
					local OGMaterial = Part.Material
					local OGColor = Part.Color
					local OGTrans = Part.Transparency
					local OGReflectance = Part.Reflectance
					local OGMaterial = Part.Material
					local OGCastShadow = Part.CastShadow
					
					local OriginalMaterial = Instance.new("StringValue", Part)
					OriginalMaterial.Name = "OriginalMaterial"
					OriginalMaterial.Value = (string.gsub(tostring(OGMaterial), "Enum.Material.", ""))
					local OriginalColor = Instance.new("Color3Value", Part)
					OriginalColor.Name = "OriginalColor"
					OriginalColor.Value = Part.Color
					local OriginalTransparency = Instance.new("StringValue", Part)
					OriginalTransparency.Name = "OriginalTransparency"
					OriginalTransparency.Value = Part.Transparency
					local OriginalReflectance = Instance.new("StringValue", Part)
					OriginalReflectance.Name = "OriginalReflectance"
					OriginalReflectance.Value = Part.Reflectance
					local OriginalCastShadow = Instance.new("BoolValue", Part)
					OriginalCastShadow.Name = "OriginalCastShadow"
					OriginalCastShadow.Value = Part.CastShadow
					
					Part.Material = PlayerSettings.SelfChamsMaterial
					Part.Color = PlayerSettings.SelfChamsColor
					Part.Transparency = PlayerSettings.SelfChamsTransparency
					Part.Reflectance = PlayerSettings.SelfChamsReflectance
					Part.Material = PlayerSettings.SelfChamsMaterial
					Part.CastShadow = PlayerSettings.SelfChamsShadows

				end
			end
		end
		
		local Character = LocalPlayer.Character
		if Character ~= nil then
			local Root = Character:FindFirstChild("HumanoidRootPart")
			if Root ~= nil then
				local FentanylTrailA0 = Root:FindFirstChild("FentanylTrailA0")
				local FentanylTrailA1 = Root:FindFirstChild("FentanylTrailA1")
				local FentanylTrail = Root:FindFirstChild("FentanylTrail")
				
				if not FentanylTrailA0 then
					FentanylTrailA0 = Instance.new("Attachment")
					FentanylTrailA0:AddTag("fentanyl.lua")
					FentanylTrailA0.Name = "FentanylTrailA0"
					FentanylTrailA0.Parent = Root
				end
				if not FentanylTrailA1 then
					FentanylTrailA1 = Instance.new("Attachment")
					FentanylTrailA1:AddTag("fentanyl.lua")
					FentanylTrailA1.Name = "FentanylTrailA1"
					FentanylTrailA1.Parent = Root
				end
				if not FentanylTrail then
					FentanylTrail = Instance.new("Trail")
					FentanylTrail:AddTag("fentanyl.lua")
					FentanylTrail.Name = "FentanylTrail"
					FentanylTrail.Parent = Root
				end
				
				FentanylTrail.Enabled = PlayerSettings.Trail
				FentanylTrail.Attachment0 = FentanylTrailA0
				FentanylTrail.Attachment1 = FentanylTrailA1
				FentanylTrail.FaceCamera = PlayerSettings.TrailFaceCamera
				FentanylTrail.MaxLength = 0
				FentanylTrail.MinLength = 0
				FentanylTrail.Transparency = NumberSequence.new(PlayerSettings.TrailStartTransparency, PlayerSettings.TrailEndTransparency)
				FentanylTrail.Color = ColorSequence.new(PlayerSettings.TrailStartColor, PlayerSettings.TrailEndColor)
				FentanylTrail.LightInfluence = PlayerSettings.TrailLightInfluence
				FentanylTrail.WidthScale = NumberSequence.new(PlayerSettings.TrailWidth)
				FentanylTrail.LightEmission = PlayerSettings.TrailLightEmission
				FentanylTrail.Lifetime = PlayerSettings.TrailLifetime
				
				if PlayerSettings.TrailMode == "Back" then
					FentanylTrailA0.WorldPosition = Root.Position + Vector3.new(0, Root.Size.Y, 0)
					FentanylTrailA1.WorldPosition = Root.Position - Vector3.new(0, Root.Size.Y, 0)
				elseif PlayerSettings.TrailMode == "Top" then
					FentanylTrailA0.WorldPosition = Root.Position + Vector3.new(0, Root.Size.Y*2, 0)
					FentanylTrailA1.WorldPosition = Root.Position - Vector3.new(0, Root.Size.Y/2, 0)
				elseif PlayerSettings.TrailMode == "Footsteps" then
					FentanylTrailA0.WorldPosition = Root.Position + Vector3.new(-2, -2.95, 0)
					FentanylTrailA1.WorldPosition = Root.Position + Vector3.new(2, -2.95, 0)
				end
				
			end
		end
	end)
end)

Visuals_Section_World:button({name = "No Shadows",callback = function()
	pcall(function()
		Lock(Lighting, "GlobalShadows", false)
	end)
end})
Visuals_Section_World:button({name = "No ShadowSoftness",callback = function()
	pcall(function()
		Lock(Lighting, "ShadowSoftness", 0)
	end)
end})
Visuals_Section_World:button({name = "No Ambient",callback = function()
	pcall(function()
		Lock(Lighting, "Ambient", Color3.fromRGB(255, 255, 255))
	end)
end})
Visuals_Section_World:button({name = "No OutdoorAmbient",callback = function()
	pcall(function()
		Lock(Lighting, "OutdoorAmbient", Color3.fromRGB(255, 255, 255))
	end)
end})
Visuals_Section_World:button({name = "No ColorShift_Top",callback = function()
	pcall(function()
		Lock(Lighting, "ColorShift_Top", Color3.fromRGB(255, 255, 255))
	end)
end})
Visuals_Section_World:button({name = "No ColorShift_Bottom",callback = function()
	pcall(function()
		Lock(Lighting, "ColorShift_Bottom", Color3.fromRGB(255, 255, 255))
	end)
end})
Visuals_Section_World:button({name = "No EnvironmentDiffuseScale",callback = function()
	pcall(function()
		Lock(Lighting, "EnvironmentDiffuseScale", 0)
	end)
end})
Visuals_Section_World:button({name = "No EnvironmentSpecularScale",callback = function()
	pcall(function()
		Lock(Lighting, "EnvironmentSpecularScale", 0)
	end)
end})
Visuals_Section_World:button({name = "Time",callback = function()
	pcall(function()
		Lock(Lighting, "ClockTime", 12)
	end)
end})
Visuals_Section_World:button({name = "No GeographicLatitude",callback = function()
	pcall(function()
		Lock(Lighting, "GeographicLatitude", 23.5)
	end)
end})
Visuals_Section_World:button({name = "No ExposureCompensation",callback = function()
	pcall(function()
		Lock(Lighting, "ExposureCompensation", 0)
	end)
end})
Visuals_Section_World:button({name = "No Brightness",callback = function()
	pcall(function()
		Lock(Lighting, "Brightness", 0)
	end)
end})
Visuals_Section_World:button({name = "No Fog",callback = function()
	pcall(function()
		Lock(Lighting, "FogEnd", math.huge)
		Lock(Lighting, "FogStart", math.huge)
		Lock(Lighting, "FogColor", Color3.fromRGB(0, 0, 0))
	end)
end})
Visuals_Section_World:button({name = "No PostFX",callback = function()
	pcall(function()
		DescendantHandler(Lighting, {"Atmosphere", "Sky", "BloomEffect", "SunRaysEffect", "ColorCorrectionEffect", "BlurEffect", "DepthOfFieldEffect", "ColorGradingEffect"}, true, function(obj) if not obj:HasTag("fentanyl.lua") then obj:Destroy() end end)
		DescendantHandler(workspace:WaitForChild("Terrain"), {"Clouds"}, true, function(obj) if not obj:HasTag("fentanyl.lua") then obj:Destroy() end end)
	end)
end})
Visuals_Section_World:button({name = "No Materials & BasePart Tweaks",callback = function()
	pcall(function()
		DescendantHandler(workspace, {"BasePart"}, true, 
		function(obj)
			local char = LocalPlayer.Character
			if char ~= nil then
				if obj:IsDescendantOf(char) then
					return
				end
			end
			if (obj.Name ~= "WeirdFOVBall") then
				Lock(obj, "Material", Enum.Material.SmoothPlastic)
				Lock(obj, "MaterialVariant", "")
				Lock(obj, "CastShadow", false)
				Lock(obj, "Reflectance", 0)
			end
		end
		)
	end)
end})
Visuals_Section_World:button({name = "No Textures",callback = function()
	pcall(function()
		DescendantHandler(workspace, {"Texture", "Decal"}, true, 
		function(obj)
			if obj.Name ~= "face" and obj.Name ~= "Face" then
				Lock(obj, "Transparency", 1)
			end
		end
		)
	end)
end})
Visuals_Section_World:button({name = "No Particles",callback = function()
	pcall(function()
		DescendantHandler(workspace, {"Fire", "Sparkles", "Smoke", "ParticleEmitter"}, true, 
		function(obj)
			Lock(obj, "Enabled", false)
		end
		)
		DescendantHandler(workspace, {"ForceField"}, true, 
		function(obj)
			Lock(obj, "Visible", false)
		end
		)
	end)
end})
Visuals_Section_World:button({name = "No Light Sources",callback = function()
	pcall(function()
		DescendantHandler(workspace, {"Light"}, true, 
		function(obj)
			Lock(obj, "Enabled", false)
		end
		)
	end)
end})

local CameraSettings = {
	ModsEnabled = false,
	Mode = string.gsub(tostring(LocalPlayer.CameraMode), "Enum.CameraMode.", ""),
	MaxZoom = false,
	FieldOfView = workspace.CurrentCamera.FieldOfView,
	ForceThirdPerson = false,
	ThirdPersonDistance = 10,
}
Visuals_Section_Camera:toggle({name = "Enable Camera Mods",def = false,callback = function(value)
	CameraSettings.ModsEnabled = value
end})
Visuals_Section_Camera:dropdown({name = "Camera Mode",def = CameraSettings.Mode,max = 999,options = {"Classic", "LockFirstPerson"},callback = function(chosen)
	CameraSettings.Mode = chosen
end})
Visuals_Section_Camera:toggle({name = "Max Zoom",def = false,callback = function(value)
	CameraSettings.MaxZoom = value
end})
Visuals_Section_Camera:slider({name = "Field Of View (FOV)",def = workspace.CurrentCamera.FieldOfView, max = 120,min = 1,rounding = true,ticking = false,measuring = "",callback = function(value)
	CameraSettings.FieldOfView = value
end})
Visuals_Section_Camera:toggle({name = "Force Third Person",def = false,callback = function(value)
	CameraSettings.ForceThirdPerson = value
end})
Visuals_Section_Camera:slider({name = "Third Person Distance",def = 10, max = 100,min = 0,rounding = true,ticking = false,measuring = "",callback = function(value)
	CameraSettings.ThirdPersonDistance = value
end})
Visuals_Section_Camera:button({name = "Fix Camera",callback = function()
	local Character = LocalPlayer.Character
	if Character ~= nil then
		local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
		if Humanoid then
			workspace.CurrentCamera.CameraSubject = Humanoid
		end
	end
end})

task.spawn(function()
	RunService.PreRender:Connect(function()
		if CameraSettings.ModsEnabled then
			local OriginalMin = workspace:FindFirstChild("OriginalMin")
			local OriginalMax = workspace:FindFirstChild("OriginalMax")
			local OriginalMode = workspace:FindFirstChild("OriginalMode")
			local OriginalFOV = workspace:FindFirstChild("OriginalFOV")
			if not OriginalMin then
				OriginalMin = Instance.new("NumberValue")
				OriginalMin.Value = LocalPlayer.CameraMinZoomDistance
				OriginalMin.Name = "OriginalMin"
				OriginalMin:AddTag("fentanyl.lua")
				OriginalMin.Parent = workspace
			end
			if not OriginalMax then
				OriginalMax = Instance.new("NumberValue")
				OriginalMax.Value = LocalPlayer.CameraMaxZoomDistance
				OriginalMax.Name = "OriginalMax"
				OriginalMax:AddTag("fentanyl.lua")
				OriginalMax.Parent = workspace
			end
			if not OriginalMode then
				OriginalMode = Instance.new("StringValue")
				OriginalMode.Value = string.gsub(tostring(LocalPlayer.CameraMode), "Enum.CameraMode.", "")
				OriginalMode.Name = "OriginalMode"
				OriginalMode:AddTag("fentanyl.lua")
				OriginalMode.Parent = workspace
			end
			if not OriginalFOV then
				OriginalFOV = Instance.new("NumberValue")
				OriginalFOV.Value = workspace.CurrentCamera.FieldOfView
				OriginalFOV.Name = "OriginalFOV"
				OriginalFOV:AddTag("fentanyl.lua")
				OriginalFOV.Parent = workspace
			end
			
			workspace.CurrentCamera.FieldOfView = CameraSettings.FieldOfView
			if CameraSettings.ForceThirdPerson then
				LocalPlayer.CameraMaxZoomDistance = CameraSettings.ThirdPersonDistance
				LocalPlayer.CameraMinZoomDistance = CameraSettings.ThirdPersonDistance
				LocalPlayer.CameraMode = Enum.CameraMode.Classic
			else
				if CameraSettings.MaxZoom then
					LocalPlayer.CameraMaxZoomDistance = math.huge
					LocalPlayer.CameraMinZoomDistance = 0
				end
				LocalPlayer.CameraMode = Enum.CameraMode[CameraSettings.Mode]
			end
		else
			local OriginalMin = workspace:FindFirstChild("OriginalMin")
			local OriginalMax = workspace:FindFirstChild("OriginalMax")
			local OriginalFOV = workspace:FindFirstChild("OriginalFOV")
			local OriginalMode = workspace:FindFirstChild("OriginalMode")
			if OriginalMin then
				LocalPlayer.CameraMinZoomDistance = OriginalMin.Value
				OriginalMin:Destroy()
			end
			if OriginalMax then
				LocalPlayer.CameraMaxZoomDistance = OriginalMax.Value
				OriginalMax:Destroy()
			end
			if OriginalMode then
				LocalPlayer.CameraMode = Enum.CameraMode[OriginalMode.Value]
				OriginalMode:Destroy()
			end
			if OriginalFOV then
				workspace.CurrentCamera.FieldOfView = OriginalFOV.Value
				OriginalFOV:Destroy()
			end

		end
	end)
end)

Visuals_Section_Terrain:button({name = "Clear Terrain (Dangerous)",callback = function()
	pcall(function()
		workspace:WaitForChild("Terrain"):Clear()
	end)
end})
Visuals_Section_Terrain:button({name = "Water Visuals Tweaks",callback = function()
	pcall(function()
		workspace:WaitForChild("Terrain").WaterColor = Color3.fromRGB(255, 255, 255)
		workspace:WaitForChild("Terrain").WaterReflectance = 0
		workspace:WaitForChild("Terrain").WaterTransparency = 1
		workspace:WaitForChild("Terrain").WaterWaveSize = 0
		workspace:WaitForChild("Terrain").WaterWaveSpeed = 0
	end)
end})
